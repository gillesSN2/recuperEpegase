package com.epegase.forms.comptabilite;

import com.epegase.forms.administration.FormEtatFinancierConfigClient;
import com.epegase.systeme.classe.Amortissements;
import com.epegase.systeme.classe.Budget;
import com.epegase.systeme.classe.BudgetLigne;
import com.epegase.systeme.classe.BulletinLigne;
import com.epegase.systeme.classe.ComplementInformations;
import com.epegase.systeme.classe.CptTabElement;
import com.epegase.systeme.classe.CptTabFormule;
import com.epegase.systeme.classe.CptTabNom;
import com.epegase.systeme.classe.Ecritures;
import com.epegase.systeme.classe.EcrituresAnalytique;
import com.epegase.systeme.classe.ExercicesComptable;
import com.epegase.systeme.classe.JournauxComptables;
import com.epegase.systeme.classe.PegTabElement;
import com.epegase.systeme.classe.PegTabFormule;
import com.epegase.systeme.classe.PegTabNom;
import com.epegase.systeme.classe.PlanBudgetaireCompte;
import com.epegase.systeme.classe.PlanComptable;
import com.epegase.systeme.classe.Racines;
import com.epegase.systeme.classe.Reglements;
import com.epegase.systeme.classe.Salaries;
import com.epegase.systeme.classe.Structure;
import com.epegase.systeme.classe.TabResultats;
import com.epegase.systeme.classe.Tiers;
import com.epegase.systeme.classe.Users;
import com.epegase.systeme.control.EcrituresBalance;
import com.epegase.systeme.control.EcrituresLight;
import com.epegase.systeme.dao.AmortissementsDao;
import com.epegase.systeme.dao.AvoirLigneAchatsDao;
import com.epegase.systeme.dao.AvoirLigneVentesDao;
import com.epegase.systeme.dao.BonEntreeLigneDao;
import com.epegase.systeme.dao.BonSortieLigneDao;
import com.epegase.systeme.dao.BudgetDao;
import com.epegase.systeme.dao.BudgetLigneDao;
import com.epegase.systeme.dao.BulletinLigneDao;
import com.epegase.systeme.dao.ComplementInformationsDao;
import com.epegase.systeme.dao.CptTabElementDao;
import com.epegase.systeme.dao.CptTabFormuleDao;
import com.epegase.systeme.dao.CptTabNomDao;
import com.epegase.systeme.dao.EcrituresAnalytiquesDao;
import com.epegase.systeme.dao.EcrituresDao;
import com.epegase.systeme.dao.ExercicesComptableDao;
import com.epegase.systeme.dao.FactureLigneAchatsDao;
import com.epegase.systeme.dao.FactureLigneVentesDao;
import com.epegase.systeme.dao.JournauxComptablesDao;
import com.epegase.systeme.dao.LivraisonLigneVentesDao;
import com.epegase.systeme.dao.NoteDebitLigneVentesDao;
import com.epegase.systeme.dao.PegTabElementDao;
import com.epegase.systeme.dao.PegTabFormuleDao;
import com.epegase.systeme.dao.PegTabNomDao;
import com.epegase.systeme.dao.PlanBudgetaireCompteDao;
import com.epegase.systeme.dao.PlanComptableDao;
import com.epegase.systeme.dao.RacinesDao;
import com.epegase.systeme.dao.ReglementsDao;
import com.epegase.systeme.dao.RetourLigneVentesDao;
import com.epegase.systeme.dao.TabResultatsDao;
import com.epegase.systeme.util.StaticModePegase;
import com.epegase.systeme.util.UtilDate;
import com.epegase.systeme.util.UtilInitHibernate;
import com.epegase.systeme.util.UtilNombre;
import com.epegase.systeme.util.UtilPrint;
import com.epegase.systeme.xml.LectureCodesEmplois;
import com.epegase.systeme.xml.LireLesoptionsGroupe;
import com.epegase.systeme.xml.LireLesoptionsPaye;
import com.epegase.systeme.xml.OptionComptabilite;
import com.epegase.systeme.xml.OptionGroupe;
import com.epegase.systeme.xml.OptionPaye;
import java.io.File;
import java.io.IOException;
import java.io.Serializable;
import java.net.MalformedURLException;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import javax.faces.model.DataModel;
import javax.faces.model.ListDataModel;
import javax.faces.model.SelectItem;
import javax.naming.NamingException;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import org.hibernate.FlushMode;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.Transaction;

public class FormEtatFinancierExploitation implements Serializable {
   private UtilInitHibernate utilInitHibernate;
   private String baseLog;
   private Structure structureLog;
   private Users usersLog;
   private int var_action = 0;
   private String pageIndex;
   private int nature = 0;
   private int type;
   private OptionComptabilite optionComptabilite;
   private ExercicesComptable selectedExo;
   private ExercicesComptable lastExo;
   private ExercicesComptableDao exercicesComptableDao;
   private UtilNombre utilNombre = new UtilNombre();
   private UtilDate utilDate = new UtilDate();
   private ComplementInformationsDao complementInformationsDao;
   private ComplementInformations complementActivites = new ComplementInformations();
   private transient DataModel datamodelactivites;
   private List lesactivites = new ArrayList();
   private ComplementInformations complementDirigeants = new ComplementInformations();
   private transient DataModel datamodeldirigeants;
   private List lesdirigeants = new ArrayList();
   private ComplementInformations complementActionnaires = new ComplementInformations();
   private transient DataModel datamodelactionnaires;
   private List lesactionnaires = new ArrayList();
   private ComplementInformations complementMca = new ComplementInformations();
   private transient DataModel datamodelmca;
   private List lesmca = new ArrayList();
   private ComplementInformations complementFiliales = new ComplementInformations();
   private transient DataModel datamodelfiliales;
   private List lesfiliales = new ArrayList();
   private int cpteMaxFlush = 200;
   private List balanceListe = new ArrayList();
   private List lesTableaux = new ArrayList();
   private List lesTableauxItems = new ArrayList();
   private String var_tableau_selectionne;
   private List lesResultats = new ArrayList();
   private List listMemoResultat = new ArrayList();
   private transient DataModel dataModelResultat = new ListDataModel();
   private CptTabNom cptTabNom;
   private CptTabNomDao cptTabNomDao;
   private CptTabElement cptTabElement;
   private CptTabElementDao cptTabElementDao;
   private CptTabFormule cptTabFormule;
   private CptTabFormuleDao cptTabFormuleDao;
   private boolean decoupageActivite;
   private int typeTableau;
   private boolean titreCalcule = false;
   private boolean afficheNote = false;
   private boolean afficheCodesEmplois;
   private List mesCodesEmploisItems = new ArrayList();
   private PegTabNom pegTabNom;
   private PegTabNomDao pegTabNomDao;
   private PegTabElement pegTabElement;
   private PegTabElementDao pegTabElementDao;
   private PegTabFormule pegTabFormule;
   private PegTabFormuleDao pegTabFormuleDao;
   private TabResultats tabResultats;
   private TabResultatsDao tabResultatsDao;
   private PlanComptableDao planComptableDao;
   private PlanComptable planComptable = new PlanComptable();
   private boolean afficheValider = false;
   private boolean modeModifierTab = false;
   private List lesNomsColEtatFin = new ArrayList();
   private boolean testAffElmtOrTabResultat;
   private EcrituresDao ecrituresDao;
   private List lesEcritures = new ArrayList();
   private List lesBudgets = new ArrayList();
   private List lePlanComptable = new ArrayList();
   private double resultat1;
   private double resultat2;
   private String resultat3;
   private Date dateDebCalcul = null;
   private Date dateFinCalcul = null;
   private Date memoDateDebCalcul = null;
   private Date memoDateFinCalcul = null;
   private String operateur = "";
   private List lesAmortissements = new ArrayList();
   private AmortissementsDao amortissementsDao;
   private boolean allSelect = false;
   private int var_currentValue;
   private boolean var_showBarProg = false;
   private String var_date_periode_deb;
   private String var_date_periode_fin;
   private long var_exercice;
   private String var_natjrx;
   private int var_resultatAffecte = 0;
   private boolean var_jrxsit = false;
   private boolean var_jrxrsv = false;
   private boolean var_memoJrxsit = false;
   private boolean var_memoJrxrsv = false;
   private boolean var_aff_col01;
   private boolean var_aff_col02;
   private boolean var_aff_col03;
   private boolean var_aff_col04;
   private boolean var_aff_col05;
   private boolean var_aff_col06;
   private boolean var_aff_col07;
   private boolean var_aff_col08;
   private boolean var_aff_col09;
   private boolean var_aff_col10;
   private boolean var_aff_col11;
   private boolean var_aff_col12;
   private boolean var_aff_col13;
   private boolean var_aff_col14;
   private boolean var_aff_col15;
   private boolean var_aff_col16;
   private boolean var_aff_col17;
   private boolean var_aff_col18;
   private boolean var_aff_col19;
   private boolean var_aff_col20;
   private int var_largeur_tableau;
   private int var_largeur_col1;
   private int var_largeur_col2;
   private int var_largeur_col3;
   private int var_largeur_col4;
   private int var_largeur_col5;
   private int var_largeur_col6;
   private int var_largeur_col7;
   private int var_largeur_col8;
   private int var_largeur_col9;
   private int var_largeur_col10;
   private int var_largeur_col11;
   private int var_largeur_col12;
   private int var_largeur_col13;
   private int var_largeur_col14;
   private int var_largeur_col15;
   private int var_largeur_col16;
   private int var_largeur_col17;
   private int var_largeur_col18;
   private int var_largeur_col19;
   private int var_largeur_col20;
   private String elementEnCours;
   private String colonneEnCours;
   private String notesExplicatives;
   private String notesExplicativesMemo;
   private String format;
   private String filtre;
   private String entete;
   private String requete;
   private boolean testAffImprimer;
   private UtilPrint utilPrint;
   private boolean affMail = false;
   private String impDestinataire;
   private String impDestinataireCC;
   private String impDestinataireCCI;
   private String impEmetteur;
   private List tabResultatsList;
   private boolean showModalPanelPrint = false;
   private List lesModelsimpression;
   private String nomRapport;
   private int etatCumul;
   private BudgetLigneDao budgetLigneDao;
   private PlanBudgetaireCompteDao planBudgetaireCompteDao;
   private EcrituresAnalytiquesDao ecrituresAnalytiquesDao;
   private List lesActivites = new ArrayList();
   private int etat;
   private String num;
   private long idEquipe;
   private String nomDivers;
   private String nomTiers;
   private Date date;
   private String devise;
   private long idDoc;
   private int typeChg;
   private String nomDepot;
   private String code;
   private String nomFamille;
   private String libelle;
   private float qteLig;
   private float qteUtilLig;
   private double puLig;
   private double ptLig;
   private double prLig;
   private double pumpLig;
   private String dossier;
   private float coefDevise;
   private float coefPr;
   private double prKgrLig;
   private float poidsBrut;
   private boolean showModalPanelDetailCalcul = false;
   private EcrituresBalance ecrituresBalance;
   private List lesEcrituresDetail = new ArrayList();
   private transient DataModel dataModelEcrituresDetail = new ListDataModel();
   private List lesFormules = new ArrayList();
   private List listSalaries = new ArrayList();
   private List listBulletins = new ArrayList();
   private BulletinLigneDao bulletinLigneDao;
   private List listReglement = new ArrayList();
   private ReglementsDao reglementsDao;
   private List lesModelesAutorises;
   private int choixRacine;
   private String selecFiscalite;
   private boolean showModalPanelErreur = false;
   private List lesComptesErreurs = new ArrayList();
   private transient DataModel dataModelErreur = new ListDataModel();
   private List lesFormulesTableau = new ArrayList();
   private transient DataModel dataModelFormules = new ListDataModel();
   private List lesPeriodes = new ArrayList();
   private String nomGroupe;

   public void InstancesDaoUtilses() {
      this.pegTabNomDao = new PegTabNomDao(this.utilInitHibernate);
      this.pegTabElementDao = new PegTabElementDao(this.utilInitHibernate);
      this.pegTabFormuleDao = new PegTabFormuleDao(this.utilInitHibernate);
      this.cptTabNomDao = new CptTabNomDao(this.baseLog, this.utilInitHibernate);
      this.cptTabElementDao = new CptTabElementDao(this.baseLog, this.utilInitHibernate);
      this.cptTabFormuleDao = new CptTabFormuleDao(this.baseLog, this.utilInitHibernate);
      this.tabResultatsDao = new TabResultatsDao(this.baseLog, this.utilInitHibernate);
      this.ecrituresDao = new EcrituresDao(this.baseLog, this.utilInitHibernate);
      this.amortissementsDao = new AmortissementsDao(this.baseLog, this.utilInitHibernate);
      this.exercicesComptableDao = new ExercicesComptableDao(this.baseLog, this.utilInitHibernate);
      this.complementInformationsDao = new ComplementInformationsDao(this.baseLog, this.utilInitHibernate);
      this.planComptableDao = new PlanComptableDao(this.baseLog, this.utilInitHibernate);
      this.bulletinLigneDao = new BulletinLigneDao(this.baseLog, this.utilInitHibernate);
      this.reglementsDao = new ReglementsDao(this.devise, this.utilInitHibernate);
   }

   public void chargerMesTabNom(int var1, Session var2) throws HibernateException, NamingException {
      this.type = var1;
      this.lesResultats = new ArrayList();
      this.dataModelResultat = new ListDataModel();
      this.lesTableaux = new ArrayList();
      this.lesTableauxItems = new ArrayList();
      this.lesTableaux = this.cptTabNomDao.chargerMesTabNomExp(var1, 0, this.selecFiscalite, var2);
      if (this.lesTableaux.size() != 0) {
         for(int var3 = 0; var3 < this.lesTableaux.size(); ++var3) {
            boolean var4;
            if (this.selecFiscalite.equals("SYSCOHADA")) {
               var4 = false;
               if (!((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("PAGE1") && !((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("PAGE2") && !((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("PAGE3") && !((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("PAGE4") && !((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("PAGE5") && !((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("BA") && !((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("BP") && !((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("CR") && !((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("FLUX")) {
                  if (this.selectedExo.getExecptN1() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE01")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN2() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE02")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN3A() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE3A")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN3B() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE03B")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN3C() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE03C")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN3D() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE03D")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN3E() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE03E")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN4() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE04A")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN4() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE04B")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN5() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE05")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN6() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE06")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN7() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE07")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN8() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE08")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN8A() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE08A")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN9() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE09")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN10() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE10")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN11() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE11")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN12() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE12")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN12() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE12A")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN13() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE13")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN14() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE14")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN15A() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE15A")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN15B() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE15B")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN16A() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE16A")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN16B() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE16B")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN16B() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE16B1")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN16B() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE16B2")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN16B() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE16B3")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN16BB() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE16BBIS1")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN16BB() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE16BBIS2")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN16C() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE16C")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN17() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE17")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN18() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE18")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN19() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE19")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN20() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE20")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN21() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE21")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN22() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE22")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN23() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE23")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN24() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE24")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN25() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE25")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN26() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE26")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN27A() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE27A")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN27B() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE27B")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN27A() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE27A")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN28() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE28")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN29() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE29")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN30() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE30")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN31() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE31")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN32() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE32")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN33() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE33")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN34() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE34")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN35() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE35")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN36() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE36")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN37() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE37")) {
                     var4 = true;
                  }
               } else {
                  var4 = true;
               }

               if (var4) {
                  this.lesTableauxItems.add(new SelectItem(((CptTabNom)this.lesTableaux.get(var3)).getTablisCode(), ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode() + ":" + ((CptTabNom)this.lesTableaux.get(var3)).getTablisLibFR()));
               }
            } else if (!this.selecFiscalite.equals("SYSCOHADA_GA")) {
               this.lesTableauxItems.add(new SelectItem(((CptTabNom)this.lesTableaux.get(var3)).getTablisCode(), ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode() + ":" + ((CptTabNom)this.lesTableaux.get(var3)).getTablisLibFR()));
            } else {
               var4 = false;
               if (!((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("PAGE1") && !((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("PAGE2") && !((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("PAGE3") && !((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("PAGE4") && !((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("PAGE5") && !((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("BA") && !((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("BP") && !((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("CR") && !((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("FLUX")) {
                  if (this.selectedExo.getExecptN1() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE01")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN2() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE02")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN3A() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE3A")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN3B() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE03B")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN3C() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE03C")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN3D() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE03D")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN3E() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE03E")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN4() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE04A")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN4() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE04B")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN5() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE05")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN6() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE06")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN7() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE07")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN8() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE08")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN8A() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE08A")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN9() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE09")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN10() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE10")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN11() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE11")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN12() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE12")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN12() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE12A")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN13() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE13")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN14() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE14")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN15A() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE15A")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN15B() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE15B")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN16A() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE16A")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN16B() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE16B")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN16B() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE16B1")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN16B() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE16B2")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN16B() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE16B3")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN16BB() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE16BBIS1")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN16BB() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE16BBIS2")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN16C() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE16C")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN17() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE17")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN18() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE18")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN19() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE19")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN20() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE20")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN21() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE21")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN22() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE22")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN23() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE23")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN24() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE24")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN25() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE25")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN26() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE26")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN27A() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE27A")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN27B() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE27B")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN27A() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE27A")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN28() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE28")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN29() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE29")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN30() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE30")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN31() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE31")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN32() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE32")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN33() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE33")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN34() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE34")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN35() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE35")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN36() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE36")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN37() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE37")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN38() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE38")) {
                     var4 = true;
                  } else if (this.selectedExo.getExecptN39() != 0 || !((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE39A") && !((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE39B")) {
                     if (this.selectedExo.getExecptN40() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE40")) {
                        var4 = true;
                     } else if (this.selectedExo.getExecptN41() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE41")) {
                        var4 = true;
                     } else if (this.selectedExo.getExecptN42() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE42")) {
                        var4 = true;
                     } else if (this.selectedExo.getExecptN43() != 0 || !((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE43A") && !((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE43B") && !((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE43C")) {
                        if (this.selectedExo.getExecptN44() != 0 || !((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE44A") && !((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE44B")) {
                           if (this.selectedExo.getExecptN45() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE45")) {
                              var4 = true;
                           } else if (this.selectedExo.getExecptN46() != 0 || !((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE46A") && !((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE46B")) {
                              if (this.selectedExo.getExecptN47() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE47")) {
                                 var4 = true;
                              } else if (this.selectedExo.getExecptN48() != 0 || !((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE48A") && !((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE48B")) {
                                 if (this.selectedExo.getExecptN49() == 0 && (((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE49A") || ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE49B") || ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE49C") || ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE49D"))) {
                                    var4 = true;
                                 } else if (this.selectedExo.getExecptN50() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE50")) {
                                    var4 = true;
                                 } else if (this.selectedExo.getExecptN51() == 0 && ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode().equals("NOTE51")) {
                                    var4 = true;
                                 }
                              } else {
                                 var4 = true;
                              }
                           } else {
                              var4 = true;
                           }
                        } else {
                           var4 = true;
                        }
                     } else {
                        var4 = true;
                     }
                  } else {
                     var4 = true;
                  }
               } else {
                  var4 = true;
               }

               if (var4) {
                  this.lesTableauxItems.add(new SelectItem(((CptTabNom)this.lesTableaux.get(var3)).getTablisCode(), ((CptTabNom)this.lesTableaux.get(var3)).getTablisCode() + ":" + ((CptTabNom)this.lesTableaux.get(var3)).getTablisLibFR()));
               }
            }
         }
      }

      this.dateDebCalcul = this.selectedExo.getExecptDateDebut();
      this.dateFinCalcul = this.selectedExo.getExecptDateFin();
      this.memoDateDebCalcul = this.dateDebCalcul;
      this.memoDateFinCalcul = this.dateFinCalcul;
      if (!this.selectedExo.isExecptLiasse()) {
         this.afficheValider = true;
      } else {
         this.afficheValider = false;
      }

      this.cptTabNom = new CptTabNom();
      this.var_tableau_selectionne = "";
      if (this.type == 1) {
         if (this.structureLog.getStrCode1() != null && !this.structureLog.getStrCode1().isEmpty()) {
            this.decoupageActivite = true;
         } else {
            this.decoupageActivite = false;
         }
      } else {
         this.decoupageActivite = false;
      }

      if (this.structureLog.getStrcodepays().equals("0077")) {
         LectureCodesEmplois var5 = new LectureCodesEmplois();
         var5.setStrId(this.structureLog.getStrid());
         var5.setStructureLog(this.structureLog);
         var5.recuperePaye();
         this.mesCodesEmploisItems = var5.getMesCodesEmploisItems();
      }

      if (this.mesCodesEmploisItems != null && this.mesCodesEmploisItems.size() != 0) {
         this.afficheCodesEmplois = true;
      } else {
         this.afficheCodesEmplois = false;
      }

      if (this.structureLog.getStrmaitrecabinet() >= 10) {
         LireLesoptionsGroupe var6 = new LireLesoptionsGroupe();
         var6.setStrId(this.structureLog.getStrid());
         new OptionGroupe();
         OptionGroupe var7 = var6.lancerExploitation();
         this.nomGroupe = var7.getNomGroupe();
      } else {
         this.nomGroupe = "";
      }

   }

   public void chargerMesReporting(int var1, int var2, Session var3) throws HibernateException, NamingException, ParseException {
      this.type = var1;
      this.lesResultats = new ArrayList();
      this.dataModelResultat = new ListDataModel();
      this.lesTableaux = new ArrayList();
      this.lesTableauxItems = new ArrayList();
      this.lesTableaux = this.cptTabNomDao.chargerMesTabNomExp(var1, var2, this.selecFiscalite, var3);
      if (this.lesTableaux.size() != 0) {
         for(int var4 = 0; var4 < this.lesTableaux.size(); ++var4) {
            this.lesTableauxItems.add(new SelectItem(((CptTabNom)this.lesTableaux.get(var4)).getTablisCode(), ((CptTabNom)this.lesTableaux.get(var4)).getTablisCode() + ":" + ((CptTabNom)this.lesTableaux.get(var4)).getTablisLibFR()));
         }
      }

      this.dateDebCalcul = this.utilDate.datePremierJourAnnee(new Date());
      this.dateFinCalcul = this.utilDate.dateDernierJourAnnee(new Date());
      this.memoDateDebCalcul = this.dateDebCalcul;
      this.memoDateFinCalcul = this.dateFinCalcul;
      this.afficheValider = true;
      this.cptTabNom = new CptTabNom();
      this.var_tableau_selectionne = "";
      if (this.structureLog.getStrCode1() != null && !this.structureLog.getStrCode1().isEmpty()) {
         this.decoupageActivite = true;
      } else {
         this.decoupageActivite = false;
      }

   }

   public void chargerMesracines() throws HibernateException, NamingException, IOException {
      if (this.structureLog.getStrzonefiscale2() != null && !this.structureLog.getStrzonefiscale2().isEmpty() && (this.choixRacine == 2 || this.choixRacine == 0)) {
         this.choixRacine = 1;
         this.selecFiscalite = this.structureLog.getStrzonefiscale();
      } else if (this.structureLog.getStrzonefiscale2() != null && !this.structureLog.getStrzonefiscale2().isEmpty() && this.choixRacine == 1) {
         this.choixRacine = 2;
         this.selecFiscalite = this.structureLog.getStrzonefiscale2();
      } else {
         this.choixRacine = 0;
         this.selecFiscalite = this.structureLog.getStrzonefiscale();
      }

   }

   public void permutterMesracines() throws HibernateException, NamingException, IOException {
      this.chargerMesracines();
      this.chargerMesTabNom(this.type, (Session)null);
   }

   public void calculerBilan() throws HibernateException, NamingException, ParseException {
      if (this.lesTableaux.size() != 0) {
         String var1 = this.var_tableau_selectionne;
         this.typeTableau = 1;
         this.memoDateDebCalcul = this.utilDate.dateToSQL(this.dateDebCalcul, "00", "00", "00");
         this.memoDateFinCalcul = this.utilDate.dateToSQL(this.dateFinCalcul, "23", "59", "59");
         this.var_memoJrxrsv = this.var_jrxrsv;
         this.var_memoJrxsit = this.var_jrxsit;

         for(int var2 = 0; var2 < this.lesTableaux.size(); ++var2) {
            this.cptTabNom = (CptTabNom)this.lesTableaux.get(var2);
            if ((this.cptTabNom.getTablisType() == 0 || this.cptTabNom.getTablisType() == 1) && (this.cptTabNom.getTablisCode().equals("BA") || this.cptTabNom.getTablisCode().equals("BP") || this.cptTabNom.getTablisCode().equals("CR") || this.cptTabNom.getTablisCode().equals("FLUX") || this.cptTabNom.getTablisCode().equals("CRC") || this.cptTabNom.getTablisCode().equals("CRP") || this.cptTabNom.getTablisCode().equals("TAF1") || this.cptTabNom.getTablisCode().equals("TAF2") || this.cptTabNom.getTablisCode().equals("TAF3") || this.cptTabNom.getTablisCode().equals("TAF4"))) {
               this.notesExplicatives = "";
               this.notesExplicativesMemo = "";
               this.lesResultats = this.tabResultatsDao.chargerMesTabResultats(this.cptTabNom.getTablisCode(), this.selectedExo.getExecpt_id(), (Session)null);
               this.calculTableaux();
            }
         }

         this.var_tableau_selectionne = var1;
         this.selectionEtatFinancier();
      }

   }

   public void calculerTableauxAnnexes() throws HibernateException, NamingException, ParseException {
      if (this.lesTableaux.size() != 0) {
         String var1 = this.var_tableau_selectionne;
         this.typeTableau = 2;
         this.memoDateDebCalcul = this.utilDate.dateToSQL(this.dateDebCalcul, "00", "00", "00");
         this.memoDateFinCalcul = this.utilDate.dateToSQL(this.dateFinCalcul, "23", "59", "59");
         this.var_memoJrxrsv = this.var_jrxrsv;
         this.var_memoJrxsit = this.var_jrxsit;

         for(int var2 = 0; var2 < this.lesTableaux.size(); ++var2) {
            this.cptTabNom = (CptTabNom)this.lesTableaux.get(var2);
            if ((this.cptTabNom.getTablisType() == 0 || this.cptTabNom.getTablisType() == 1) && !this.cptTabNom.getTablisCode().equals("BA") && !this.cptTabNom.getTablisCode().equals("BP") && !this.cptTabNom.getTablisCode().equals("CR") && !this.cptTabNom.getTablisCode().equals("FLUX") && !this.cptTabNom.getTablisCode().equals("CRC") && !this.cptTabNom.getTablisCode().equals("CRP") && !this.cptTabNom.getTablisCode().equals("TAF1") && !this.cptTabNom.getTablisCode().equals("TAF2") && !this.cptTabNom.getTablisCode().equals("TAF3") && !this.cptTabNom.getTablisCode().equals("TAF4")) {
               this.notesExplicatives = "";
               this.notesExplicativesMemo = "";
               boolean var3;
               if (this.selecFiscalite.equals("SYSCOHADA")) {
                  var3 = false;
                  if (this.selectedExo.getExecptN1() == 0 && this.cptTabNom.getTablisCode().equals("NOTE01")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN2() == 0 && this.cptTabNom.getTablisCode().equals("NOTE02")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN3A() == 0 && this.cptTabNom.getTablisCode().equals("NOTE3A")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN3B() == 0 && this.cptTabNom.getTablisCode().equals("NOTE03B")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN3C() == 0 && this.cptTabNom.getTablisCode().equals("NOTE03C")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN3D() == 0 && this.cptTabNom.getTablisCode().equals("NOTE03D")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN3E() == 0 && this.cptTabNom.getTablisCode().equals("NOTE03E")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN4() == 0 && this.cptTabNom.getTablisCode().equals("NOTE04A")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN4() == 0 && this.cptTabNom.getTablisCode().equals("NOTE04B")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN5() == 0 && this.cptTabNom.getTablisCode().equals("NOTE05")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN6() == 0 && this.cptTabNom.getTablisCode().equals("NOTE06")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN7() == 0 && this.cptTabNom.getTablisCode().equals("NOTE07")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN8() == 0 && this.cptTabNom.getTablisCode().equals("NOTE08")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN8A() == 0 && this.cptTabNom.getTablisCode().equals("NOTE08A")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN9() == 0 && this.cptTabNom.getTablisCode().equals("NOTE09")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN10() == 0 && this.cptTabNom.getTablisCode().equals("NOTE10")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN11() == 0 && this.cptTabNom.getTablisCode().equals("NOTE11")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN12() == 0 && this.cptTabNom.getTablisCode().equals("NOTE12")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN12() == 0 && this.cptTabNom.getTablisCode().equals("NOTE12A")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN13() == 0 && this.cptTabNom.getTablisCode().equals("NOTE13")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN14() == 0 && this.cptTabNom.getTablisCode().equals("NOTE14")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN15A() == 0 && this.cptTabNom.getTablisCode().equals("NOTE15A")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN15B() == 0 && this.cptTabNom.getTablisCode().equals("NOTE15B")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN16A() == 0 && this.cptTabNom.getTablisCode().equals("NOTE16A")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN16B() == 0 && this.cptTabNom.getTablisCode().equals("NOTE16B")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN16B() == 0 && this.cptTabNom.getTablisCode().equals("NOTE16B1")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN16B() == 0 && this.cptTabNom.getTablisCode().equals("NOTE16B2")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN16B() == 0 && this.cptTabNom.getTablisCode().equals("NOTE16B3")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN16BB() == 0 && this.cptTabNom.getTablisCode().equals("NOTE16BBIS1")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN16BB() == 0 && this.cptTabNom.getTablisCode().equals("NOTE16BBIS2")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN16C() == 0 && this.cptTabNom.getTablisCode().equals("NOTE16C")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN17() == 0 && this.cptTabNom.getTablisCode().equals("NOTE17")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN18() == 0 && this.cptTabNom.getTablisCode().equals("NOTE18")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN19() == 0 && this.cptTabNom.getTablisCode().equals("NOTE19")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN20() == 0 && this.cptTabNom.getTablisCode().equals("NOTE20")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN21() == 0 && this.cptTabNom.getTablisCode().equals("NOTE21")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN22() == 0 && this.cptTabNom.getTablisCode().equals("NOTE22")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN23() == 0 && this.cptTabNom.getTablisCode().equals("NOTE23")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN24() == 0 && this.cptTabNom.getTablisCode().equals("NOTE24")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN25() == 0 && this.cptTabNom.getTablisCode().equals("NOTE25")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN26() == 0 && this.cptTabNom.getTablisCode().equals("NOTE26")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN27A() == 0 && this.cptTabNom.getTablisCode().equals("NOTE27A")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN27B() == 0 && this.cptTabNom.getTablisCode().equals("NOTE27B")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN27A() == 0 && this.cptTabNom.getTablisCode().equals("NOTE27A")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN28() == 0 && this.cptTabNom.getTablisCode().equals("NOTE28")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN29() == 0 && this.cptTabNom.getTablisCode().equals("NOTE29")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN30() == 0 && this.cptTabNom.getTablisCode().equals("NOTE30")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN31() == 0 && this.cptTabNom.getTablisCode().equals("NOTE31")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN32() == 0 && this.cptTabNom.getTablisCode().equals("NOTE32")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN33() == 0 && this.cptTabNom.getTablisCode().equals("NOTE33")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN34() == 0 && this.cptTabNom.getTablisCode().equals("NOTE34")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN35() == 0 && this.cptTabNom.getTablisCode().equals("NOTE35")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN36() == 0 && this.cptTabNom.getTablisCode().equals("NOTE36")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN37() == 0 && this.cptTabNom.getTablisCode().equals("NOTE37")) {
                     var3 = true;
                  }

                  if (var3) {
                     this.lesResultats = this.tabResultatsDao.chargerMesTabResultats(this.cptTabNom.getTablisCode(), this.selectedExo.getExecpt_id(), (Session)null);
                     this.calculTableaux();
                  }
               } else if (!this.selecFiscalite.equals("SYSCOHADA_GA")) {
                  this.lesResultats = this.tabResultatsDao.chargerMesTabResultats(this.cptTabNom.getTablisCode(), this.selectedExo.getExecpt_id(), (Session)null);
                  this.calculTableaux();
               } else {
                  var3 = false;
                  if (this.selectedExo.getExecptN1() == 0 && this.cptTabNom.getTablisCode().equals("NOTE01")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN2() == 0 && this.cptTabNom.getTablisCode().equals("NOTE02")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN3A() == 0 && this.cptTabNom.getTablisCode().equals("NOTE3A")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN3B() == 0 && this.cptTabNom.getTablisCode().equals("NOTE03B")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN3C() == 0 && this.cptTabNom.getTablisCode().equals("NOTE03C")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN3D() == 0 && this.cptTabNom.getTablisCode().equals("NOTE03D")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN3E() == 0 && this.cptTabNom.getTablisCode().equals("NOTE03E")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN4() == 0 && this.cptTabNom.getTablisCode().equals("NOTE04A")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN4() == 0 && this.cptTabNom.getTablisCode().equals("NOTE04B")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN5() == 0 && this.cptTabNom.getTablisCode().equals("NOTE05")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN6() == 0 && this.cptTabNom.getTablisCode().equals("NOTE06")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN7() == 0 && this.cptTabNom.getTablisCode().equals("NOTE07")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN8() == 0 && this.cptTabNom.getTablisCode().equals("NOTE08")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN8A() == 0 && this.cptTabNom.getTablisCode().equals("NOTE08A")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN9() == 0 && this.cptTabNom.getTablisCode().equals("NOTE09")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN10() == 0 && this.cptTabNom.getTablisCode().equals("NOTE10")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN11() == 0 && this.cptTabNom.getTablisCode().equals("NOTE11")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN12() == 0 && this.cptTabNom.getTablisCode().equals("NOTE12")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN12() == 0 && this.cptTabNom.getTablisCode().equals("NOTE12A")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN13() == 0 && this.cptTabNom.getTablisCode().equals("NOTE13")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN14() == 0 && this.cptTabNom.getTablisCode().equals("NOTE14")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN15A() == 0 && this.cptTabNom.getTablisCode().equals("NOTE15A")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN15B() == 0 && this.cptTabNom.getTablisCode().equals("NOTE15B")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN16A() == 0 && this.cptTabNom.getTablisCode().equals("NOTE16A")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN16B() == 0 && this.cptTabNom.getTablisCode().equals("NOTE16B")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN16B() == 0 && this.cptTabNom.getTablisCode().equals("NOTE16B1")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN16B() == 0 && this.cptTabNom.getTablisCode().equals("NOTE16B2")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN16B() == 0 && this.cptTabNom.getTablisCode().equals("NOTE16B3")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN16BB() == 0 && this.cptTabNom.getTablisCode().equals("NOTE16BBIS1")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN16BB() == 0 && this.cptTabNom.getTablisCode().equals("NOTE16BBIS2")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN16C() == 0 && this.cptTabNom.getTablisCode().equals("NOTE16C")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN17() == 0 && this.cptTabNom.getTablisCode().equals("NOTE17")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN18() == 0 && this.cptTabNom.getTablisCode().equals("NOTE18")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN19() == 0 && this.cptTabNom.getTablisCode().equals("NOTE19")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN20() == 0 && this.cptTabNom.getTablisCode().equals("NOTE20")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN21() == 0 && this.cptTabNom.getTablisCode().equals("NOTE21")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN22() == 0 && this.cptTabNom.getTablisCode().equals("NOTE22")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN23() == 0 && this.cptTabNom.getTablisCode().equals("NOTE23")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN24() == 0 && this.cptTabNom.getTablisCode().equals("NOTE24")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN25() == 0 && this.cptTabNom.getTablisCode().equals("NOTE25")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN26() == 0 && this.cptTabNom.getTablisCode().equals("NOTE26")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN27A() == 0 && this.cptTabNom.getTablisCode().equals("NOTE27A")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN27B() == 0 && this.cptTabNom.getTablisCode().equals("NOTE27B")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN27A() == 0 && this.cptTabNom.getTablisCode().equals("NOTE27A")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN28() == 0 && this.cptTabNom.getTablisCode().equals("NOTE28")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN29() == 0 && this.cptTabNom.getTablisCode().equals("NOTE29")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN30() == 0 && this.cptTabNom.getTablisCode().equals("NOTE30")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN31() == 0 && this.cptTabNom.getTablisCode().equals("NOTE31")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN32() == 0 && this.cptTabNom.getTablisCode().equals("NOTE32")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN33() == 0 && this.cptTabNom.getTablisCode().equals("NOTE33")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN34() == 0 && this.cptTabNom.getTablisCode().equals("NOTE34")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN35() == 0 && this.cptTabNom.getTablisCode().equals("NOTE35")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN36() == 0 && this.cptTabNom.getTablisCode().equals("NOTE36")) {
                     var3 = true;
                  }

                  if (var3) {
                     this.lesResultats = this.tabResultatsDao.chargerMesTabResultats(this.cptTabNom.getTablisCode(), this.selectedExo.getExecpt_id(), (Session)null);
                     this.calculTableaux();
                  }
               }
            }
         }

         this.var_tableau_selectionne = var1;
         this.selectionEtatFinancier();
      }

   }

   public void calculerTableauxDSF() throws HibernateException, NamingException, ParseException {
      if (this.lesTableaux.size() != 0) {
         String var1 = this.var_tableau_selectionne;
         this.typeTableau = 3;
         this.memoDateDebCalcul = this.utilDate.dateToSQL(this.dateDebCalcul, "00", "00", "00");
         this.memoDateFinCalcul = this.utilDate.dateToSQL(this.dateFinCalcul, "23", "59", "59");
         this.var_memoJrxrsv = this.var_jrxrsv;
         this.var_memoJrxsit = this.var_jrxsit;

         for(int var2 = 0; var2 < this.lesTableaux.size(); ++var2) {
            this.cptTabNom = (CptTabNom)this.lesTableaux.get(var2);
            if ((this.cptTabNom.getTablisType() == 0 || this.cptTabNom.getTablisType() == 1) && !this.cptTabNom.getTablisCode().equals("BA") && !this.cptTabNom.getTablisCode().equals("BP") && !this.cptTabNom.getTablisCode().equals("CR") && !this.cptTabNom.getTablisCode().equals("FLUX") && !this.cptTabNom.getTablisCode().equals("CRC") && !this.cptTabNom.getTablisCode().equals("CRP") && !this.cptTabNom.getTablisCode().equals("TAF1") && !this.cptTabNom.getTablisCode().equals("TAF2") && !this.cptTabNom.getTablisCode().equals("TAF3") && !this.cptTabNom.getTablisCode().equals("TAF4")) {
               this.notesExplicatives = "";
               this.notesExplicativesMemo = "";
               boolean var3 = false;
               if (this.selectedExo.getExecptN37() == 0 && this.cptTabNom.getTablisCode().equals("NOTE37")) {
                  var3 = true;
               } else if (this.selectedExo.getExecptN38() == 0 && this.cptTabNom.getTablisCode().equals("NOTE3839")) {
                  var3 = true;
               } else if (this.selectedExo.getExecptN39() == 0 && this.cptTabNom.getTablisCode().equals("NOTE3839")) {
                  var3 = true;
               } else if (this.selectedExo.getExecptN40() == 0 && this.cptTabNom.getTablisCode().equals("NOTE40")) {
                  var3 = true;
               } else if (this.selectedExo.getExecptN41() == 0 && this.cptTabNom.getTablisCode().equals("NOTE41")) {
                  var3 = true;
               } else if (this.selectedExo.getExecptN42() == 0 && this.cptTabNom.getTablisCode().equals("NOTE42")) {
                  var3 = true;
               } else if (this.selectedExo.getExecptN43() == 0 && (this.cptTabNom.getTablisCode().equals("NOTE43A") || this.cptTabNom.getTablisCode().equals("NOTE43B") || this.cptTabNom.getTablisCode().equals("NOTE43C"))) {
                  var3 = true;
               } else if (this.selectedExo.getExecptN44() != 0 || !this.cptTabNom.getTablisCode().equals("NOTE44A") && !this.cptTabNom.getTablisCode().equals("NOTE44B")) {
                  if (this.selectedExo.getExecptN45() == 0 && this.cptTabNom.getTablisCode().equals("NOTE45")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN46() == 0 && (this.cptTabNom.getTablisCode().equals("NOTE46A") || this.cptTabNom.getTablisCode().equals("NOTE46B"))) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN47() == 0 && this.cptTabNom.getTablisCode().equals("NOTE47")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN48() == 0 && (this.cptTabNom.getTablisCode().equals("NOTE48A") || this.cptTabNom.getTablisCode().equals("NOTE48B"))) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN49() == 0 && (this.cptTabNom.getTablisCode().equals("NOTE49A") || this.cptTabNom.getTablisCode().equals("NOTE49B") || this.cptTabNom.getTablisCode().equals("NOTE49C") || this.cptTabNom.getTablisCode().equals("NOTE49D"))) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN50() == 0 && this.cptTabNom.getTablisCode().equals("NOTE50")) {
                     var3 = true;
                  } else if (this.selectedExo.getExecptN51() == 0 && this.cptTabNom.getTablisCode().equals("NOTE51")) {
                     var3 = true;
                  }
               } else {
                  var3 = true;
               }

               if (var3) {
                  this.lesResultats = this.tabResultatsDao.chargerMesTabResultats(this.cptTabNom.getTablisCode(), this.selectedExo.getExecpt_id(), (Session)null);
                  this.calculTableaux();
               }
            }
         }

         this.var_tableau_selectionne = var1;
         this.selectionEtatFinancier();
      }

   }

   public void selectionEtatFinancier() throws HibernateException, NamingException {
      this.cptTabNom = null;
      this.testAffImprimer = false;
      this.modeModifierTab = false;
      this.notesExplicatives = "";
      this.notesExplicativesMemo = "";
      this.afficheNote = false;
      if (this.var_tableau_selectionne != null && !this.var_tableau_selectionne.isEmpty()) {
         for(int var1 = 0; var1 < this.lesTableaux.size(); ++var1) {
            if (((CptTabNom)this.lesTableaux.get(var1)).getTablisCode().equals(this.var_tableau_selectionne)) {
               this.cptTabNom = new CptTabNom();
               this.cptTabNom = (CptTabNom)this.lesTableaux.get(var1);
               break;
            }
         }

         if (this.cptTabNom != null) {
            if (this.selecFiscalite.equals("SYSCOHADA")) {
               if (!this.cptTabNom.getTablisCode().equals("BA") && !this.cptTabNom.getTablisCode().equals("BP") && !this.cptTabNom.getTablisCode().equals("CR") && !this.cptTabNom.getTablisCode().equals("FLUX")) {
                  this.afficheNote = true;
               } else {
                  this.afficheNote = false;
               }
            } else if (this.selecFiscalite.equals("SYSCOHADA_GA")) {
               if (!this.cptTabNom.getTablisCode().equals("BA") && !this.cptTabNom.getTablisCode().equals("BP") && !this.cptTabNom.getTablisCode().equals("CR") && !this.cptTabNom.getTablisCode().equals("FLUX")) {
                  this.afficheNote = true;
               } else {
                  this.afficheNote = false;
               }
            }

            this.testAffImprimer = true;
            this.selectionEtatFinancierSuite();
         }
      }

   }

   public void selectionEtatFinancierSuite() throws HibernateException, NamingException {
      if (this.cptTabNom != null) {
         Session var1 = this.utilInitHibernate.getOpenSession(this.baseLog, "EtatFinancier");
         if (this.cptTabNom.getTablisType() == 0) {
            this.chargerMesTabElementOrTabResultat(var1);
         } else if (this.cptTabNom.getTablisType() != 2) {
            if (this.cptTabNom.getTablisType() == 3) {
               this.recupereActivites(var1);
            } else if (this.cptTabNom.getTablisType() == 4) {
               this.recupereDAMCAF(var1);
            }
         }

         this.utilInitHibernate.closeSession();
      }

   }

   public void selectionTableau() throws HibernateException, NamingException {
      this.cptTabNom = null;
      this.testAffImprimer = false;
      this.modeModifierTab = false;
      if (this.var_tableau_selectionne != null && !this.var_tableau_selectionne.isEmpty()) {
         for(int var1 = 0; var1 < this.lesTableaux.size(); ++var1) {
            if (((CptTabNom)this.lesTableaux.get(var1)).getTablisCode().equals(this.var_tableau_selectionne)) {
               this.cptTabNom = (CptTabNom)this.lesTableaux.get(var1);
               break;
            }
         }

         if (this.cptTabNom != null) {
            this.testAffImprimer = true;
            this.selectionTableauSuite();
         }
      }

   }

   public void selectionTableauSuite() throws HibernateException, NamingException {
      if (this.cptTabNom != null) {
         Session var1 = this.utilInitHibernate.getOpenSession(this.baseLog, "EtatFinancier");
         if (this.cptTabNom.getTablisType() == 1) {
            this.chargerMesTabElementOrTabResultat(var1);
         }

         this.utilInitHibernate.closeSession();
      }

   }

   public void chargerMesTabElementOrTabResultat(Session var1) throws HibernateException, NamingException {
      if (this.cptTabNom != null) {
         this.var_resultatAffecte = this.selectedExo.getExecptResultat();
         this.var_jrxsit = this.selectedExo.isExecptJrxSit();
         this.var_jrxrsv = this.selectedExo.isExecptJrxRsv();
         if (this.cptTabNom.getTablisType() == 1) {
            if (this.selectedExo.getExecptTBDateDebut() == null) {
               this.dateDebCalcul = this.selectedExo.getExecptDateDebut();
            } else {
               this.dateDebCalcul = this.selectedExo.getExecptTBDateDebut();
            }

            if (this.selectedExo.getExecptTBDateFin() == null) {
               this.dateFinCalcul = this.selectedExo.getExecptDateFin();
            } else {
               this.dateFinCalcul = this.selectedExo.getExecptTBDateFin();
            }
         } else {
            if (this.selectedExo.getExecptETDateDebut() == null) {
               this.dateDebCalcul = this.selectedExo.getExecptDateDebut();
            } else {
               this.dateDebCalcul = this.selectedExo.getExecptETDateDebut();
            }

            if (this.selectedExo.getExecptETDateFin() == null) {
               this.dateFinCalcul = this.selectedExo.getExecptDateFin();
            } else {
               this.dateFinCalcul = this.selectedExo.getExecptETDateFin();
            }
         }

         this.memoDateDebCalcul = this.dateDebCalcul;
         this.memoDateFinCalcul = this.dateFinCalcul;
         this.lesResultats = new ArrayList();
         this.dataModelResultat = new ListDataModel();
         this.notesExplicatives = "";
         this.lesResultats = this.tabResultatsDao.chargerMesTabResultats(this.cptTabNom.getTablisCode(), this.selectedExo.getExecpt_id(), var1);
         if (this.lesResultats.size() == 0) {
            this.lesResultats = new ArrayList();
            this.lesResultats = this.convertirTableau(var1);
            this.testAffElmtOrTabResultat = true;
         } else {
            for(int var2 = 0; var2 < this.lesResultats.size(); ++var2) {
               if (((TabResultats)this.lesResultats.get(var2)).getTabresNotes() != null && !((TabResultats)this.lesResultats.get(var2)).getTabresNotes().isEmpty()) {
                  this.notesExplicatives = ((TabResultats)this.lesResultats.get(var2)).getTabresNotes();
                  break;
               }
            }

            this.var_resultatAffecte = ((TabResultats)this.lesResultats.get(0)).getTabresResultatAffecte();
            if (((TabResultats)this.lesResultats.get(0)).getTabresJrSit() == 1) {
               this.var_jrxsit = true;
            } else {
               this.var_jrxsit = false;
            }

            if (((TabResultats)this.lesResultats.get(0)).getTabresJrRv() == 1) {
               this.var_jrxrsv = true;
            } else {
               this.var_jrxrsv = false;
            }

            if (this.cptTabNom.getTablisType() == 1) {
               if (((TabResultats)this.lesResultats.get(0)).getTabresDateDeb() != null) {
                  this.dateDebCalcul = ((TabResultats)this.lesResultats.get(0)).getTabresDateDeb();
               }

               if (((TabResultats)this.lesResultats.get(0)).getTabresDateFin() != null) {
                  this.dateFinCalcul = ((TabResultats)this.lesResultats.get(0)).getTabresDateFin();
               }

               this.memoDateDebCalcul = this.dateDebCalcul;
               this.memoDateFinCalcul = this.dateFinCalcul;
            }

            this.testAffElmtOrTabResultat = false;
         }

         this.affichageColonne();
         this.var_largeur_tableau = this.var_largeur_col1 + this.var_largeur_col2 + this.var_largeur_col3 + this.var_largeur_col4 + this.var_largeur_col5 + this.var_largeur_col6 + this.var_largeur_col7 + this.var_largeur_col8 + this.var_largeur_col9 + this.var_largeur_col10 + this.var_largeur_col11 + this.var_largeur_col12 + this.var_largeur_col13 + this.var_largeur_col14 + this.var_largeur_col15 + this.var_largeur_col16 + this.var_largeur_col17 + this.var_largeur_col18 + this.var_largeur_col19 + this.var_largeur_col20 + 100 + 400 + 30;
         this.dataModelResultat.setWrappedData(this.lesResultats);
      }

   }

   public void chargerMesTabElementAnterieur(Session var1) throws HibernateException, NamingException {
      if (this.cptTabNom != null) {
         this.var_resultatAffecte = this.selectedExo.getExecptResultat();
         this.var_jrxsit = this.selectedExo.isExecptJrxSit();
         this.var_jrxrsv = this.selectedExo.isExecptJrxRsv();
         Date var2 = this.dateDebCalcul;
         Date var3 = this.dateFinCalcul;
         new ExercicesComptable();
         long var5 = this.selectedExo.getExecpt_id() - 1L;
         ExercicesComptable var4 = this.exercicesComptableDao.recupererLExoPrecis(var5, var1);
         if (var4 != null) {
            if (this.cptTabNom.getTablisType() == 1) {
               if (var4.getExecptTBDateDebut() == null) {
                  this.dateDebCalcul = var4.getExecptDateDebut();
               } else {
                  this.dateDebCalcul = var4.getExecptTBDateDebut();
               }

               if (var4.getExecptTBDateFin() == null) {
                  this.dateFinCalcul = var4.getExecptDateFin();
               } else {
                  this.dateFinCalcul = var4.getExecptTBDateFin();
               }
            } else {
               if (var4.getExecptETDateDebut() == null) {
                  this.dateDebCalcul = var4.getExecptDateDebut();
               } else {
                  this.dateDebCalcul = var4.getExecptETDateDebut();
               }

               if (var4.getExecptETDateFin() == null) {
                  this.dateFinCalcul = var4.getExecptDateFin();
               } else {
                  this.dateFinCalcul = var4.getExecptETDateFin();
               }
            }

            new ArrayList();
            this.lesResultats = new ArrayList();
            this.dataModelResultat = new ListDataModel();
            List var7 = this.tabResultatsDao.chargerMesTabResultats(this.cptTabNom.getTablisCode(), var4.getExecpt_id(), var1);
            if (var7.size() == 0) {
               this.testAffElmtOrTabResultat = true;
            } else {
               this.testAffElmtOrTabResultat = false;
               if (var7.size() != 0) {
                  new TabResultats();

                  for(int var9 = 0; var9 < var7.size(); ++var9) {
                     this.tabResultats = new TabResultats();
                     TabResultats var8 = (TabResultats)var7.get(var9);
                     this.tabResultats.setExercicescomptable(this.selectedExo);
                     this.tabResultats.setTabresAnnee(this.selectedExo.getExecpt_id());
                     this.tabResultats.setTabresCode(var8.getTabresCode());
                     this.tabResultats.setTabresCol01(var8.getTabresCol01());
                     this.tabResultats.setTabresCol02(var8.getTabresCol02());
                     this.tabResultats.setTabresCol03(var8.getTabresCol03());
                     this.tabResultats.setTabresCol04(var8.getTabresCol04());
                     this.tabResultats.setTabresCol05(var8.getTabresCol05());
                     this.tabResultats.setTabresCol06(var8.getTabresCol06());
                     this.tabResultats.setTabresCol07(var8.getTabresCol07());
                     this.tabResultats.setTabresCol08(var8.getTabresCol08());
                     this.tabResultats.setTabresCol09(var8.getTabresCol09());
                     this.tabResultats.setTabresCol10(var8.getTabresCol10());
                     this.tabResultats.setTabresCol11(var8.getTabresCol11());
                     this.tabResultats.setTabresCol12(var8.getTabresCol12());
                     this.tabResultats.setTabresCol13(var8.getTabresCol13());
                     this.tabResultats.setTabresCol14(var8.getTabresCol14());
                     this.tabResultats.setTabresCol15(var8.getTabresCol15());
                     this.tabResultats.setTabresCol16(var8.getTabresCol16());
                     this.tabResultats.setTabresCol17(var8.getTabresCol17());
                     this.tabResultats.setTabresCol18(var8.getTabresCol18());
                     this.tabResultats.setTabresCol19(var8.getTabresCol19());
                     this.tabResultats.setTabresCol20(var8.getTabresCol20());
                     this.tabResultats.setTabresCon01(var8.getTabresCon01());
                     this.tabResultats.setTabresCon02(var8.getTabresCon02());
                     this.tabResultats.setTabresCon03(var8.getTabresCon03());
                     this.tabResultats.setTabresCon04(var8.getTabresCon04());
                     this.tabResultats.setTabresCon05(var8.getTabresCon05());
                     this.tabResultats.setTabresCon06(var8.getTabresCon06());
                     this.tabResultats.setTabresCon07(var8.getTabresCon07());
                     this.tabResultats.setTabresCon08(var8.getTabresCon08());
                     this.tabResultats.setTabresCon09(var8.getTabresCon09());
                     this.tabResultats.setTabresCon10(var8.getTabresCon10());
                     this.tabResultats.setTabresCon11(var8.getTabresCon11());
                     this.tabResultats.setTabresCon12(var8.getTabresCon12());
                     this.tabResultats.setTabresCon13(var8.getTabresCon13());
                     this.tabResultats.setTabresCon14(var8.getTabresCon14());
                     this.tabResultats.setTabresCon15(var8.getTabresCon15());
                     this.tabResultats.setTabresCon16(var8.getTabresCon16());
                     this.tabResultats.setTabresCon17(var8.getTabresCon17());
                     this.tabResultats.setTabresCon18(var8.getTabresCon18());
                     this.tabResultats.setTabresCon19(var8.getTabresCon19());
                     this.tabResultats.setTabresCon20(var8.getTabresCon20());
                     this.tabResultats.setTabresDateDeb(var2);
                     this.tabResultats.setTabresDateFin(var3);
                     this.tabResultats.setTabresIdElement(var8.getTabresIdElement());
                     this.tabResultats.setTabresJrRv(var8.getTabresJrRv());
                     this.tabResultats.setTabresJrSit(var8.getTabresJrSit());
                     this.tabResultats.setTabresLibFr(var8.getTabresLibFr());
                     this.tabResultats.setTabresLibSp(var8.getTabresLibSp());
                     this.tabResultats.setTabresLibUk(var8.getTabresLibUk());
                     this.tabResultats.setTabresMode(var8.getTabresMode());
                     this.tabResultats.setTabresNbMois(var8.getTabresNbMois());
                     this.tabResultats.setTabresNomFr(var8.getTabresNomFr());
                     this.tabResultats.setTabresNomSp(var8.getTabresNomSp());
                     this.tabResultats.setTabresNomUk(var8.getTabresNomUk());
                     this.tabResultats.setTabresNum(var8.getTabresNum());
                     this.tabResultats.setTabresPrint(var8.getTabresPrint());
                     this.tabResultats.setTabresReference(var8.getTabresReference());
                     this.tabResultats.setTabresType(var8.getTabresType());
                     this.tabResultats.setTabresTypeCol01(var8.getTabresTypeCol01());
                     this.tabResultats.setTabresTypeCol02(var8.getTabresTypeCol02());
                     this.tabResultats.setTabresTypeCol03(var8.getTabresTypeCol03());
                     this.tabResultats.setTabresTypeCol04(var8.getTabresTypeCol04());
                     this.tabResultats.setTabresTypeCol05(var8.getTabresTypeCol05());
                     this.tabResultats.setTabresTypeCol06(var8.getTabresTypeCol06());
                     this.tabResultats.setTabresTypeCol07(var8.getTabresTypeCol07());
                     this.tabResultats.setTabresTypeCol08(var8.getTabresTypeCol08());
                     this.tabResultats.setTabresTypeCol09(var8.getTabresTypeCol09());
                     this.tabResultats.setTabresTypeCol10(var8.getTabresTypeCol10());
                     this.tabResultats.setTabresTypeCol11(var8.getTabresTypeCol11());
                     this.tabResultats.setTabresTypeCol12(var8.getTabresTypeCol12());
                     this.tabResultats.setTabresTypeCol13(var8.getTabresTypeCol13());
                     this.tabResultats.setTabresTypeCol14(var8.getTabresTypeCol14());
                     this.tabResultats.setTabresTypeCol15(var8.getTabresTypeCol15());
                     this.tabResultats.setTabresTypeCol16(var8.getTabresTypeCol16());
                     this.tabResultats.setTabresTypeCol17(var8.getTabresTypeCol17());
                     this.tabResultats.setTabresTypeCol18(var8.getTabresTypeCol18());
                     this.tabResultats.setTabresTypeCol19(var8.getTabresTypeCol19());
                     this.tabResultats.setTabresTypeCol20(var8.getTabresTypeCol20());
                     this.tabResultats.setTabresFormatCol01(var8.getTabresFormatCol01());
                     this.tabResultats.setTabresFormatCol02(var8.getTabresFormatCol02());
                     this.tabResultats.setTabresFormatCol03(var8.getTabresFormatCol03());
                     this.tabResultats.setTabresFormatCol04(var8.getTabresFormatCol04());
                     this.tabResultats.setTabresFormatCol05(var8.getTabresFormatCol05());
                     this.tabResultats.setTabresFormatCol06(var8.getTabresFormatCol06());
                     this.tabResultats.setTabresFormatCol07(var8.getTabresFormatCol07());
                     this.tabResultats.setTabresFormatCol08(var8.getTabresFormatCol08());
                     this.tabResultats.setTabresFormatCol09(var8.getTabresFormatCol09());
                     this.tabResultats.setTabresFormatCol10(var8.getTabresFormatCol10());
                     this.tabResultats.setTabresFormatCol11(var8.getTabresFormatCol11());
                     this.tabResultats.setTabresFormatCol12(var8.getTabresFormatCol12());
                     this.tabResultats.setTabresFormatCol13(var8.getTabresFormatCol13());
                     this.tabResultats.setTabresFormatCol14(var8.getTabresFormatCol14());
                     this.tabResultats.setTabresFormatCol15(var8.getTabresFormatCol15());
                     this.tabResultats.setTabresFormatCol16(var8.getTabresFormatCol16());
                     this.tabResultats.setTabresFormatCol17(var8.getTabresFormatCol17());
                     this.tabResultats.setTabresFormatCol18(var8.getTabresFormatCol18());
                     this.tabResultats.setTabresFormatCol19(var8.getTabresFormatCol19());
                     this.tabResultats.setTabresFormatCol20(var8.getTabresFormatCol20());
                     this.lesResultats.add(this.tabResultats);
                  }
               }
            }

            this.affichageColonne();
            this.var_largeur_tableau = this.var_largeur_col1 + this.var_largeur_col2 + this.var_largeur_col3 + this.var_largeur_col4 + this.var_largeur_col5 + this.var_largeur_col6 + this.var_largeur_col7 + this.var_largeur_col8 + this.var_largeur_col9 + this.var_largeur_col10 + this.var_largeur_col11 + this.var_largeur_col12 + this.var_largeur_col13 + this.var_largeur_col14 + this.var_largeur_col15 + this.var_largeur_col16 + this.var_largeur_col17 + this.var_largeur_col18 + this.var_largeur_col19 + this.var_largeur_col20 + 100 + 400 + 30;
            this.dataModelResultat.setWrappedData(this.lesResultats);
         }
      }

   }

   public void chargerElementsExerciceAnterieur(Session var1) throws HibernateException, NamingException {
      if (this.cptTabNom != null) {
         new ExercicesComptable();
         long var3 = this.selectedExo.getExecpt_id() - 1L;
         ExercicesComptable var2 = this.exercicesComptableDao.recupererLExoPrecis(var3, var1);
         if (var2 != null) {
            this.selectedExo.setExecptAdresseCabinet(var2.getExecptAdresseCabinet());
            this.selectedExo.setExecptAdresseCommissaire(var2.getExecptAdresseCommissaire());
            this.selectedExo.setExecptAdresseComptable(var2.getExecptAdresseComptable());
            this.selectedExo.setExecptAdresseContact(var2.getExecptAdresseContact());
            this.selectedExo.setExecptAgrement(var2.getExecptAgrement());
            this.selectedExo.setExecptAnalytique(var2.isExecptAnalytique());
            this.selectedExo.setExecptAnneeActivitePays(var2.getExecptAnneeActivitePays());
            this.selectedExo.setExecptCapProduction(var2.getExecptCapProduction());
            this.selectedExo.setExecptCentreImpot(var2.getExecptCentreImpot());
            this.selectedExo.setExecptCodeActivite(var2.getExecptCodeActivite());
            this.selectedExo.setExecptConvention(var2.getExecptConvention());
            this.selectedExo.setExecptCtrlPriveEtr(var2.isExecptCtrlPriveEtr());
            this.selectedExo.setExecptCtrlPriveLoc(var2.isExecptCtrlPriveLoc());
            this.selectedExo.setExecptCtrlPublique(var2.isExecptCtrlPublique());
            this.selectedExo.setExecptDateAgrement(var2.getExecptDateAgrement());
            this.selectedExo.setExecptDateCreationEntreprise(var2.getExecptDateCreationEntreprise());
            this.selectedExo.setExecptDureeAgrement(var2.getExecptDureeAgrement());
            this.selectedExo.setExecptEFAAP(var2.isExecptEFAAP());
            this.selectedExo.setExecptEFANA(var2.isExecptEFANA());
            this.selectedExo.setExecptEFANAP(var2.isExecptEFANAP());
            this.selectedExo.setExecptEFASR(var2.isExecptEFASR());
            this.selectedExo.setExecptEFCAR(var2.isExecptEFCAR());
            this.selectedExo.setExecptEFCR(var2.isExecptEFCR());
            this.selectedExo.setExecptInscription(var2.getExecptInscription());
            this.selectedExo.setExecptLibActivite(var2.getExecptLibActivite());
            this.selectedExo.setExecptNbEtablissementHors(var2.getExecptNbEtablissementHors());
            this.selectedExo.setExecptNbEtablissementPays(var2.getExecptNbEtablissementPays());
            this.selectedExo.setExecptNomCabinet(var2.getExecptNomCabinet());
            this.selectedExo.setExecptNomCommissaire(var2.getExecptNomCommissaire());
            this.selectedExo.setExecptNomComptable(var2.getExecptNomComptable());
            this.selectedExo.setExecptNomContact(var2.getExecptNomContact());
            this.selectedExo.setExecptNomSignataire(var2.getExecptNomSignataire());
            this.selectedExo.setExecptQuaContact(var2.getExecptQuaContact());
            this.selectedExo.setExecptQuaSignataire(var2.getExecptQuaSignataire());
            this.selectedExo.setExecptRegime(var2.getExecptRegime());
            this.selectedExo.setExecptSalarieComptable(var2.isExecptSalarieComptable());
            this.selectedExo.setExecptTelephoneCabinet(var2.getExecptTelephoneCabinet());
            this.selectedExo.setExecptTelephoneCommissaire(var2.getExecptTelephoneCommissaire());
            this.selectedExo.setExecptTelephoneComptable(var2.getExecptTelephoneComptable());
            this.selectedExo.setExecptTelephoneContact(var2.getExecptTelephoneContact());
            this.selectedExo.setExecptTypeEntreprise(var2.getExecptTypeEntreprise());
            this.selectedExo.setExecptVilleCabinet(var2.getExecptVilleCabinet());
            this.selectedExo.setExecptVilleCommissaire(var2.getExecptVilleCommissaire());
            this.selectedExo.setExecptVilleComptable(var2.getExecptVilleComptable());
            this.selectedExo.setExecptVilleContact(var2.getExecptVilleContact());
         }
      }

   }

   public void recupereActivitesAnterieur(Session var1) throws HibernateException, NamingException {
      if (this.cptTabNom != null) {
         this.lesactivites = new ArrayList();
         new ExercicesComptable();
         long var3 = this.selectedExo.getExecpt_id() - 1L;
         ExercicesComptable var2 = this.exercicesComptableDao.recupererLExoPrecis(var3, var1);
         if (var2 != null) {
            new ArrayList();
            List var5 = this.complementInformationsDao.chargerMesComplements(0, var2.getExecpt_id(), var1);
            if (var5.size() != 0) {
               for(int var6 = 0; var6 < var5.size(); ++var6) {
                  new ComplementInformations();
                  ComplementInformations var7 = (ComplementInformations)var5.get(var6);
                  this.complementActivites = new ComplementInformations();
                  this.complementActivites.setExercicesComptable(this.selectedExo);
                  this.complementActivites.setCplmenAdresse(var7.getCplmenAdresse());
                  this.complementActivites.setCplmenCode(var7.getCplmenCode());
                  this.complementActivites.setCplmenDesignation(var7.getCplmenDesignation());
                  this.complementActivites.setCplmenFiscal(var7.getCplmenFiscal());
                  this.complementActivites.setCplmenLibelle(var7.getCplmenLibelle());
                  this.complementActivites.setCplmenNation(var7.getCplmenNation());
                  this.complementActivites.setCplmenNom(var7.getCplmenNom());
                  this.complementActivites.setCplmenPourcentage(var7.getCplmenPourcentage());
                  this.complementActivites.setCplmenPrenom(var7.getCplmenPrenom());
                  this.complementActivites.setCplmenQualite(var7.getCplmenQualite());
                  this.complementActivites.setCplmenTotal(var7.getCplmenTotal());
                  this.complementActivites.setCplmenType(var7.getCplmenType());
                  this.complementActivites = this.complementInformationsDao.inser(this.complementActivites, var1);
                  this.lesactivites.add(this.complementActivites);
               }
            }
         }

         this.datamodelactivites.setWrappedData(this.lesactivites);
         this.ajoutActivite();
      }

   }

   public void recupereDAMCAFAnterieur(Session var1) throws HibernateException, NamingException {
      if (this.cptTabNom != null) {
         this.lesdirigeants = new ArrayList();
         this.lesactionnaires = new ArrayList();
         this.lesmca = new ArrayList();
         this.lesfiliales = new ArrayList();
         new ExercicesComptable();
         long var3 = this.selectedExo.getExecpt_id() - 1L;
         ExercicesComptable var2 = this.exercicesComptableDao.recupererLExoPrecis(var3, var1);
         if (var2 != null) {
            new ArrayList();
            List var5 = this.complementInformationsDao.chargerMesComplements(1, var2.getExecpt_id(), var1);
            if (var5.size() != 0) {
               for(int var6 = 0; var6 < var5.size(); ++var6) {
                  new ComplementInformations();
                  ComplementInformations var7 = (ComplementInformations)var5.get(var6);
                  this.complementDirigeants = new ComplementInformations();
                  this.complementDirigeants.setExercicesComptable(this.selectedExo);
                  this.complementDirigeants.setCplmenAdresse(var7.getCplmenAdresse());
                  this.complementDirigeants.setCplmenCode(var7.getCplmenCode());
                  this.complementDirigeants.setCplmenDesignation(var7.getCplmenDesignation());
                  this.complementDirigeants.setCplmenFiscal(var7.getCplmenFiscal());
                  this.complementDirigeants.setCplmenLibelle(var7.getCplmenLibelle());
                  this.complementDirigeants.setCplmenNation(var7.getCplmenNation());
                  this.complementDirigeants.setCplmenNom(var7.getCplmenNom());
                  this.complementDirigeants.setCplmenPourcentage(var7.getCplmenPourcentage());
                  this.complementDirigeants.setCplmenPrenom(var7.getCplmenPrenom());
                  this.complementDirigeants.setCplmenQualite(var7.getCplmenQualite());
                  this.complementDirigeants.setCplmenTotal(var7.getCplmenTotal());
                  this.complementDirigeants.setCplmenType(var7.getCplmenType());
                  this.complementDirigeants = this.complementInformationsDao.inser(this.complementDirigeants, var1);
                  this.lesdirigeants.add(this.complementDirigeants);
               }

               this.ajoutDirigeant();
            }

            new ArrayList();
            List var11 = this.complementInformationsDao.chargerMesComplements(2, var2.getExecpt_id(), var1);
            if (var11.size() != 0) {
               for(int var12 = 0; var12 < var11.size(); ++var12) {
                  new ComplementInformations();
                  ComplementInformations var8 = (ComplementInformations)var11.get(var12);
                  this.complementActionnaires = new ComplementInformations();
                  this.complementActionnaires.setExercicesComptable(this.selectedExo);
                  this.complementActionnaires.setCplmenAdresse(var8.getCplmenAdresse());
                  this.complementActionnaires.setCplmenCode(var8.getCplmenCode());
                  this.complementActionnaires.setCplmenDesignation(var8.getCplmenDesignation());
                  this.complementActionnaires.setCplmenFiscal(var8.getCplmenFiscal());
                  this.complementActionnaires.setCplmenLibelle(var8.getCplmenLibelle());
                  this.complementActionnaires.setCplmenNation(var8.getCplmenNation());
                  this.complementActionnaires.setCplmenNom(var8.getCplmenNom());
                  this.complementActionnaires.setCplmenPourcentage(var8.getCplmenPourcentage());
                  this.complementActionnaires.setCplmenPrenom(var8.getCplmenPrenom());
                  this.complementActionnaires.setCplmenQualite(var8.getCplmenQualite());
                  this.complementActionnaires.setCplmenTotal(var8.getCplmenTotal());
                  this.complementActionnaires.setCplmenType(var8.getCplmenType());
                  this.complementActionnaires = this.complementInformationsDao.inser(this.complementActionnaires, var1);
                  this.lesactionnaires.add(this.complementActionnaires);
               }

               this.ajoutActionnaire();
            }

            new ArrayList();
            List var13 = this.complementInformationsDao.chargerMesComplements(3, var2.getExecpt_id(), var1);
            if (var13.size() != 0) {
               for(int var14 = 0; var14 < var13.size(); ++var14) {
                  new ComplementInformations();
                  ComplementInformations var9 = (ComplementInformations)var13.get(var14);
                  this.complementMca = new ComplementInformations();
                  this.complementMca.setExercicesComptable(this.selectedExo);
                  this.complementMca.setCplmenAdresse(var9.getCplmenAdresse());
                  this.complementMca.setCplmenCode(var9.getCplmenCode());
                  this.complementMca.setCplmenDesignation(var9.getCplmenDesignation());
                  this.complementMca.setCplmenFiscal(var9.getCplmenFiscal());
                  this.complementMca.setCplmenLibelle(var9.getCplmenLibelle());
                  this.complementMca.setCplmenNation(var9.getCplmenNation());
                  this.complementMca.setCplmenNom(var9.getCplmenNom());
                  this.complementMca.setCplmenPourcentage(var9.getCplmenPourcentage());
                  this.complementMca.setCplmenPrenom(var9.getCplmenPrenom());
                  this.complementMca.setCplmenQualite(var9.getCplmenQualite());
                  this.complementMca.setCplmenTotal(var9.getCplmenTotal());
                  this.complementMca.setCplmenType(var9.getCplmenType());
                  this.complementMca = this.complementInformationsDao.inser(this.complementMca, var1);
                  this.lesmca.add(this.complementMca);
               }

               this.ajoutMca();
            }

            new ArrayList();
            List var15 = this.complementInformationsDao.chargerMesComplements(4, var2.getExecpt_id(), var1);
            if (var15.size() != 0) {
               for(int var16 = 0; var16 < var15.size(); ++var16) {
                  new ComplementInformations();
                  ComplementInformations var10 = (ComplementInformations)var15.get(var16);
                  this.complementFiliales = new ComplementInformations();
                  this.complementFiliales.setExercicesComptable(this.selectedExo);
                  this.complementFiliales.setCplmenAdresse(var10.getCplmenAdresse());
                  this.complementFiliales.setCplmenCode(var10.getCplmenCode());
                  this.complementFiliales.setCplmenDesignation(var10.getCplmenDesignation());
                  this.complementFiliales.setCplmenFiscal(var10.getCplmenFiscal());
                  this.complementFiliales.setCplmenLibelle(var10.getCplmenLibelle());
                  this.complementFiliales.setCplmenNation(var10.getCplmenNation());
                  this.complementFiliales.setCplmenNom(var10.getCplmenNom());
                  this.complementFiliales.setCplmenPourcentage(var10.getCplmenPourcentage());
                  this.complementFiliales.setCplmenPrenom(var10.getCplmenPrenom());
                  this.complementFiliales.setCplmenQualite(var10.getCplmenQualite());
                  this.complementFiliales.setCplmenTotal(var10.getCplmenTotal());
                  this.complementFiliales.setCplmenType(var10.getCplmenType());
                  this.complementFiliales = this.complementInformationsDao.inser(this.complementFiliales, var1);
                  this.lesfiliales.add(this.complementFiliales);
               }

               this.ajoutFiliale();
            }
         }

         this.datamodeldirigeants.setWrappedData(this.lesdirigeants);
         this.datamodelactionnaires.setWrappedData(this.lesactionnaires);
         this.datamodelmca.setWrappedData(this.lesmca);
         this.datamodelfiliales.setWrappedData(this.lesfiliales);
      }

   }

   public List convertirTableau(Session var1) throws HibernateException, NamingException {
      ArrayList var2 = new ArrayList();
      if (this.cptTabNom != null) {
         new ArrayList();
         List var3 = this.cptTabElementDao.chargerMesTabElement(this.cptTabNom.getTablis_id(), var1);
         if (var3.size() != 0) {
            new CptTabElement();

            for(int var5 = 0; var5 < var3.size(); ++var5) {
               CptTabElement var4 = (CptTabElement)var3.get(var5);
               TabResultats var6 = new TabResultats();
               var6.setTabresCode(this.cptTabNom.getTablisCode());
               var6.setTabresNomFr(this.cptTabNom.getTablisLibFR());
               var6.setTabresNomUk(this.cptTabNom.getTablisLibUK());
               var6.setTabresNomSp(this.cptTabNom.getTablisLibSP());
               var6.setTabresReference(var4.getTabeleReference());
               var6.setTabresLibFr(var4.getTabeleLibFR());
               var6.setTabresLibUk(var4.getTabeleLibUK());
               var6.setTabresLibSp(var4.getTabeleLibSP());
               var6.setTabresType(var4.getTabeleType());
               var6.setTabresPrint(var4.getTabelePrint());
               var6.setTabresNum(var5);
               var6.setTabresMode(var4.getTabeleMode());
               var6.setTabresIdElement(var4.getTabele_id());
               var6.setTabresFormatCol01(var4.getTabeleFormatCel01());
               var6.setTabresFormatCol02(var4.getTabeleFormatCel02());
               var6.setTabresFormatCol03(var4.getTabeleFormatCel03());
               var6.setTabresFormatCol04(var4.getTabeleFormatCel04());
               var6.setTabresFormatCol05(var4.getTabeleFormatCel05());
               var6.setTabresFormatCol06(var4.getTabeleFormatCel06());
               var6.setTabresFormatCol07(var4.getTabeleFormatCel07());
               var6.setTabresFormatCol08(var4.getTabeleFormatCel08());
               var6.setTabresFormatCol09(var4.getTabeleFormatCel09());
               var6.setTabresFormatCol10(var4.getTabeleFormatCel10());
               var6.setTabresFormatCol11(var4.getTabeleFormatCel11());
               var6.setTabresFormatCol12(var4.getTabeleFormatCel12());
               var6.setTabresFormatCol13(var4.getTabeleFormatCel13());
               var6.setTabresFormatCol14(var4.getTabeleFormatCel14());
               var6.setTabresFormatCol15(var4.getTabeleFormatCel15());
               var6.setTabresFormatCol16(var4.getTabeleFormatCel16());
               var6.setTabresFormatCol17(var4.getTabeleFormatCel17());
               var6.setTabresFormatCol18(var4.getTabeleFormatCel18());
               var6.setTabresFormatCol19(var4.getTabeleFormatCel19());
               var6.setTabresFormatCol20(var4.getTabeleFormatCel20());
               if (this.listMemoResultat.size() != 0 && var4.getTabeleReference() != null && !var4.getTabeleReference().isEmpty()) {
                  for(int var7 = 0; var7 < this.listMemoResultat.size(); ++var7) {
                     if (((TabResultats)this.listMemoResultat.get(var7)).getTabresReference() != null && !((TabResultats)this.listMemoResultat.get(var7)).getTabresReference().isEmpty() && ((TabResultats)this.listMemoResultat.get(var7)).getTabresReference().equals(var4.getTabeleReference())) {
                        var6.setTabresMod01(((TabResultats)this.listMemoResultat.get(var7)).isTabresMod01());
                        if (((TabResultats)this.listMemoResultat.get(var7)).isTabresMod01()) {
                           var6.setTabresCol01(((TabResultats)this.listMemoResultat.get(var7)).getTabresCol01());
                        }

                        var6.setTabresMod02(((TabResultats)this.listMemoResultat.get(var7)).isTabresMod02());
                        if (((TabResultats)this.listMemoResultat.get(var7)).isTabresMod02()) {
                           var6.setTabresCol02(((TabResultats)this.listMemoResultat.get(var7)).getTabresCol02());
                        }

                        var6.setTabresMod03(((TabResultats)this.listMemoResultat.get(var7)).isTabresMod03());
                        if (((TabResultats)this.listMemoResultat.get(var7)).isTabresMod03()) {
                           var6.setTabresCol03(((TabResultats)this.listMemoResultat.get(var7)).getTabresCol03());
                        }

                        var6.setTabresMod04(((TabResultats)this.listMemoResultat.get(var7)).isTabresMod04());
                        if (((TabResultats)this.listMemoResultat.get(var7)).isTabresMod04()) {
                           var6.setTabresCol04(((TabResultats)this.listMemoResultat.get(var7)).getTabresCol04());
                        }

                        var6.setTabresMod05(((TabResultats)this.listMemoResultat.get(var7)).isTabresMod05());
                        if (((TabResultats)this.listMemoResultat.get(var7)).isTabresMod05()) {
                           var6.setTabresCol05(((TabResultats)this.listMemoResultat.get(var7)).getTabresCol05());
                        }

                        var6.setTabresMod06(((TabResultats)this.listMemoResultat.get(var7)).isTabresMod06());
                        if (((TabResultats)this.listMemoResultat.get(var7)).isTabresMod06()) {
                           var6.setTabresCol06(((TabResultats)this.listMemoResultat.get(var7)).getTabresCol06());
                        }

                        var6.setTabresMod07(((TabResultats)this.listMemoResultat.get(var7)).isTabresMod07());
                        if (((TabResultats)this.listMemoResultat.get(var7)).isTabresMod07()) {
                           var6.setTabresCol07(((TabResultats)this.listMemoResultat.get(var7)).getTabresCol07());
                        }

                        var6.setTabresMod08(((TabResultats)this.listMemoResultat.get(var7)).isTabresMod08());
                        if (((TabResultats)this.listMemoResultat.get(var7)).isTabresMod08()) {
                           var6.setTabresCol08(((TabResultats)this.listMemoResultat.get(var7)).getTabresCol08());
                        }

                        var6.setTabresMod09(((TabResultats)this.listMemoResultat.get(var7)).isTabresMod09());
                        if (((TabResultats)this.listMemoResultat.get(var7)).isTabresMod09()) {
                           var6.setTabresCol09(((TabResultats)this.listMemoResultat.get(var7)).getTabresCol09());
                        }

                        var6.setTabresMod10(((TabResultats)this.listMemoResultat.get(var7)).isTabresMod10());
                        if (((TabResultats)this.listMemoResultat.get(var7)).isTabresMod10()) {
                           var6.setTabresCol10(((TabResultats)this.listMemoResultat.get(var7)).getTabresCol10());
                        }

                        var6.setTabresMod11(((TabResultats)this.listMemoResultat.get(var7)).isTabresMod11());
                        if (((TabResultats)this.listMemoResultat.get(var7)).isTabresMod11()) {
                           var6.setTabresCol11(((TabResultats)this.listMemoResultat.get(var7)).getTabresCol11());
                        }

                        var6.setTabresMod12(((TabResultats)this.listMemoResultat.get(var7)).isTabresMod12());
                        if (((TabResultats)this.listMemoResultat.get(var7)).isTabresMod12()) {
                           var6.setTabresCol12(((TabResultats)this.listMemoResultat.get(var7)).getTabresCol12());
                        }

                        var6.setTabresMod13(((TabResultats)this.listMemoResultat.get(var7)).isTabresMod13());
                        if (((TabResultats)this.listMemoResultat.get(var7)).isTabresMod13()) {
                           var6.setTabresCol13(((TabResultats)this.listMemoResultat.get(var7)).getTabresCol13());
                        }

                        var6.setTabresMod14(((TabResultats)this.listMemoResultat.get(var7)).isTabresMod14());
                        if (((TabResultats)this.listMemoResultat.get(var7)).isTabresMod14()) {
                           var6.setTabresCol14(((TabResultats)this.listMemoResultat.get(var7)).getTabresCol14());
                        }

                        var6.setTabresMod15(((TabResultats)this.listMemoResultat.get(var7)).isTabresMod15());
                        if (((TabResultats)this.listMemoResultat.get(var7)).isTabresMod15()) {
                           var6.setTabresCol15(((TabResultats)this.listMemoResultat.get(var7)).getTabresCol15());
                        }

                        var6.setTabresMod16(((TabResultats)this.listMemoResultat.get(var7)).isTabresMod16());
                        if (((TabResultats)this.listMemoResultat.get(var7)).isTabresMod16()) {
                           var6.setTabresCol16(((TabResultats)this.listMemoResultat.get(var7)).getTabresCol16());
                        }

                        var6.setTabresMod17(((TabResultats)this.listMemoResultat.get(var7)).isTabresMod17());
                        if (((TabResultats)this.listMemoResultat.get(var7)).isTabresMod17()) {
                           var6.setTabresCol17(((TabResultats)this.listMemoResultat.get(var7)).getTabresCol17());
                        }

                        var6.setTabresMod18(((TabResultats)this.listMemoResultat.get(var7)).isTabresMod18());
                        if (((TabResultats)this.listMemoResultat.get(var7)).isTabresMod18()) {
                           var6.setTabresCol18(((TabResultats)this.listMemoResultat.get(var7)).getTabresCol18());
                        }

                        var6.setTabresMod19(((TabResultats)this.listMemoResultat.get(var7)).isTabresMod19());
                        if (((TabResultats)this.listMemoResultat.get(var7)).isTabresMod19()) {
                           var6.setTabresCol19(((TabResultats)this.listMemoResultat.get(var7)).getTabresCol19());
                        }

                        var6.setTabresMod20(((TabResultats)this.listMemoResultat.get(var7)).isTabresMod20());
                        if (((TabResultats)this.listMemoResultat.get(var7)).isTabresMod20()) {
                           var6.setTabresCol20(((TabResultats)this.listMemoResultat.get(var7)).getTabresCol20());
                        }
                        break;
                     }
                  }
               }

               new ArrayList();
               List var9 = this.cptTabFormuleDao.chargerMesTabFormule(var4.getTabele_id(), var1);
               if (var9.size() != 0) {
                  for(int var8 = 0; var8 < var9.size(); ++var8) {
                     if (((CptTabFormule)var9.get(var8)).getTabforCol() == 1) {
                        var6.setTabresTypeCol01(((CptTabFormule)var9.get(var8)).getTabforSolde());
                     }

                     if (((CptTabFormule)var9.get(var8)).getTabforCol() == 2) {
                        var6.setTabresTypeCol02(((CptTabFormule)var9.get(var8)).getTabforSolde());
                     }

                     if (((CptTabFormule)var9.get(var8)).getTabforCol() == 3) {
                        var6.setTabresTypeCol03(((CptTabFormule)var9.get(var8)).getTabforSolde());
                     }

                     if (((CptTabFormule)var9.get(var8)).getTabforCol() == 4) {
                        var6.setTabresTypeCol04(((CptTabFormule)var9.get(var8)).getTabforSolde());
                     }

                     if (((CptTabFormule)var9.get(var8)).getTabforCol() == 5) {
                        var6.setTabresTypeCol05(((CptTabFormule)var9.get(var8)).getTabforSolde());
                     }

                     if (((CptTabFormule)var9.get(var8)).getTabforCol() == 6) {
                        var6.setTabresTypeCol06(((CptTabFormule)var9.get(var8)).getTabforSolde());
                     }

                     if (((CptTabFormule)var9.get(var8)).getTabforCol() == 7) {
                        var6.setTabresTypeCol07(((CptTabFormule)var9.get(var8)).getTabforSolde());
                     }

                     if (((CptTabFormule)var9.get(var8)).getTabforCol() == 8) {
                        var6.setTabresTypeCol08(((CptTabFormule)var9.get(var8)).getTabforSolde());
                     }

                     if (((CptTabFormule)var9.get(var8)).getTabforCol() == 9) {
                        var6.setTabresTypeCol09(((CptTabFormule)var9.get(var8)).getTabforSolde());
                     }

                     if (((CptTabFormule)var9.get(var8)).getTabforCol() == 10) {
                        var6.setTabresTypeCol10(((CptTabFormule)var9.get(var8)).getTabforSolde());
                     }

                     if (((CptTabFormule)var9.get(var8)).getTabforCol() == 11) {
                        var6.setTabresTypeCol11(((CptTabFormule)var9.get(var8)).getTabforSolde());
                     }

                     if (((CptTabFormule)var9.get(var8)).getTabforCol() == 12) {
                        var6.setTabresTypeCol12(((CptTabFormule)var9.get(var8)).getTabforSolde());
                     }

                     if (((CptTabFormule)var9.get(var8)).getTabforCol() == 13) {
                        var6.setTabresTypeCol13(((CptTabFormule)var9.get(var8)).getTabforSolde());
                     }

                     if (((CptTabFormule)var9.get(var8)).getTabforCol() == 14) {
                        var6.setTabresTypeCol14(((CptTabFormule)var9.get(var8)).getTabforSolde());
                     }

                     if (((CptTabFormule)var9.get(var8)).getTabforCol() == 15) {
                        var6.setTabresTypeCol15(((CptTabFormule)var9.get(var8)).getTabforSolde());
                     }

                     if (((CptTabFormule)var9.get(var8)).getTabforCol() == 16) {
                        var6.setTabresTypeCol16(((CptTabFormule)var9.get(var8)).getTabforSolde());
                     }

                     if (((CptTabFormule)var9.get(var8)).getTabforCol() == 17) {
                        var6.setTabresTypeCol17(((CptTabFormule)var9.get(var8)).getTabforSolde());
                     }

                     if (((CptTabFormule)var9.get(var8)).getTabforCol() == 18) {
                        var6.setTabresTypeCol18(((CptTabFormule)var9.get(var8)).getTabforSolde());
                     }

                     if (((CptTabFormule)var9.get(var8)).getTabforCol() == 19) {
                        var6.setTabresTypeCol19(((CptTabFormule)var9.get(var8)).getTabforSolde());
                     }

                     if (((CptTabFormule)var9.get(var8)).getTabforCol() == 20) {
                        var6.setTabresTypeCol20(((CptTabFormule)var9.get(var8)).getTabforSolde());
                     }
                  }
               }

               var2.add(var6);
            }
         }
      }

      return var2;
   }

   public void majExercice() throws HibernateException, NamingException {
      this.calculeLibelleActivite();
      this.selectedExo = this.exercicesComptableDao.modifierExercicesCompta(this.selectedExo);
      this.chargerMesTabNom(this.type, (Session)null);
   }

   public void majExercice(Session var1) throws HibernateException, NamingException {
      this.calculeLibelleActivite();
      this.selectedExo = this.exercicesComptableDao.modifierExercicesCompta(this.selectedExo, var1);
      this.chargerMesTabNom(this.type, var1);
   }

   public void calculeLibelleActivite() {
      if (this.mesCodesEmploisItems.size() != 0) {
         this.selectedExo.setExecptLibActivite("");
         if (this.selectedExo.getExecptCodeActivite() != null && !this.selectedExo.getExecptCodeActivite().isEmpty()) {
            for(int var1 = 0; var1 < this.mesCodesEmploisItems.size(); ++var1) {
               if (((SelectItem)this.mesCodesEmploisItems.get(var1)).getValue().toString().equals(this.selectedExo.getExecptCodeActivite())) {
                  String[] var2 = ((SelectItem)this.mesCodesEmploisItems.get(var1)).getLabel().toString().split(":");
                  this.selectedExo.setExecptLibActivite(var2[1]);
                  break;
               }
            }
         }
      }

   }

   public void recupereActivites(Session var1) throws HibernateException, NamingException {
      this.lesactivites = new ArrayList();
      this.datamodelactivites = new ListDataModel();
      this.lesactivites = this.complementInformationsDao.chargerMesComplements(0, this.selectedExo.getExecpt_id(), var1);
      this.datamodelactivites.setWrappedData(this.lesactivites);
      this.complementActivites = new ComplementInformations();
   }

   public void recupereDAMCAF(Session var1) throws HibernateException, NamingException {
      this.lesdirigeants = new ArrayList();
      this.datamodeldirigeants = new ListDataModel();
      this.lesdirigeants = this.complementInformationsDao.chargerMesComplements(1, this.selectedExo.getExecpt_id(), var1);
      this.datamodeldirigeants.setWrappedData(this.lesdirigeants);
      this.complementDirigeants = new ComplementInformations();
      this.lesactionnaires = new ArrayList();
      this.datamodelactionnaires = new ListDataModel();
      this.lesactionnaires = this.complementInformationsDao.chargerMesComplements(2, this.selectedExo.getExecpt_id(), var1);
      this.datamodelactionnaires.setWrappedData(this.lesactionnaires);
      this.complementActionnaires = new ComplementInformations();
      this.lesmca = new ArrayList();
      this.datamodelmca = new ListDataModel();
      this.lesmca = this.complementInformationsDao.chargerMesComplements(3, this.selectedExo.getExecpt_id(), var1);
      this.datamodelmca.setWrappedData(this.lesmca);
      this.complementMca = new ComplementInformations();
      this.lesfiliales = new ArrayList();
      this.datamodelfiliales = new ListDataModel();
      this.lesfiliales = this.complementInformationsDao.chargerMesComplements(4, this.selectedExo.getExecpt_id(), var1);
      this.datamodelfiliales.setWrappedData(this.lesfiliales);
      this.complementFiliales = new ComplementInformations();
   }

   public void affichageColonne() {
      this.var_aff_col01 = false;
      this.var_largeur_col1 = 0;
      this.var_aff_col02 = false;
      this.var_largeur_col2 = 0;
      this.var_aff_col03 = false;
      this.var_largeur_col3 = 0;
      this.var_aff_col04 = false;
      this.var_largeur_col4 = 0;
      this.var_aff_col05 = false;
      this.var_largeur_col5 = 0;
      this.var_aff_col06 = false;
      this.var_largeur_col6 = 0;
      this.var_aff_col07 = false;
      this.var_largeur_col7 = 0;
      this.var_aff_col08 = false;
      this.var_largeur_col8 = 0;
      this.var_aff_col09 = false;
      this.var_largeur_col9 = 0;
      this.var_aff_col10 = false;
      this.var_largeur_col10 = 0;
      this.var_aff_col11 = false;
      this.var_largeur_col11 = 0;
      this.var_aff_col12 = false;
      this.var_largeur_col12 = 0;
      this.var_aff_col13 = false;
      this.var_largeur_col13 = 0;
      this.var_aff_col14 = false;
      this.var_largeur_col14 = 0;
      this.var_aff_col15 = false;
      this.var_largeur_col15 = 0;
      this.var_aff_col16 = false;
      this.var_largeur_col16 = 0;
      this.var_aff_col17 = false;
      this.var_largeur_col17 = 0;
      this.var_aff_col18 = false;
      this.var_largeur_col18 = 0;
      this.var_aff_col19 = false;
      this.var_largeur_col19 = 0;
      this.var_aff_col20 = false;
      this.var_largeur_col20 = 0;
      short var1 = 150;
      short var2 = 300;
      short var3 = 500;
      int var4 = this.cptTabNom.getTablisNbCol();
      if (1 <= var4) {
         this.var_aff_col01 = true;
         if (this.cptTabNom.getTablisTypeCol01() == 7) {
            this.var_largeur_col1 = var2;
         } else if (this.cptTabNom.getTablisTypeCol01() == 8) {
            this.var_largeur_col1 = var3;
         } else {
            this.var_largeur_col1 = var1;
         }
      }

      if (2 <= var4) {
         this.var_aff_col02 = true;
         if (this.cptTabNom.getTablisTypeCol02() == 7) {
            this.var_largeur_col2 = var2;
         } else if (this.cptTabNom.getTablisTypeCol02() == 8) {
            this.var_largeur_col2 = var3;
         } else {
            this.var_largeur_col2 = var1;
         }
      }

      if (3 <= var4) {
         this.var_aff_col03 = true;
         if (this.cptTabNom.getTablisTypeCol03() == 7) {
            this.var_largeur_col3 = var2;
         } else if (this.cptTabNom.getTablisTypeCol03() == 8) {
            this.var_largeur_col3 = var3;
         } else {
            this.var_largeur_col3 = var1;
         }
      }

      if (4 <= var4) {
         this.var_aff_col04 = true;
         if (this.cptTabNom.getTablisTypeCol04() == 7) {
            this.var_largeur_col4 = var2;
         } else if (this.cptTabNom.getTablisTypeCol04() == 8) {
            this.var_largeur_col4 = var3;
         } else {
            this.var_largeur_col4 = var1;
         }
      }

      if (5 <= var4) {
         this.var_aff_col05 = true;
         if (this.cptTabNom.getTablisTypeCol05() == 7) {
            this.var_largeur_col5 = var2;
         } else if (this.cptTabNom.getTablisTypeCol05() == 8) {
            this.var_largeur_col5 = var3;
         } else {
            this.var_largeur_col5 = var1;
         }
      }

      if (6 <= var4) {
         this.var_aff_col06 = true;
         if (this.cptTabNom.getTablisTypeCol06() == 7) {
            this.var_largeur_col6 = var2;
         } else if (this.cptTabNom.getTablisTypeCol06() == 8) {
            this.var_largeur_col6 = var3;
         } else {
            this.var_largeur_col6 = var1;
         }
      }

      if (7 <= var4) {
         this.var_aff_col07 = true;
         if (this.cptTabNom.getTablisTypeCol07() == 7) {
            this.var_largeur_col7 = var2;
         } else if (this.cptTabNom.getTablisTypeCol07() == 8) {
            this.var_largeur_col7 = var3;
         } else {
            this.var_largeur_col7 = var1;
         }
      }

      if (8 <= var4) {
         this.var_aff_col08 = true;
         if (this.cptTabNom.getTablisTypeCol08() == 7) {
            this.var_largeur_col8 = var2;
         } else if (this.cptTabNom.getTablisTypeCol08() == 8) {
            this.var_largeur_col8 = var3;
         } else {
            this.var_largeur_col8 = var1;
         }
      }

      if (9 <= var4) {
         this.var_aff_col09 = true;
         if (this.cptTabNom.getTablisTypeCol09() == 7) {
            this.var_largeur_col9 = var2;
         } else if (this.cptTabNom.getTablisTypeCol09() == 8) {
            this.var_largeur_col9 = var3;
         } else {
            this.var_largeur_col9 = var1;
         }
      }

      if (10 <= var4) {
         this.var_aff_col10 = true;
         if (this.cptTabNom.getTablisTypeCol10() == 7) {
            this.var_largeur_col10 = var2;
         } else if (this.cptTabNom.getTablisTypeCol10() == 8) {
            this.var_largeur_col10 = var3;
         } else {
            this.var_largeur_col10 = var1;
         }
      }

      if (11 <= var4) {
         this.var_aff_col11 = true;
         if (this.cptTabNom.getTablisTypeCol11() == 7) {
            this.var_largeur_col11 = var2;
         } else if (this.cptTabNom.getTablisTypeCol11() == 8) {
            this.var_largeur_col11 = var3;
         } else {
            this.var_largeur_col11 = var1;
         }
      }

      if (12 <= var4) {
         this.var_aff_col12 = true;
         if (this.cptTabNom.getTablisTypeCol12() == 7) {
            this.var_largeur_col12 = var2;
         } else if (this.cptTabNom.getTablisTypeCol12() == 8) {
            this.var_largeur_col12 = var3;
         } else {
            this.var_largeur_col12 = var1;
         }
      }

      if (13 <= var4) {
         this.var_aff_col13 = true;
         if (this.cptTabNom.getTablisTypeCol13() == 7) {
            this.var_largeur_col13 = var2;
         } else if (this.cptTabNom.getTablisTypeCol13() == 8) {
            this.var_largeur_col13 = var3;
         } else {
            this.var_largeur_col13 = var1;
         }
      }

      if (14 <= var4) {
         this.var_aff_col14 = true;
         if (this.cptTabNom.getTablisTypeCol14() == 7) {
            this.var_largeur_col14 = var2;
         } else if (this.cptTabNom.getTablisTypeCol14() == 8) {
            this.var_largeur_col14 = var3;
         } else {
            this.var_largeur_col14 = var1;
         }
      }

      if (15 <= var4) {
         this.var_aff_col15 = true;
         if (this.cptTabNom.getTablisTypeCol15() == 7) {
            this.var_largeur_col15 = var2;
         } else if (this.cptTabNom.getTablisTypeCol15() == 8) {
            this.var_largeur_col15 = var3;
         } else {
            this.var_largeur_col15 = var1;
         }
      }

      if (16 <= var4) {
         this.var_aff_col16 = true;
         if (this.cptTabNom.getTablisTypeCol16() == 7) {
            this.var_largeur_col16 = var2;
         } else if (this.cptTabNom.getTablisTypeCol16() == 8) {
            this.var_largeur_col16 = var3;
         } else {
            this.var_largeur_col16 = var1;
         }
      }

      if (17 <= var4) {
         this.var_aff_col17 = true;
         if (this.cptTabNom.getTablisTypeCol17() == 7) {
            this.var_largeur_col17 = var2;
         } else if (this.cptTabNom.getTablisTypeCol17() == 8) {
            this.var_largeur_col17 = var3;
         } else {
            this.var_largeur_col17 = var1;
         }
      }

      if (18 <= var4) {
         this.var_aff_col18 = true;
         if (this.cptTabNom.getTablisTypeCol18() == 7) {
            this.var_largeur_col18 = var2;
         } else if (this.cptTabNom.getTablisTypeCol18() == 8) {
            this.var_largeur_col18 = var3;
         } else {
            this.var_largeur_col18 = var1;
         }
      }

      if (19 <= var4) {
         this.var_aff_col19 = true;
         if (this.cptTabNom.getTablisTypeCol19() == 7) {
            this.var_largeur_col19 = var2;
         } else if (this.cptTabNom.getTablisTypeCol19() == 8) {
            this.var_largeur_col19 = var3;
         } else {
            this.var_largeur_col19 = var1;
         }
      }

      if (20 <= var4) {
         this.var_aff_col20 = true;
         if (this.cptTabNom.getTablisTypeCol20() == 7) {
            this.var_largeur_col20 = var2;
         } else if (this.cptTabNom.getTablisTypeCol20() == 8) {
            this.var_largeur_col20 = var3;
         } else {
            this.var_largeur_col20 = var1;
         }
      }

   }

   public void majFormules() throws HibernateException, NamingException {
      if (this.nature == 0 && this.selecFiscalite != null && !this.selecFiscalite.isEmpty()) {
         FormEtatFinancierConfigClient var1 = new FormEtatFinancierConfigClient();
         var1.setutilInitHibernate(this.utilInitHibernate);
         var1.setBaseLog(this.baseLog);
         var1.setStructureLog(this.structureLog);
         var1.setUsersLog(this.usersLog);
         var1.InstancesDaoUtilses();
         var1.setNature(0);
         var1.setSelecFiscalite(this.selecFiscalite);
         var1.setTabliszone(this.selecFiscalite);
         var1.genererDefaultEtat();
         this.chargerMesTabNom(this.nature, (Session)null);
      }

   }

   public String filtreNumerique(String var1) {
      String var2 = "";
      String var3 = "";

      for(int var4 = 0; var4 < var1.length(); ++var4) {
         var3 = (String)var1.subSequence(var4, var4 + 1);
         if ("1234567890".contains(var3)) {
            var2 = var2 + var3.toUpperCase();
         }
      }

      return var2;
   }

   public void calculTableaux() throws HibernateException, NamingException, ParseException {
      if (this.cptTabNom != null) {
         this.colonneEnCours = "...Initialisation...";
         if (this.memoDateDebCalcul.getMonth() != this.dateDebCalcul.getMonth() || this.memoDateDebCalcul.getYear() != this.dateDebCalcul.getYear() || this.memoDateFinCalcul.getMonth() != this.dateFinCalcul.getMonth() || this.memoDateFinCalcul.getYear() != this.dateFinCalcul.getYear() || this.var_memoJrxrsv != this.var_jrxrsv || this.var_memoJrxsit != this.var_jrxsit) {
            this.balanceListe.clear();
         }

         this.var_showBarProg = true;
         if (this.dateDebCalcul == null) {
            this.dateDebCalcul = this.selectedExo.getExecptDateDebut();
         }

         if (this.dateFinCalcul == null) {
            this.dateFinCalcul = this.selectedExo.getExecptDateFin();
         }

         this.tabResultats = new TabResultats();
         this.notesExplicativesMemo = this.notesExplicatives;
         this.listMemoResultat.clear();
         TabResultats var3;
         if (this.lesResultats.size() != 0) {
            new TabResultats();

            for(int var2 = 0; var2 < this.lesResultats.size(); ++var2) {
               var3 = new TabResultats();
               TabResultats var1 = (TabResultats)this.lesResultats.get(var2);
               if ((this.notesExplicativesMemo == null || this.notesExplicativesMemo.isEmpty()) && ((TabResultats)this.lesResultats.get(var2)).getTabresNotes() != null && !((TabResultats)this.lesResultats.get(var2)).getTabresNotes().isEmpty()) {
                  this.notesExplicativesMemo = ((TabResultats)this.lesResultats.get(var2)).getTabresNotes();
               }

               var3.setTabresReference(var1.getTabresReference());
               var3.setTabresCol01(var1.getTabresCol01());
               var3.setTabresCol02(var1.getTabresCol02());
               var3.setTabresCol03(var1.getTabresCol03());
               var3.setTabresCol04(var1.getTabresCol04());
               var3.setTabresCol05(var1.getTabresCol05());
               var3.setTabresCol06(var1.getTabresCol06());
               var3.setTabresCol07(var1.getTabresCol07());
               var3.setTabresCol08(var1.getTabresCol08());
               var3.setTabresCol09(var1.getTabresCol09());
               var3.setTabresCol10(var1.getTabresCol10());
               var3.setTabresCol11(var1.getTabresCol11());
               var3.setTabresCol12(var1.getTabresCol12());
               var3.setTabresCol13(var1.getTabresCol13());
               var3.setTabresCol14(var1.getTabresCol14());
               var3.setTabresCol15(var1.getTabresCol15());
               var3.setTabresCol16(var1.getTabresCol16());
               var3.setTabresCol17(var1.getTabresCol17());
               var3.setTabresCol18(var1.getTabresCol18());
               var3.setTabresCol19(var1.getTabresCol19());
               var3.setTabresCol20(var1.getTabresCol20());
               var3.setTabresCon01(var1.getTabresCon01());
               var3.setTabresCon02(var1.getTabresCon02());
               var3.setTabresCon03(var1.getTabresCon03());
               var3.setTabresCon04(var1.getTabresCon04());
               var3.setTabresCon05(var1.getTabresCon05());
               var3.setTabresCon06(var1.getTabresCon06());
               var3.setTabresCon07(var1.getTabresCon07());
               var3.setTabresCon08(var1.getTabresCon08());
               var3.setTabresCon09(var1.getTabresCon09());
               var3.setTabresCon10(var1.getTabresCon10());
               var3.setTabresCon11(var1.getTabresCon11());
               var3.setTabresCon12(var1.getTabresCon12());
               var3.setTabresCon13(var1.getTabresCon13());
               var3.setTabresCon14(var1.getTabresCon14());
               var3.setTabresCon15(var1.getTabresCon15());
               var3.setTabresCon16(var1.getTabresCon16());
               var3.setTabresCon17(var1.getTabresCon17());
               var3.setTabresCon18(var1.getTabresCon18());
               var3.setTabresCon19(var1.getTabresCon19());
               var3.setTabresCon20(var1.getTabresCon20());
               var3.setTabresFormatCol01(var1.getTabresFormatCol01());
               var3.setTabresFormatCol02(var1.getTabresFormatCol02());
               var3.setTabresFormatCol03(var1.getTabresFormatCol03());
               var3.setTabresFormatCol04(var1.getTabresFormatCol04());
               var3.setTabresFormatCol05(var1.getTabresFormatCol05());
               var3.setTabresFormatCol06(var1.getTabresFormatCol06());
               var3.setTabresFormatCol07(var1.getTabresFormatCol07());
               var3.setTabresFormatCol08(var1.getTabresFormatCol08());
               var3.setTabresFormatCol09(var1.getTabresFormatCol09());
               var3.setTabresFormatCol10(var1.getTabresFormatCol10());
               var3.setTabresFormatCol11(var1.getTabresFormatCol11());
               var3.setTabresFormatCol12(var1.getTabresFormatCol12());
               var3.setTabresFormatCol13(var1.getTabresFormatCol13());
               var3.setTabresFormatCol14(var1.getTabresFormatCol14());
               var3.setTabresFormatCol15(var1.getTabresFormatCol15());
               var3.setTabresFormatCol16(var1.getTabresFormatCol16());
               var3.setTabresFormatCol17(var1.getTabresFormatCol17());
               var3.setTabresFormatCol18(var1.getTabresFormatCol18());
               var3.setTabresFormatCol19(var1.getTabresFormatCol19());
               var3.setTabresFormatCol20(var1.getTabresFormatCol20());
               var3.setTabresMod01(var1.isTabresMod01());
               var3.setTabresMod02(var1.isTabresMod02());
               var3.setTabresMod03(var1.isTabresMod03());
               var3.setTabresMod04(var1.isTabresMod04());
               var3.setTabresMod05(var1.isTabresMod05());
               var3.setTabresMod06(var1.isTabresMod06());
               var3.setTabresMod07(var1.isTabresMod07());
               var3.setTabresMod08(var1.isTabresMod08());
               var3.setTabresMod09(var1.isTabresMod09());
               var3.setTabresMod10(var1.isTabresMod10());
               var3.setTabresMod11(var1.isTabresMod11());
               var3.setTabresMod12(var1.isTabresMod12());
               var3.setTabresMod13(var1.isTabresMod13());
               var3.setTabresMod14(var1.isTabresMod14());
               var3.setTabresMod15(var1.isTabresMod15());
               var3.setTabresMod16(var1.isTabresMod16());
               var3.setTabresMod17(var1.isTabresMod17());
               var3.setTabresMod18(var1.isTabresMod18());
               var3.setTabresMod19(var1.isTabresMod19());
               var3.setTabresMod20(var1.isTabresMod20());
               this.listMemoResultat.add(var3);
            }
         }

         this.listBulletins.clear();
         this.listSalaries.clear();
         this.choixNature();
         if (!this.modeModifierTab && this.cptTabNom.getTablisType() == 0 && (this.cptTabNom.getTablisAnneeAnte() == 1 || this.cptTabNom.getTablisCode().equals("BA") || this.cptTabNom.getTablisCode().equals("BP") || this.cptTabNom.getTablisCode().equals("CR") || this.cptTabNom.getTablisCode().equals("FLUX") || this.cptTabNom.getTablisCode().equals("CRC") || this.cptTabNom.getTablisCode().equals("CRP") || this.cptTabNom.getTablisCode().equals("TAF1") || this.cptTabNom.getTablisCode().equals("TAF2") || this.cptTabNom.getTablisCode().equals("TAF3") || this.cptTabNom.getTablisCode().equals("TAF4") || this.cptTabNom.getTablisCode().startsWith("NOTE"))) {
            this.traitementEcritures();
         }

         if (this.cptTabNom.getTablisType() == 1) {
            this.budgetLigneDao = new BudgetLigneDao(this.baseLog, this.utilInitHibernate);
            this.planBudgetaireCompteDao = new PlanBudgetaireCompteDao(this.baseLog, this.utilInitHibernate);
            this.ecrituresAnalytiquesDao = new EcrituresAnalytiquesDao(this.baseLog, this.utilInitHibernate);
         }

         this.tabResultatsDao.deleteTabResultatAnnee(this.cptTabNom.getTablisCode(), this.selectedExo.getExecpt_id());
         boolean var22 = false;
         Session var23 = this.utilInitHibernate.getOpenSession(this.baseLog, "EtatFinancier");
         var3 = null;

         try {
            Transaction var24 = var23.beginTransaction();
            var23.setFlushMode(FlushMode.MANUAL);
            this.exercicesComptableDao.modifierExercicesCompta(this.selectedExo, var23);
            ArrayList var4 = new ArrayList();
            this.lesResultats.clear();
            this.lesResultats = this.convertirTableau(var23);
            this.var_currentValue = 0;
            this.titreCalcule = false;
            new CptTabFormule();
            this.tabResultats = new TabResultats();

            CptTabFormule var5;
            int var6;
            int var8;
            int var14;
            int var25;
            int var26;
            int var28;
            int var30;
            for(var6 = 0; var6 < this.lesResultats.size(); ++var6) {
               if (var6 != 0) {
                  double var7 = (double)this.lesResultats.size();
                  double var9 = this.utilNombre.myRound(var7 / (double)var6, 4);
                  double var11 = this.utilNombre.myRound(100.0D / var9, 2);
                  this.var_currentValue = (int)var11;
               }

               this.tabResultats = (TabResultats)this.lesResultats.get(var6);
               this.tabResultats.setExercicescomptable(this.selectedExo);
               this.tabResultats.setTabresNomFr(this.cptTabNom.getTablisLibFR());
               this.tabResultats.setTabresNomSp(this.cptTabNom.getTablisLibSP());
               this.tabResultats.setTabresNomUk(this.cptTabNom.getTablisLibUK());
               this.tabResultats.setTabresCode(this.cptTabNom.getTablisCode());
               this.tabResultats.setTabresDateDeb(this.dateDebCalcul);
               this.tabResultats.setTabresDateFin(this.dateFinCalcul);
               if (var6 == 0) {
                  this.tabResultats.setTabresNotes(this.notesExplicativesMemo);
               } else {
                  this.tabResultats.setTabresNotes("");
               }

               if (this.tabResultats.getTabresType() == 7) {
                  this.titreCalcule = true;
               }

               this.tabResultats.setTabresAnnee((long)(this.selectedExo.getExecptDateFin().getYear() + 1900));
               var25 = (this.getTabResultats().getTabresDateFin().getYear() - this.getTabResultats().getTabresDateDeb().getYear()) * 12;
               var8 = var25 + this.getTabResultats().getTabresDateFin().getMonth() - this.getTabResultats().getTabresDateDeb().getMonth() + 1;
               this.tabResultats.setTabresNbMois(var8);
               this.tabResultats.setTabresNum(var6);
               this.tabResultats.setTabresResultatAffecte(this.var_resultatAffecte);
               if (this.var_jrxrsv) {
                  this.tabResultats.setTabresJrRv(1);
               } else {
                  this.tabResultats.setTabresJrRv(0);
               }

               if (this.var_jrxsit) {
                  this.tabResultats.setTabresJrSit(1);
               } else {
                  this.tabResultats.setTabresJrSit(0);
               }

               if (this.tabResultats.getTabresType() != 7) {
                  var26 = 0;
                  int var10 = this.cptTabNom.getTablisNbCol();

                  for(var28 = 1; var28 <= var10; ++var28) {
                     if (var28 == 1) {
                        var26 = this.cptTabNom.getTablisAnn01();
                     } else if (var28 == 2) {
                        var26 = this.cptTabNom.getTablisAnn02();
                     } else if (var28 == 3) {
                        var26 = this.cptTabNom.getTablisAnn03();
                     } else if (var28 == 4) {
                        var26 = this.cptTabNom.getTablisAnn04();
                     } else if (var28 == 5) {
                        var26 = this.cptTabNom.getTablisAnn05();
                     } else if (var28 == 6) {
                        var26 = this.cptTabNom.getTablisAnn06();
                     } else if (var28 == 7) {
                        var26 = this.cptTabNom.getTablisAnn07();
                     } else if (var28 == 8) {
                        var26 = this.cptTabNom.getTablisAnn08();
                     } else if (var28 == 9) {
                        var26 = this.cptTabNom.getTablisAnn09();
                     } else if (var28 == 10) {
                        var26 = this.cptTabNom.getTablisAnn10();
                     } else if (var28 == 11) {
                        var26 = this.cptTabNom.getTablisAnn11();
                     } else if (var28 == 12) {
                        var26 = this.cptTabNom.getTablisAnn12();
                     } else if (var28 == 13) {
                        var26 = this.cptTabNom.getTablisAnn13();
                     } else if (var28 == 14) {
                        var26 = this.cptTabNom.getTablisAnn14();
                     } else if (var28 == 15) {
                        var26 = this.cptTabNom.getTablisAnn15();
                     } else if (var28 == 16) {
                        var26 = this.cptTabNom.getTablisAnn16();
                     } else if (var28 == 17) {
                        var26 = this.cptTabNom.getTablisAnn17();
                     } else if (var28 == 18) {
                        var26 = this.cptTabNom.getTablisAnn18();
                     } else if (var28 == 19) {
                        var26 = this.cptTabNom.getTablisAnn19();
                     } else if (var28 == 20) {
                        var26 = this.cptTabNom.getTablisAnn20();
                     }

                     this.colonneEnCours = "" + var28;
                     this.calculePeriode(var26);
                     this.resultat1 = 0.0D;
                     this.resultat2 = 0.0D;
                     this.resultat3 = "";
                     this.operateur = "";
                     List var12 = this.cptTabFormuleDao.chargerMesTabFormule(this.tabResultats.getTabresIdElement(), var28, var23);
                     if (var12.size() != 0 && this.tabResultats.getTabresReference().equals("CH") && var28 == 1) {
                        ArrayList var13 = new ArrayList();
                        if (this.var_resultatAffecte == 0) {
                           for(var14 = 0; var14 < var12.size(); ++var14) {
                              if (!((CptTabFormule)var12.get(var14)).getTabforFormule().contains("COMPTE(1301;139)")) {
                                 var13.add(var12.get(var14));
                              }
                           }
                        } else {
                           CptTabFormule var31;
                           if (this.var_resultatAffecte == 1) {
                              var31 = new CptTabFormule();
                              var31.setTabforCol(1);
                              var31.setTabforPeriode(20);
                              var31.setTabforFormule("CEL(BP=CH:1)");
                              var13.add(var31);
                              var31 = new CptTabFormule();
                              var31.setTabforCol(1);
                              var31.setTabforPeriode(20);
                              var31.setTabforFormule("+");
                              var13.add(var31);
                              var31 = new CptTabFormule();
                              var31.setTabforCol(1);
                              var31.setTabforPeriode(20);
                              var31.setTabforFormule("CEL(BP=CI:1)");
                              var13.add(var31);
                           } else if (this.var_resultatAffecte == 2) {
                              var31 = new CptTabFormule();
                              var31.setTabforCol(1);
                              var31.setTabforSolde(1);
                              var31.setTabforPeriode(0);
                              var31.setTabforFormule("COMPTE(121;129)");
                              var13.add(var31);
                           } else if (this.var_resultatAffecte == 3) {
                              var31 = new CptTabFormule();
                              var31.setTabforCol(0);
                              var31.setTabforSolde(1);
                              var31.setTabforPeriode(0);
                              var31.setTabforFormule("COMPTE(12)");
                              var13.add(var31);
                              var31 = new CptTabFormule();
                              var31.setTabforCol(1);
                              var31.setTabforPeriode(20);
                              var31.setTabforFormule("+");
                              var13.add(var31);
                              var31 = new CptTabFormule();
                              var31.setTabforCol(1);
                              var31.setTabforPeriode(20);
                              var31.setTabforFormule("CEL(BP=CJ:1)");
                              var13.add(var31);
                           } else if (this.var_resultatAffecte == 4) {
                              var31 = new CptTabFormule();
                              var31.setTabforCol(0);
                              var31.setTabforSolde(1);
                              var31.setTabforPeriode(0);
                              var31.setTabforFormule("COMPTE(12)");
                              var13.add(var31);
                              var31 = new CptTabFormule();
                              var31.setTabforCol(1);
                              var31.setTabforPeriode(20);
                              var31.setTabforFormule("-");
                              var13.add(var31);
                              var31 = new CptTabFormule();
                              var31.setTabforCol(1);
                              var31.setTabforPeriode(0);
                              var31.setTabforFormule("COMPTE(13)");
                              var13.add(var31);
                           } else {
                              for(var14 = 0; var14 < var12.size(); ++var14) {
                                 var13.add(var12.get(var14));
                              }
                           }
                        }

                        var12.clear();

                        for(var14 = 0; var14 < var13.size(); ++var14) {
                           var12.add(var13.get(var14));
                        }
                     }

                     for(var30 = 0; var30 < var12.size(); ++var30) {
                        var5 = (CptTabFormule)var12.get(var30);
                        if (var26 != var5.getTabforPeriode()) {
                           var26 = var5.getTabforPeriode();
                           this.calculePeriode(var26);
                        }

                        var14 = var5.getTabforSolde();
                        int var15 = var5.getTabforTypeReglement();
                        int var16 = var5.getTabforSens();
                        if (this.modeModifierTab && this.tabResultats.getTabresType() == 3) {
                           if (var28 == 1 && this.tabResultats.getTabresTypeCol01() != 7 && this.tabResultats.getTabresTypeCol01() != 8) {
                              var14 = 6;
                           } else if (var28 == 2 && this.tabResultats.getTabresTypeCol02() != 7 && this.tabResultats.getTabresTypeCol02() != 8) {
                              var14 = 6;
                           } else if (var28 == 3 && this.tabResultats.getTabresTypeCol03() != 7 && this.tabResultats.getTabresTypeCol03() != 8) {
                              var14 = 6;
                           } else if (var28 == 4 && this.tabResultats.getTabresTypeCol04() != 7 && this.tabResultats.getTabresTypeCol04() != 8) {
                              var14 = 6;
                           } else if (var28 == 5 && this.tabResultats.getTabresTypeCol05() != 7 && this.tabResultats.getTabresTypeCol05() != 8) {
                              var14 = 6;
                           } else if (var28 == 6 && this.tabResultats.getTabresTypeCol06() != 7 && this.tabResultats.getTabresTypeCol06() != 8) {
                              var14 = 6;
                           } else if (var28 == 7 && this.tabResultats.getTabresTypeCol07() != 7 && this.tabResultats.getTabresTypeCol07() != 8) {
                              var14 = 6;
                           } else if (var28 == 8 && this.tabResultats.getTabresTypeCol08() != 7 && this.tabResultats.getTabresTypeCol08() != 8) {
                              var14 = 6;
                           } else if (var28 == 9 && this.tabResultats.getTabresTypeCol09() != 7 && this.tabResultats.getTabresTypeCol09() != 8) {
                              var14 = 6;
                           } else if (var28 == 10 && this.tabResultats.getTabresTypeCol10() != 7 && this.tabResultats.getTabresTypeCol10() != 8) {
                              var14 = 6;
                           } else if (var28 == 11 && this.tabResultats.getTabresTypeCol11() != 7 && this.tabResultats.getTabresTypeCol11() != 8) {
                              var14 = 6;
                           } else if (var28 == 12 && this.tabResultats.getTabresTypeCol12() != 7 && this.tabResultats.getTabresTypeCol12() != 8) {
                              var14 = 6;
                           } else if (var28 == 13 && this.tabResultats.getTabresTypeCol13() != 7 && this.tabResultats.getTabresTypeCol13() != 8) {
                              var14 = 6;
                           } else if (var28 == 14 && this.tabResultats.getTabresTypeCol14() != 7 && this.tabResultats.getTabresTypeCol14() != 8) {
                              var14 = 6;
                           } else if (var28 == 15 && this.tabResultats.getTabresTypeCol15() != 7 && this.tabResultats.getTabresTypeCol15() != 8) {
                              var14 = 6;
                           } else if (var28 == 16 && this.tabResultats.getTabresTypeCol16() != 7 && this.tabResultats.getTabresTypeCol16() != 8) {
                              var14 = 6;
                           } else if (var28 == 17 && this.tabResultats.getTabresTypeCol17() != 7 && this.tabResultats.getTabresTypeCol17() != 8) {
                              var14 = 6;
                           } else if (var28 == 18 && this.tabResultats.getTabresTypeCol18() != 7 && this.tabResultats.getTabresTypeCol18() != 8) {
                              var14 = 6;
                           } else if (var28 == 19 && this.tabResultats.getTabresTypeCol19() != 7 && this.tabResultats.getTabresTypeCol19() != 8) {
                              var14 = 6;
                           } else if (var28 == 20 && this.tabResultats.getTabresTypeCol20() != 7 && this.tabResultats.getTabresTypeCol20() != 8) {
                              var14 = 6;
                           }
                        }

                        this.analyseFormule(var26, var5, var14, var28, var6, var23);
                     }

                     this.renseigneCol(var28, this.resultat1, this.resultat3);
                  }
               }

               this.tabResultats = this.tabResultatsDao.saveTabResulats(this.tabResultats, var23);
               var23.flush();
               var4.add(this.tabResultats);
            }

            if (this.titreCalcule) {
               for(var6 = 0; var6 < this.lesResultats.size(); ++var6) {
                  this.tabResultats = (TabResultats)this.lesResultats.get(var6);
                  if (this.tabResultats.getTabresType() == 7) {
                     var25 = 0;
                     var8 = this.cptTabNom.getTablisNbCol();

                     for(var26 = 1; var26 <= var8; ++var26) {
                        if (var26 == 1) {
                           var25 = this.cptTabNom.getTablisAnn01();
                        } else if (var26 == 2) {
                           var25 = this.cptTabNom.getTablisAnn02();
                        } else if (var26 == 3) {
                           var25 = this.cptTabNom.getTablisAnn03();
                        } else if (var26 == 4) {
                           var25 = this.cptTabNom.getTablisAnn04();
                        } else if (var26 == 5) {
                           var25 = this.cptTabNom.getTablisAnn05();
                        } else if (var26 == 6) {
                           var25 = this.cptTabNom.getTablisAnn06();
                        } else if (var26 == 7) {
                           var25 = this.cptTabNom.getTablisAnn07();
                        } else if (var26 == 8) {
                           var25 = this.cptTabNom.getTablisAnn08();
                        } else if (var26 == 9) {
                           var25 = this.cptTabNom.getTablisAnn09();
                        } else if (var26 == 10) {
                           var25 = this.cptTabNom.getTablisAnn10();
                        } else if (var26 == 11) {
                           var25 = this.cptTabNom.getTablisAnn11();
                        } else if (var26 == 12) {
                           var25 = this.cptTabNom.getTablisAnn12();
                        } else if (var26 == 13) {
                           var25 = this.cptTabNom.getTablisAnn13();
                        } else if (var26 == 14) {
                           var25 = this.cptTabNom.getTablisAnn14();
                        } else if (var26 == 15) {
                           var25 = this.cptTabNom.getTablisAnn15();
                        } else if (var26 == 16) {
                           var25 = this.cptTabNom.getTablisAnn16();
                        } else if (var26 == 17) {
                           var25 = this.cptTabNom.getTablisAnn17();
                        } else if (var26 == 18) {
                           var25 = this.cptTabNom.getTablisAnn18();
                        } else if (var26 == 19) {
                           var25 = this.cptTabNom.getTablisAnn19();
                        } else if (var26 == 20) {
                           var25 = this.cptTabNom.getTablisAnn20();
                        }

                        this.colonneEnCours = "" + var26;
                        this.calculePeriode(var25);
                        this.resultat1 = 0.0D;
                        this.resultat2 = 0.0D;
                        this.resultat3 = "";
                        this.operateur = "";
                        List var27 = this.cptTabFormuleDao.chargerMesTabFormule(this.tabResultats.getTabresIdElement(), var26, var23);
                        if (var27.size() != 0) {
                           for(var28 = 0; var28 < var27.size(); ++var28) {
                              var5 = (CptTabFormule)var27.get(var28);
                              if (var25 != var5.getTabforPeriode()) {
                                 var25 = var5.getTabforPeriode();
                                 this.calculePeriode(var25);
                              }

                              int var29 = var5.getTabforSolde();
                              var30 = var5.getTabforTypeReglement();
                              var14 = var5.getTabforSens();
                              this.analyseFormule(var25, var5, var29, var26, var6, var23);
                           }

                           this.renseigneCol(var26, this.resultat1, this.resultat3);
                        }
                     }

                     this.tabResultats = this.tabResultatsDao.majTabResulats(this.tabResultats, var23);
                     var23.flush();
                     this.lesResultats.remove(this.tabResultats);
                     this.lesResultats.add(var6, this.tabResultats);
                     var4.add(var6, this.tabResultats);
                  }
               }
            }

            this.var_currentValue = 100;
            this.lesResultats = var4;
            this.dataModelResultat.setWrappedData(this.lesResultats);
            var24.commit();
         } catch (HibernateException var20) {
            if (var3 != null) {
               var3.rollback();
            }

            throw var20;
         } finally {
            this.utilInitHibernate.closeSession();
         }

         this.chargerMesTabElementOrTabResultat((Session)null);
      }

      this.var_showBarProg = false;
      this.var_currentValue = 0;
   }

   public void supprimeTableaux() throws HibernateException, NamingException {
      if (this.cptTabNom != null && this.lesResultats.size() != 0) {
         this.tabResultatsDao.deleteTabResultatAnnee(this.cptTabNom.getTablisCode(), this.selectedExo.getExecpt_id());
         this.lesResultats.clear();
         this.listMemoResultat.clear();
         this.selectionEtatFinancier();
      }

   }

   public void modifieTableaux() {
      if (this.cptTabNom != null) {
         this.modeModifierTab = true;
         if (this.lesResultats.size() != 0) {
            for(int var1 = 0; var1 < this.lesResultats.size(); ++var1) {
               this.tabResultats = new TabResultats();
               this.tabResultats = (TabResultats)this.lesResultats.get(var1);
               if (this.tabResultats.getTabresType() == 3) {
                  if (this.tabResultats.getTabresTypeCol01() >= 0 && this.tabResultats.getTabresTypeCol01() <= 5 || this.tabResultats.getTabresTypeCol01() >= 10 && this.tabResultats.getTabresTypeCol01() <= 30) {
                     this.tabResultats.setTabresTypeCol01(6);
                  }

                  if (this.tabResultats.getTabresTypeCol02() >= 0 && this.tabResultats.getTabresTypeCol02() <= 5 || this.tabResultats.getTabresTypeCol02() >= 10 && this.tabResultats.getTabresTypeCol02() <= 30) {
                     this.tabResultats.setTabresTypeCol02(6);
                  }

                  if (this.tabResultats.getTabresTypeCol03() >= 0 && this.tabResultats.getTabresTypeCol03() <= 5 || this.tabResultats.getTabresTypeCol03() >= 10 && this.tabResultats.getTabresTypeCol03() <= 30) {
                     this.tabResultats.setTabresTypeCol03(6);
                  }

                  if (this.tabResultats.getTabresTypeCol04() >= 0 && this.tabResultats.getTabresTypeCol04() <= 5 || this.tabResultats.getTabresTypeCol04() >= 10 && this.tabResultats.getTabresTypeCol04() <= 30) {
                     this.tabResultats.setTabresTypeCol04(6);
                  }

                  if (this.tabResultats.getTabresTypeCol05() >= 0 && this.tabResultats.getTabresTypeCol05() <= 5 || this.tabResultats.getTabresTypeCol05() >= 10 && this.tabResultats.getTabresTypeCol05() <= 30) {
                     this.tabResultats.setTabresTypeCol05(6);
                  }

                  if (this.tabResultats.getTabresTypeCol06() >= 0 && this.tabResultats.getTabresTypeCol06() <= 5 || this.tabResultats.getTabresTypeCol06() >= 10 && this.tabResultats.getTabresTypeCol06() <= 30) {
                     this.tabResultats.setTabresTypeCol06(6);
                  }

                  if (this.tabResultats.getTabresTypeCol07() >= 0 && this.tabResultats.getTabresTypeCol07() <= 5 || this.tabResultats.getTabresTypeCol07() >= 10 && this.tabResultats.getTabresTypeCol07() <= 30) {
                     this.tabResultats.setTabresTypeCol07(6);
                  }

                  if (this.tabResultats.getTabresTypeCol08() >= 0 && this.tabResultats.getTabresTypeCol08() <= 5 || this.tabResultats.getTabresTypeCol08() >= 10 && this.tabResultats.getTabresTypeCol08() <= 30) {
                     this.tabResultats.setTabresTypeCol08(6);
                  }

                  if (this.tabResultats.getTabresTypeCol09() >= 0 && this.tabResultats.getTabresTypeCol09() <= 5 || this.tabResultats.getTabresTypeCol09() >= 10 && this.tabResultats.getTabresTypeCol09() <= 30) {
                     this.tabResultats.setTabresTypeCol09(6);
                  }

                  if (this.tabResultats.getTabresTypeCol10() >= 0 && this.tabResultats.getTabresTypeCol10() <= 5 || this.tabResultats.getTabresTypeCol10() >= 10 && this.tabResultats.getTabresTypeCol10() <= 30) {
                     this.tabResultats.setTabresTypeCol10(6);
                  }

                  if (this.tabResultats.getTabresTypeCol11() >= 0 && this.tabResultats.getTabresTypeCol11() <= 5 || this.tabResultats.getTabresTypeCol11() >= 10 && this.tabResultats.getTabresTypeCol11() <= 30) {
                     this.tabResultats.setTabresTypeCol11(6);
                  }

                  if (this.tabResultats.getTabresTypeCol12() >= 0 && this.tabResultats.getTabresTypeCol12() <= 5 || this.tabResultats.getTabresTypeCol12() >= 10 && this.tabResultats.getTabresTypeCol12() <= 30) {
                     this.tabResultats.setTabresTypeCol12(6);
                  }

                  if (this.tabResultats.getTabresTypeCol13() >= 0 && this.tabResultats.getTabresTypeCol13() <= 5 || this.tabResultats.getTabresTypeCol13() >= 10 && this.tabResultats.getTabresTypeCol13() <= 30) {
                     this.tabResultats.setTabresTypeCol13(6);
                  }

                  if (this.tabResultats.getTabresTypeCol14() >= 0 && this.tabResultats.getTabresTypeCol14() <= 5 || this.tabResultats.getTabresTypeCol14() >= 10 && this.tabResultats.getTabresTypeCol14() <= 30) {
                     this.tabResultats.setTabresTypeCol14(6);
                  }

                  if (this.tabResultats.getTabresTypeCol15() >= 0 && this.tabResultats.getTabresTypeCol15() <= 5 || this.tabResultats.getTabresTypeCol15() >= 10 && this.tabResultats.getTabresTypeCol15() <= 30) {
                     this.tabResultats.setTabresTypeCol15(6);
                  }

                  if (this.tabResultats.getTabresTypeCol16() >= 0 && this.tabResultats.getTabresTypeCol16() <= 5 || this.tabResultats.getTabresTypeCol16() >= 10 && this.tabResultats.getTabresTypeCol16() <= 30) {
                     this.tabResultats.setTabresTypeCol16(6);
                  }

                  if (this.tabResultats.getTabresTypeCol17() >= 0 && this.tabResultats.getTabresTypeCol17() <= 5 || this.tabResultats.getTabresTypeCol17() >= 10 && this.tabResultats.getTabresTypeCol17() <= 30) {
                     this.tabResultats.setTabresTypeCol17(6);
                  }

                  if (this.tabResultats.getTabresTypeCol18() >= 0 && this.tabResultats.getTabresTypeCol18() <= 5 || this.tabResultats.getTabresTypeCol18() >= 10 && this.tabResultats.getTabresTypeCol18() <= 30) {
                     this.tabResultats.setTabresTypeCol18(6);
                  }

                  if (this.tabResultats.getTabresTypeCol19() >= 0 && this.tabResultats.getTabresTypeCol19() <= 5 || this.tabResultats.getTabresTypeCol19() >= 10 && this.tabResultats.getTabresTypeCol19() <= 30) {
                     this.tabResultats.setTabresTypeCol19(6);
                  }

                  if (this.tabResultats.getTabresTypeCol20() >= 0 && this.tabResultats.getTabresTypeCol20() <= 5 || this.tabResultats.getTabresTypeCol20() >= 10 && this.tabResultats.getTabresTypeCol20() <= 30) {
                     this.tabResultats.setTabresTypeCol20(6);
                  }
               }
            }

            this.dataModelResultat.setWrappedData(this.lesResultats);
         }
      }

   }

   public void duppliqueTableaux() throws HibernateException, NamingException {
      if (this.cptTabNom != null) {
         if (this.lesResultats.size() != 0) {
            if (this.cptTabNom.getTablisType() == 0) {
               this.tabResultatsDao.deleteTabResultatAnnee(this.cptTabNom.getTablisCode(), this.selectedExo.getExecpt_id());
            }
         } else if (this.lesactivites.size() != 0) {
            if (this.cptTabNom.getTablisType() == 3) {
               this.complementInformationsDao.nettoyage(0, this.selectedExo.getExecpt_id());
            }
         } else if ((this.lesactionnaires.size() != 0 || this.lesdirigeants.size() != 0 || this.lesmca.size() != 0 || this.lesfiliales.size() != 0) && this.cptTabNom.getTablisType() == 4) {
            this.complementInformationsDao.nettoyage(9, this.selectedExo.getExecpt_id());
         }

         Session var1;
         if (this.cptTabNom.getTablisType() == 0) {
            var1 = this.utilInitHibernate.getOpenSession(this.baseLog, "EtatFinancier");
            this.chargerMesTabElementAnterieur(var1);
            this.utilInitHibernate.closeSession();
         } else if (this.cptTabNom.getTablisType() == 2) {
            var1 = this.utilInitHibernate.getOpenSession(this.baseLog, "EtatFinancier");
            this.chargerElementsExerciceAnterieur(var1);
            this.utilInitHibernate.closeSession();
         } else {
            Transaction var2;
            if (this.cptTabNom.getTablisType() == 3) {
               var1 = this.utilInitHibernate.getOpenSession(this.baseLog, "EtatFinancier");
               var2 = null;

               try {
                  var2 = var1.beginTransaction();
                  var1.setFlushMode(FlushMode.MANUAL);
                  this.recupereActivitesAnterieur(var1);
                  var1.flush();
                  var2.commit();
               } catch (HibernateException var16) {
                  if (var2 != null) {
                     var2.rollback();
                  }

                  throw var16;
               } finally {
                  this.utilInitHibernate.closeSession();
               }
            } else if (this.cptTabNom.getTablisType() == 4) {
               var1 = this.utilInitHibernate.getOpenSession(this.baseLog, "EtatFinancier");
               var2 = null;

               try {
                  var2 = var1.beginTransaction();
                  var1.setFlushMode(FlushMode.MANUAL);
                  this.recupereDAMCAFAnterieur(var1);
                  var1.flush();
                  var2.commit();
               } catch (HibernateException var14) {
                  if (var2 != null) {
                     var2.rollback();
                  }

                  throw var14;
               } finally {
                  this.utilInitHibernate.closeSession();
               }
            }
         }
      }

   }

   public void controleComptes() throws HibernateException, NamingException, ParseException {
      if (this.cptTabNom != null) {
         Session var1 = this.utilInitHibernate.getOpenSession(this.baseLog, "EcrituresEtatFinancier");
         new ArrayList();
         RacinesDao var3 = new RacinesDao(this.baseLog, this.structureLog, this.utilInitHibernate);
         List var2 = var3.chargerMesRacines(this.selecFiscalite, var1);
         new ArrayList();
         ArrayList var5 = new ArrayList();
         List var4 = this.ecrituresDao.chargerEcriturePlc(this.selectedExo.getExecpt_id(), var1);

         for(int var6 = 0; var6 < var4.size(); ++var6) {
            var5.add(var4.get(var6));
         }

         new ArrayList();
         ArrayList var7 = new ArrayList();
         List var13 = this.cptTabFormuleDao.chargerMesTabFormuleFiscalite(this.selecFiscalite, var1);
         int var8;
         if (var13.size() != 0) {
            for(var8 = 0; var8 < var13.size(); ++var8) {
               var7.add(var13.get(var8));
            }
         }

         this.lesFormulesTableau.clear();
         String var9;
         if (var7.size() != 0) {
            for(var8 = 0; var8 < var7.size(); ++var8) {
               this.cptTabFormule = (CptTabFormule)var7.get(var8);
               if (this.cptTabFormule.getTabforFormule() != null && !this.cptTabFormule.getTabforFormule().isEmpty() && this.cptTabFormule.getTabforFormule().startsWith("COMPTE(")) {
                  var9 = this.cptTabFormule.getCptTabElement().getCptTabNom().getTablisCode() + "/" + this.cptTabFormule.getCptTabElement().getTabeleReference() + " : " + this.cptTabFormule.getTabforFormule() + "  Colonne(" + this.cptTabFormule.getTabforCol() + ")";
                  this.lesFormulesTableau.add(var9);
                  String var10 = this.cptTabFormule.getTabforFormule().substring(7, this.cptTabFormule.getTabforFormule().length() - 1);
                  this.lePlanComptable.clear();
                  if (var10.contains(";")) {
                     String[] var11 = var10.split(";");

                     for(int var12 = 0; var12 < var11.length; ++var12) {
                        var4 = this.controleSuite1(var11[var12], var4);
                     }
                  } else {
                     var4 = this.controleSuite1(var10, var4);
                  }
               }
            }
         }

         this.dataModelFormules.setWrappedData(this.lesFormulesTableau);
         this.lesComptesErreurs.clear();
         if (var4.size() != 0) {
            for(var8 = 0; var8 < var4.size(); ++var8) {
               this.planComptable = this.planComptableDao.chercherCompte("", (String)var4.get(var8), this.selectedExo.getExecpt_id(), var1);
               if (this.planComptable != null) {
                  this.planComptable.setPlcLibelleCpteUK("Compte inutlisé dans les tableaux");
                  var9 = this.controleRacine(this.planComptable.getPlcCodeRacine(), var2);
                  if (var9 != null && !var9.isEmpty()) {
                     this.planComptable.setPlcLibelleCpteUK(this.planComptable.getPlcLibelleCpteUK() + " " + var9);
                  }

                  this.lesComptesErreurs.add(this.planComptable);
               } else {
                  this.planComptable = new PlanComptable();
                  this.planComptable.setPlcCompte((String)var4.get(var8));
                  this.planComptable.setPlcLibelleCpteFR("");
                  this.planComptable.setPlcLibelleCpteUK("Compte inexistant dans le plan comptable");
                  this.lesComptesErreurs.add(this.planComptable);
               }
            }
         }

         String var14 = this.utilDate.dateToStringSQLLight(this.dateDebCalcul);
         var9 = this.utilDate.dateToStringSQLLight(this.dateFinCalcul);
         this.var_natjrx = "(14)";
         this.balanceListe = this.ecrituresDao.chargerBalanceMemorisee(var14, var9, this.var_natjrx, this.var_jrxrsv, var1);
         this.controleSuite2(var1);
         this.controleSuite3(var5);
         this.controleSuite4(var5);
         this.controleSuite5(var5);
         this.controleSuite6(var5);
         this.controleSuite7(var5);
         this.controleSuite8(var5);
         this.dataModelErreur.setWrappedData(this.lesComptesErreurs);
         this.showModalPanelErreur = true;
         this.utilInitHibernate.closeSession();
      }

   }

   public List controleSuite1(String var1, List var2) {
      if (var2.size() != 0 && var1 != null && !var1.isEmpty()) {
         for(int var3 = 0; var3 < var2.size(); ++var3) {
            String var4 = (String)var2.get(var3);
            if (var4.startsWith(var1)) {
               var2.remove(var4);
               --var3;
            }
         }
      }

      return var2;
   }

   public void controleSuite2(Session var1) throws HibernateException, NamingException, ParseException {
      this.calculPeriode();
      new ArrayList();
      new ArrayList();
      JournauxComptablesDao var4 = new JournauxComptablesDao(this.baseLog, this.utilInitHibernate);
      List var3 = var4.chargerLesJournauxComptables(this.selectedExo.getExecpt_id(), 0, var1);
      double var5 = 0.0D;
      double var7 = 0.0D;
      String var9 = "";

      for(int var10 = 0; var10 < var3.size(); ++var10) {
         var9 = ((JournauxComptables)var3.get(var10)).getPljCode();

         for(int var11 = 0; var11 < this.lesPeriodes.size(); ++var11) {
            String var12 = ((SelectItem)this.lesPeriodes.get(var11)).getValue().toString();
            var5 = 0.0D;
            var7 = 0.0D;
            List var2 = this.ecrituresDao.ChargerLesEcrituresJrPeriode(var9, var12, var1);

            for(int var13 = 0; var13 < var2.size(); ++var13) {
               var5 += ((Ecritures)var2.get(var13)).getEcrDebitSaisie();
               var7 += ((Ecritures)var2.get(var13)).getEcrCreditSaisie();
            }

            if (var5 != var7) {
               this.planComptable = new PlanComptable();
               this.planComptable.setPlcCompte(var9);
               this.planComptable.setPlcLibelleCpteFR(((JournauxComptables)var3.get(var10)).getPljLibelleFr());
               this.planComptable.setPlcLibelleCpteUK("Le journal " + var9 + "de la période " + var12 + " est déséquilibré: " + (var5 - var7));
               this.lesComptesErreurs.add(this.planComptable);
            }
         }
      }

   }

   public void calculPeriode() throws ParseException {
      int var1 = 0;
      this.lesPeriodes.clear();
      Date var2 = this.dateDebCalcul;
      GregorianCalendar var3 = new GregorianCalendar();
      var3.setTime(var2);
      Date var4 = this.dateFinCalcul;
      GregorianCalendar var5 = new GregorianCalendar();
      var5.setTime(var4);
      var3.add(2, -1);
      var5.add(2, -1);
      String var6 = null;

      while(var3.compareTo(var5) < 0) {
         var3.add(2, 1);
         Date var7 = var3.getTime();
         var6 = this.formatPeriode(var7);
         ++var1;
         this.lesPeriodes.add(new SelectItem(var6));
      }

   }

   public String formatPeriode(Date var1) {
      SimpleDateFormat var2 = new SimpleDateFormat("dd-MM-yyyy");
      var2.format(var1);
      String var3 = "" + var2.format(var1);
      String[] var4 = var3.split("-");
      String var5 = var4[0];
      String var6 = var4[1];
      String var7 = var4[2];
      String var8 = var6 + ":" + var7;
      return var8;
   }

   public void controleSuite3(List var1) {
      double var2 = 0.0D;
      double var4 = 0.0D;
      String var6 = "";

      for(int var7 = 0; var7 < var1.size(); ++var7) {
         if (var1.get(var7) != null && !((String)var1.get(var7)).isEmpty() && ((String)var1.get(var7)).startsWith("40")) {
            var6 = (String)var1.get(var7);
            var2 = 0.0D;
            var4 = 0.0D;

            for(int var8 = 0; var8 < this.balanceListe.size(); ++var8) {
               if (((EcrituresLight)this.balanceListe.get(var8)).getEcrCompte() != null && !((EcrituresLight)this.balanceListe.get(var8)).getEcrCompte().isEmpty() && ((EcrituresLight)this.balanceListe.get(var8)).getEcrCompte().equals(var6)) {
                  var2 += ((EcrituresLight)this.balanceListe.get(var8)).getEcrDebitSaisie();
                  var4 += ((EcrituresLight)this.balanceListe.get(var8)).getEcrCreditSaisie();
               }
            }

            if (var2 > var4) {
               this.planComptable = new PlanComptable();
               this.planComptable.setPlcCompte(var6);
               this.planComptable.setPlcLibelleCpteFR("");
               this.planComptable.setPlcLibelleCpteUK("Le compte " + var6 + " est débiteur: " + (var2 - var4));
               this.lesComptesErreurs.add(this.planComptable);
            }
         }
      }

   }

   public void controleSuite4(List var1) {
      double var2 = 0.0D;
      double var4 = 0.0D;
      String var6 = "";

      for(int var7 = 0; var7 < var1.size(); ++var7) {
         if (var1.get(var7) != null && !((String)var1.get(var7)).isEmpty() && ((String)var1.get(var7)).startsWith("41")) {
            var6 = (String)var1.get(var7);
            var2 = 0.0D;
            var4 = 0.0D;

            for(int var8 = 0; var8 < this.balanceListe.size(); ++var8) {
               if (((EcrituresLight)this.balanceListe.get(var8)).getEcrCompte() != null && !((EcrituresLight)this.balanceListe.get(var8)).getEcrCompte().isEmpty() && ((EcrituresLight)this.balanceListe.get(var8)).getEcrCompte().equals(var6)) {
                  var2 += ((EcrituresLight)this.balanceListe.get(var8)).getEcrDebitSaisie();
                  var4 += ((EcrituresLight)this.balanceListe.get(var8)).getEcrCreditSaisie();
               }
            }

            if (var4 > var2) {
               this.planComptable = new PlanComptable();
               this.planComptable.setPlcCompte(var6);
               this.planComptable.setPlcLibelleCpteFR("");
               this.planComptable.setPlcLibelleCpteUK("Le compte " + var6 + " est créditeur: " + (var4 - var2));
               this.lesComptesErreurs.add(this.planComptable);
            }
         }
      }

   }

   public void controleSuite5(List var1) {
      double var2 = 0.0D;
      double var4 = 0.0D;
      String var6 = "";

      for(int var7 = 0; var7 < var1.size(); ++var7) {
         if (var1.get(var7) != null && !((String)var1.get(var7)).isEmpty() && ((String)var1.get(var7)).startsWith("57")) {
            var6 = (String)var1.get(var7);
            var2 = 0.0D;
            var4 = 0.0D;

            for(int var8 = 0; var8 < this.balanceListe.size(); ++var8) {
               if (((EcrituresLight)this.balanceListe.get(var8)).getEcrCompte() != null && !((EcrituresLight)this.balanceListe.get(var8)).getEcrCompte().isEmpty() && ((EcrituresLight)this.balanceListe.get(var8)).getEcrCompte().equals(var6)) {
                  var2 += ((EcrituresLight)this.balanceListe.get(var8)).getEcrDebitSaisie();
                  var4 += ((EcrituresLight)this.balanceListe.get(var8)).getEcrCreditSaisie();
               }
            }

            if (var4 > var2) {
               this.planComptable = new PlanComptable();
               this.planComptable.setPlcCompte(var6);
               this.planComptable.setPlcLibelleCpteFR("");
               this.planComptable.setPlcLibelleCpteUK("Le compte " + var6 + " est créditeur: " + (var4 - var2));
               this.lesComptesErreurs.add(this.planComptable);
            }
         }
      }

   }

   public void controleSuite6(List var1) {
      double var2 = 0.0D;
      double var4 = 0.0D;
      String var6 = "";

      for(int var7 = 0; var7 < var1.size(); ++var7) {
         if (var1.get(var7) != null && !((String)var1.get(var7)).isEmpty() && ((String)var1.get(var7)).startsWith("585")) {
            var6 = (String)var1.get(var7);
            var2 = 0.0D;
            var4 = 0.0D;

            for(int var8 = 0; var8 < this.balanceListe.size(); ++var8) {
               if (((EcrituresLight)this.balanceListe.get(var8)).getEcrCompte() != null && !((EcrituresLight)this.balanceListe.get(var8)).getEcrCompte().isEmpty() && ((EcrituresLight)this.balanceListe.get(var8)).getEcrCompte().equals(var6)) {
                  var2 += ((EcrituresLight)this.balanceListe.get(var8)).getEcrDebitSaisie();
                  var4 += ((EcrituresLight)this.balanceListe.get(var8)).getEcrCreditSaisie();
               }
            }

            if (var2 != var4) {
               this.planComptable = new PlanComptable();
               this.planComptable.setPlcCompte(var6);
               this.planComptable.setPlcLibelleCpteFR("");
               this.planComptable.setPlcLibelleCpteUK("Le compte " + var6 + " n'est pas soldé: " + (var2 - var4));
               this.lesComptesErreurs.add(this.planComptable);
            }
         }
      }

   }

   public void controleSuite7(List var1) {
      double var2 = 0.0D;
      double var4 = 0.0D;
      String var6 = "";

      for(int var7 = 0; var7 < var1.size(); ++var7) {
         if (var1.get(var7) != null && !((String)var1.get(var7)).isEmpty() && ((String)var1.get(var7)).startsWith("6")) {
            var6 = (String)var1.get(var7);
            var2 = 0.0D;
            var4 = 0.0D;

            for(int var8 = 0; var8 < this.balanceListe.size(); ++var8) {
               if (((EcrituresLight)this.balanceListe.get(var8)).getEcrCompte() != null && !((EcrituresLight)this.balanceListe.get(var8)).getEcrCompte().isEmpty() && ((EcrituresLight)this.balanceListe.get(var8)).getEcrCompte().equals(var6)) {
                  var2 += ((EcrituresLight)this.balanceListe.get(var8)).getEcrDebitSaisie();
                  var4 += ((EcrituresLight)this.balanceListe.get(var8)).getEcrCreditSaisie();
               }
            }

            if (var2 < var4) {
               this.planComptable = new PlanComptable();
               this.planComptable.setPlcCompte(var6);
               this.planComptable.setPlcLibelleCpteFR("");
               this.planComptable.setPlcLibelleCpteUK("Le compte " + var6 + " est créditeur: " + (var2 - var4));
               this.lesComptesErreurs.add(this.planComptable);
            }
         }
      }

   }

   public void controleSuite8(List var1) {
      double var2 = 0.0D;
      double var4 = 0.0D;
      String var6 = "";

      for(int var7 = 0; var7 < var1.size(); ++var7) {
         if (var1.get(var7) != null && !((String)var1.get(var7)).isEmpty() && ((String)var1.get(var7)).startsWith("7")) {
            var6 = (String)var1.get(var7);
            var2 = 0.0D;
            var4 = 0.0D;

            for(int var8 = 0; var8 < this.balanceListe.size(); ++var8) {
               if (((EcrituresLight)this.balanceListe.get(var8)).getEcrCompte() != null && !((EcrituresLight)this.balanceListe.get(var8)).getEcrCompte().isEmpty() && ((EcrituresLight)this.balanceListe.get(var8)).getEcrCompte().equals(var6)) {
                  var2 += ((EcrituresLight)this.balanceListe.get(var8)).getEcrDebitSaisie();
                  var4 += ((EcrituresLight)this.balanceListe.get(var8)).getEcrCreditSaisie();
               }
            }

            if (var2 > var4) {
               this.planComptable = new PlanComptable();
               this.planComptable.setPlcCompte(var6);
               this.planComptable.setPlcLibelleCpteFR("");
               this.planComptable.setPlcLibelleCpteUK("Le compte " + var6 + " est débiteur: " + (var2 - var4));
               this.lesComptesErreurs.add(this.planComptable);
            }
         }
      }

   }

   public String controleRacine(String var1, List var2) {
      String var3 = " - RACINE NON RECONNUE";

      for(int var4 = 0; var4 < var2.size(); ++var4) {
         if (((Racines)var2.get(var4)).getRacCode().equals(var1)) {
            var3 = "";
            break;
         }
      }

      return var3;
   }

   public void fermerControleComptes() {
      this.showModalPanelErreur = false;
   }

   public void traitementEcritures() throws HibernateException, NamingException, ParseException {
      Session var1 = this.utilInitHibernate.getOpenSession(this.baseLog, "EcrituresEtatFinancier");
      Transaction var2 = null;

      try {
         var2 = var1.beginTransaction();
         String var3;
         String var4;
         if (this.cptTabNom.getTablis_id() != 0L && this.cptTabNom.getTablisType() == 0) {
            this.selectedExo.setExecptETDateDebut(this.dateDebCalcul);
            this.selectedExo.setExecptETDateFin(this.dateFinCalcul);
            this.selectedExo.setExecptResultat(this.var_resultatAffecte);
            this.selectedExo.setExecptJrxRsv(this.var_jrxrsv);
            this.selectedExo.setExecptJrxSit(this.var_jrxsit);
            this.selectedExo = this.exercicesComptableDao.modifierExercicesCompta(this.selectedExo, var1);
            if (this.typeTableau == 1 || !this.verifPresenceExercice((long)(this.dateDebCalcul.getYear() + 1900))) {
               this.tabResultats.setTabresNomFr("Chargement et traitement des Ecritures (N)");
               var3 = this.utilDate.dateToStringSQLLight(this.dateDebCalcul);
               var4 = this.utilDate.dateToStringSQLLight(this.dateFinCalcul);
               this.balanceListe = this.ecrituresDao.chargerBalanceMemorisee(var3, var4, this.var_natjrx, this.var_jrxrsv, var1);
            }

            if ((this.typeTableau == 2 || this.cptTabNom.getTablisAnneeAnte() >= 1) && !this.verifPresenceExercice((long)(this.dateDebCalcul.getYear() + 1900 - 1))) {
               new ExercicesComptable();
               long var19 = this.selectedExo.getExecpt_id() - 1L;
               ExercicesComptable var18 = this.exercicesComptableDao.recupererLExoPrecis(var19, var1);
               if (var18 != null) {
                  this.tabResultats.setTabresNomFr("Chargement et traitement des Ecritures (N-1)");
                  new ArrayList();
                  List var6 = this.planComptableDao.chargerLesPlanComptables(var18.getExecpt_id(), var1);
                  String var7 = this.utilDate.dateToStringSQLLight(var18.getExecptDateDebut());
                  String var8 = this.utilDate.dateToStringSQLLight(var18.getExecptDateFin());
                  new ArrayList();
                  List var9 = this.ecrituresDao.chargerBalanceMemorisee(var7, var8, this.var_natjrx, this.var_jrxrsv, var1);
                  if (var9.size() != 0) {
                     new EcrituresLight();

                     for(int var11 = 0; var11 < var9.size(); ++var11) {
                        EcrituresLight var10 = (EcrituresLight)var9.get(var11);
                        if (var6.size() != 0) {
                           for(int var12 = 0; var12 < var6.size(); ++var12) {
                              if (((PlanComptable)var6.get(var12)).getPlcCompte() != null && !((PlanComptable)var6.get(var12)).getPlcCompte().isEmpty() && var10.getEcrCompte() != null && !var10.getEcrCompte().isEmpty() && ((PlanComptable)var6.get(var12)).getPlcCompte().equals(var10.getEcrCompte())) {
                                 if (((PlanComptable)var6.get(var12)).getPlcCompteSyscohada() != null && !((PlanComptable)var6.get(var12)).getPlcCompteSyscohada().isEmpty()) {
                                    var10.setEcrCompte(((PlanComptable)var6.get(var12)).getPlcCompteSyscohada());
                                 }
                                 break;
                              }
                           }
                        }

                        this.balanceListe.add(var10);
                     }
                  }
               }
            }
         } else if (this.cptTabNom.getTablis_id() != 0L && this.cptTabNom.getTablisType() == 1 && this.balanceListe.size() == 0) {
            this.selectedExo.setExecptTBDateDebut(this.dateDebCalcul);
            this.selectedExo.setExecptTBDateFin(this.dateFinCalcul);
            this.selectedExo.setExecptResultat(this.var_resultatAffecte);
            this.selectedExo.setExecptJrxRsv(this.var_jrxrsv);
            this.selectedExo.setExecptJrxSit(this.var_jrxsit);
            this.selectedExo = this.exercicesComptableDao.modifierExercicesCompta(this.selectedExo, var1);
            this.tabResultats.setTabresNomFr("Chargement et traitement des Ecritures (N)");
            var3 = this.utilDate.dateToStringSQLLight(this.dateDebCalcul);
            var4 = this.utilDate.dateToStringSQLLight(this.dateFinCalcul);
            this.balanceListe = this.ecrituresDao.chargerEcritureMemorisee(var3, var4, this.var_natjrx, this.var_jrxrsv, var1);
         }

         var2.commit();
      } catch (HibernateException var16) {
         if (var2 != null) {
            var2.rollback();
         }

         throw var16;
      } finally {
         this.utilInitHibernate.closeSession();
      }

   }

   public boolean verifPresenceExercice(long var1) {
      boolean var3 = false;
      String var4 = "" + var1;
      if (this.balanceListe.size() != 0) {
         for(int var5 = 0; var5 < this.balanceListe.size(); ++var5) {
            if (((EcrituresLight)this.balanceListe.get(var5)).getEcrAnnee().equals(var4)) {
               var3 = true;
               break;
            }
         }
      }

      return var3;
   }

   public void selectionFormule() {
      if (this.dataModelResultat.isRowAvailable()) {
         int var1 = this.dataModelResultat.getRowIndex();
         int var2 = this.dataModelResultat.getRowCount();
         this.tabResultats = (TabResultats)this.dataModelResultat.getRowData();
      }

   }

   public void calculePeriode(int var1) throws ParseException {
      if (var1 >= 0 && var1 <= 19) {
         this.var_exercice = (long)(this.dateFinCalcul.getYear() + 1900);
      } else if (var1 >= 20 && var1 <= 39) {
         this.var_exercice = this.selectedExo.getExecpt_id() - 1L;
      } else if (var1 >= 40 && var1 <= 59) {
         this.var_exercice = this.selectedExo.getExecpt_id() - 2L;
      } else if (var1 >= 60 && var1 <= 79) {
         this.var_exercice = this.selectedExo.getExecpt_id() - 3L;
      } else if (var1 >= 80 && var1 <= 99) {
         this.var_exercice = this.selectedExo.getExecpt_id() - 4L;
      }

      if (var1 == 0) {
         this.var_date_periode_deb = this.utilDate.dateToStringSQLLight(this.dateDebCalcul);
         this.var_date_periode_fin = this.utilDate.dateToStringSQLLight(this.dateFinCalcul);
      } else if (var1 != 1 && var1 != 21 && var1 != 41 && var1 != 61 && var1 != 81) {
         if (var1 != 2 && var1 != 22 && var1 != 42 && var1 != 62 && var1 != 82) {
            if (var1 != 3 && var1 != 23 && var1 != 43 && var1 != 63 && var1 != 83) {
               if (var1 != 4 && var1 != 24 && var1 != 44 && var1 != 64 && var1 != 84) {
                  if (var1 != 5 && var1 != 25 && var1 != 45 && var1 != 65 && var1 != 85) {
                     if (var1 != 6 && var1 != 26 && var1 != 46 && var1 != 66 && var1 != 86) {
                        if (var1 != 7 && var1 != 27 && var1 != 47 && var1 != 67 && var1 != 87) {
                           if (var1 != 8 && var1 != 28 && var1 != 48 && var1 != 68 && var1 != 88) {
                              if (var1 != 9 && var1 != 29 && var1 != 49 && var1 != 69 && var1 != 89) {
                                 if (var1 != 10 && var1 != 30 && var1 != 50 && var1 != 70 && var1 != 90) {
                                    if (var1 != 11 && var1 != 31 && var1 != 51 && var1 != 71 && var1 != 91) {
                                       if (var1 != 12 && var1 != 32 && var1 != 52 && var1 != 72 && var1 != 92) {
                                          if (var1 != 13 && var1 != 33 && var1 != 53 && var1 != 73 && var1 != 93) {
                                             if (var1 != 14 && var1 != 34 && var1 != 54 && var1 != 74 && var1 != 94) {
                                                if (var1 != 15 && var1 != 35 && var1 != 55 && var1 != 75 && var1 != 95) {
                                                   if (var1 != 16 && var1 != 36 && var1 != 56 && var1 != 76 && var1 != 96) {
                                                      if (var1 != 17 && var1 != 37 && var1 != 57 && var1 != 77 && var1 != 97) {
                                                         if (var1 != 18 && var1 != 38 && var1 != 58 && var1 != 78 && var1 != 98) {
                                                            if (var1 != 19 && var1 != 39 && var1 != 59 && var1 != 79 && var1 != 99) {
                                                               if (var1 == 20 || var1 == 40 || var1 == 60 || var1 == 80) {
                                                                  this.var_date_periode_deb = this.var_exercice + "-01-01";
                                                                  this.var_date_periode_fin = this.var_exercice + "-12-31";
                                                               }
                                                            } else {
                                                               this.var_date_periode_deb = this.var_exercice + "-01-01";
                                                               this.var_date_periode_fin = this.var_exercice + "-12-31";
                                                            }
                                                         } else {
                                                            this.var_date_periode_deb = this.var_exercice + "-07-01";
                                                            this.var_date_periode_fin = this.var_exercice + "-12-31";
                                                         }
                                                      } else {
                                                         this.var_date_periode_deb = this.var_exercice + "-01-01";
                                                         this.var_date_periode_fin = this.var_exercice + "-06-30";
                                                      }
                                                   } else {
                                                      this.var_date_periode_deb = this.var_exercice + "-10-01";
                                                      this.var_date_periode_fin = this.var_exercice + "-12-31";
                                                   }
                                                } else {
                                                   this.var_date_periode_deb = this.var_exercice + "-07-01";
                                                   this.var_date_periode_fin = this.var_exercice + "-09-30";
                                                }
                                             } else {
                                                this.var_date_periode_deb = this.var_exercice + "-04-01";
                                                this.var_date_periode_fin = this.var_exercice + "-06-30";
                                             }
                                          } else {
                                             this.var_date_periode_deb = this.var_exercice + "-01-01";
                                             this.var_date_periode_fin = this.var_exercice + "-03-31";
                                          }
                                       } else {
                                          this.var_date_periode_deb = this.var_exercice + "-12-01";
                                          this.var_date_periode_fin = this.var_exercice + "-12-31";
                                       }
                                    } else {
                                       this.var_date_periode_deb = this.var_exercice + "-11-01";
                                       this.var_date_periode_fin = this.var_exercice + "-11-30";
                                    }
                                 } else {
                                    this.var_date_periode_deb = this.var_exercice + "-10-01";
                                    this.var_date_periode_fin = this.var_exercice + "-10-31";
                                 }
                              } else {
                                 this.var_date_periode_deb = this.var_exercice + "-09-01";
                                 this.var_date_periode_fin = this.var_exercice + "-09-30";
                              }
                           } else {
                              this.var_date_periode_deb = this.var_exercice + "-08-01";
                              this.var_date_periode_fin = this.var_exercice + "-08-31";
                           }
                        } else {
                           this.var_date_periode_deb = this.var_exercice + "-07-01";
                           this.var_date_periode_fin = this.var_exercice + "-07-31";
                        }
                     } else {
                        this.var_date_periode_deb = this.var_exercice + "-06-01";
                        this.var_date_periode_fin = this.var_exercice + "-06-30";
                     }
                  } else {
                     this.var_date_periode_deb = this.var_exercice + "-05-01";
                     this.var_date_periode_fin = this.var_exercice + "-05-31";
                  }
               } else {
                  this.var_date_periode_deb = this.var_exercice + "-04-01";
                  this.var_date_periode_fin = this.var_exercice + "-04-30";
               }
            } else {
               this.var_date_periode_deb = this.var_exercice + "-03-01";
               this.var_date_periode_fin = this.var_exercice + "-03-31";
            }
         } else {
            this.var_date_periode_deb = this.var_exercice + "-02-01";
            Date var2 = this.utilDate.stringToDateSQLLight(this.var_date_periode_deb);
            Date var3 = this.utilDate.dateDernierJourMois(var2);
            this.var_date_periode_fin = this.utilDate.dateToStringSQLLight(var3);
         }
      } else {
         this.var_date_periode_deb = this.var_exercice + "-01-01";
         this.var_date_periode_fin = this.var_exercice + "-01-31";
      }

   }

   public void choixNature() {
      this.var_natjrx = "";
      if (!this.var_jrxsit && !this.var_jrxrsv) {
         this.var_natjrx = "(11,12,14)";
      } else if (this.var_jrxsit && !this.var_jrxrsv) {
         this.var_natjrx = "(12,14)";
      } else if (!this.var_jrxsit && this.var_jrxrsv) {
         this.var_natjrx = "(11,14)";
      } else {
         this.var_natjrx = "(14)";
      }

   }

   public void analyseFormule(int var1, CptTabFormule var2, int var3, int var4, int var5, Session var6) throws HibernateException, NamingException, ParseException {
      this.cptTabFormule = var2;
      String var7 = this.cptTabFormule.getTabforFormule();
      String var8 = "";
      String var9 = "";
      if (this.cptTabNom.getTablisType() == 1) {
         var8 = this.cptTabFormule.getTabforBudget();
         if (this.cptTabNom.getTablisAnalytique() != null && !this.cptTabNom.getTablisAnalytique().isEmpty()) {
            var9 = this.cptTabNom.getTablisAnalytique();
         } else {
            var9 = this.cptTabFormule.getTabforAnalytique();
         }
      }

      this.lesAmortissements.clear();
      this.lesEcritures.clear();
      this.elementEnCours = "";
      if (this.tabResultats.getTabresType() == 3) {
         if (this.tabResultats.isTabresMod01() && var4 == 1) {
            var3 = 6;
         } else if (this.tabResultats.isTabresMod02() && var4 == 2) {
            var3 = 6;
         } else if (this.tabResultats.isTabresMod03() && var4 == 3) {
            var3 = 6;
         } else if (this.tabResultats.isTabresMod04() && var4 == 4) {
            var3 = 6;
         } else if (this.tabResultats.isTabresMod05() && var4 == 5) {
            var3 = 6;
         } else if (this.tabResultats.isTabresMod06() && var4 == 6) {
            var3 = 6;
         } else if (this.tabResultats.isTabresMod07() && var4 == 7) {
            var3 = 6;
         } else if (this.tabResultats.isTabresMod08() && var4 == 8) {
            var3 = 6;
         } else if (this.tabResultats.isTabresMod09() && var4 == 9) {
            var3 = 6;
         } else if (this.tabResultats.isTabresMod10() && var4 == 10) {
            var3 = 6;
         } else if (this.tabResultats.isTabresMod11() && var4 == 11) {
            var3 = 6;
         } else if (this.tabResultats.isTabresMod12() && var4 == 12) {
            var3 = 6;
         } else if (this.tabResultats.isTabresMod13() && var4 == 13) {
            var3 = 6;
         } else if (this.tabResultats.isTabresMod14() && var4 == 14) {
            var3 = 6;
         } else if (this.tabResultats.isTabresMod15() && var4 == 15) {
            var3 = 6;
         } else if (this.tabResultats.isTabresMod16() && var4 == 16) {
            var3 = 6;
         } else if (this.tabResultats.isTabresMod17() && var4 == 17) {
            var3 = 6;
         } else if (this.tabResultats.isTabresMod18() && var4 == 18) {
            var3 = 6;
         } else if (this.tabResultats.isTabresMod19() && var4 == 19) {
            var3 = 6;
         } else if (this.tabResultats.isTabresMod20() && var4 == 20) {
            var3 = 6;
         }
      }

      TabResultats var10;
      if (var3 == 6) {
         this.resultat1 = 0.0D;
         if (this.listMemoResultat.size() != 0 && var5 >= 0 && var5 < this.listMemoResultat.size()) {
            new TabResultats();
            var10 = (TabResultats)this.listMemoResultat.get(var5);
            if (var4 == 1) {
               this.resultat1 = var10.getTabresCol01();
            } else if (var4 == 2) {
               this.resultat1 = var10.getTabresCol02();
            } else if (var4 == 3) {
               this.resultat1 = var10.getTabresCol03();
            } else if (var4 == 4) {
               this.resultat1 = var10.getTabresCol04();
            } else if (var4 == 5) {
               this.resultat1 = var10.getTabresCol05();
            } else if (var4 == 6) {
               this.resultat1 = var10.getTabresCol06();
            } else if (var4 == 7) {
               this.resultat1 = var10.getTabresCol07();
            } else if (var4 == 8) {
               this.resultat1 = var10.getTabresCol08();
            } else if (var4 == 9) {
               this.resultat1 = var10.getTabresCol09();
            } else if (var4 == 10) {
               this.resultat1 = var10.getTabresCol10();
            } else if (var4 == 11) {
               this.resultat1 = var10.getTabresCol11();
            } else if (var4 == 12) {
               this.resultat1 = var10.getTabresCol12();
            } else if (var4 == 13) {
               this.resultat1 = var10.getTabresCol13();
            } else if (var4 == 14) {
               this.resultat1 = var10.getTabresCol14();
            } else if (var4 == 15) {
               this.resultat1 = var10.getTabresCol15();
            } else if (var4 == 16) {
               this.resultat1 = var10.getTabresCol16();
            } else if (var4 == 17) {
               this.resultat1 = var10.getTabresCol17();
            } else if (var4 == 18) {
               this.resultat1 = var10.getTabresCol18();
            } else if (var4 == 19) {
               this.resultat1 = var10.getTabresCol19();
            } else if (var4 == 20) {
               this.resultat1 = var10.getTabresCol20();
            }
         }
      } else if (var3 != 7 && var3 != 8) {
         if (var7.equalsIgnoreCase("INV()")) {
            this.inv();
         } else if (var7.equalsIgnoreCase("ABS()")) {
            this.abs();
         } else if (var7.startsWith("ARR(") && var7.endsWith(")")) {
            this.arr(var7);
         } else if (var7.equalsIgnoreCase("INT()")) {
            this.entier();
         } else if (var7.equalsIgnoreCase("MOD()")) {
            this.mod();
         } else if (var7.length() == 1) {
            this.selectOperateur(var7);
         } else if (var7.startsWith("SOMH(") && var7.endsWith(")")) {
            this.somh(var7);
         } else if (var7.startsWith("DIFH(") && var7.endsWith(")")) {
            this.difh(var7);
         } else if (var7.startsWith("SOMV(") && var7.endsWith(")")) {
            this.somv(var7, var4);
         } else if (var7.startsWith("CEL(") && var7.endsWith(")")) {
            this.cel(var7, var4, var1, var6);
         } else if (var7.startsWith("VAL(") && var7.endsWith(")")) {
            this.val(var7);
         } else if (var7.startsWith("COL>0")) {
            this.colsup();
         } else if (var7.startsWith("COL<0")) {
            this.colinf();
         } else if (var7.startsWith("STOT(") && var7.endsWith(")")) {
            this.stot(var5, var4);
         } else if (var7.startsWith("TTAB(") && var7.endsWith(")")) {
            this.ttab(var4);
         } else if (var7.startsWith("VAR(") && var7.endsWith(")")) {
            this.var(var7, var5);
         } else if (var7.startsWith("COMPTE(") && var7.endsWith(")") && (var8 == null || var8.isEmpty()) && (var9 == null || var9.isEmpty())) {
            this.compte(var1, var7, var3, var6);
         } else if (!var7.startsWith("COMPTE(") || !var7.endsWith(")") || !var8.startsWith("BUDGET(") || !var8.endsWith(")") || var9 != null && !var9.isEmpty()) {
            if (var7.startsWith("COMPTE(") && var7.endsWith(")") && (var8 == null || var8.isEmpty()) && (var9.startsWith("ACT(") || var9.startsWith("AC1(") || var9.startsWith("AC2(") || var9.startsWith("AC3(") || var9.startsWith("ACX(")) && var9.endsWith(")")) {
               this.compteAnalytique(var1, var7, var9, var3, var6);
            } else if ((var7 == null || var7.isEmpty()) && (var8 == null || var8.isEmpty()) && (var9.startsWith("ACT(") || var9.startsWith("AC1(") || var9.startsWith("AC2(") || var9.startsWith("AC3(") || var9.startsWith("ACX(")) && var9.endsWith(")")) {
               this.analytiqueSimple(var1, var9, var3, var6);
            } else if ((var7 == null || var7.isEmpty()) && var8.startsWith("BUDGET(") && var8.endsWith(")") && (var9.startsWith("ACT(") || var9.startsWith("AC1(") || var9.startsWith("AC2(") || var9.startsWith("AC3(") || var9.startsWith("ACX(")) && var9.endsWith(")")) {
               this.analytiqueBudget(var1, var9, var8, var3, var6);
            } else if (var7.startsWith("AMACH(") && var7.endsWith(")")) {
               this.amach(var7, var6);
            } else if (var7.startsWith("AMDOT(") && var7.endsWith(")")) {
               this.amdot(var7, var6);
            } else if (var7.startsWith("AMANT(") && var7.endsWith(")")) {
               this.amant(var7, var6);
            } else if (var7.startsWith("AMRES(") && var7.endsWith(")")) {
               this.amres(var7, var6);
            } else if (var7.startsWith("AMCES(") && var7.endsWith(")")) {
               this.amces(var7, var6);
            } else if (var7.startsWith("EXEC(") && var7.endsWith(")")) {
               this.exec(var7, var1, var3, var9, var2, var6);
            } else if (var7.startsWith("ORIG(") && var7.endsWith(")")) {
               this.orig(var7, var1, var3, var9, var2, var6);
            } else if (var7.startsWith("DEST(") && var7.endsWith(")")) {
               this.dest(var7, var1, var3, var9, var2, var6);
            } else if (var7.startsWith("RUBRIQUE(") && var7.endsWith(")")) {
               this.rubrique(var7, var1, var3, var9, var2, var6);
            } else if (var7.startsWith("NAT_RUBRIQUE(") && var7.endsWith(")")) {
               this.nat_rubrique(var7, var1, var3, var9, var2, var6);
            } else if (var7.startsWith("CABLV(") && var7.endsWith(")")) {
               this.cablv(var1, var7, var9, var3, var6);
            } else if (var7.startsWith("CABRT(") && var7.endsWith(")")) {
               this.cabrt(var1, var7, var9, var3, var6);
            } else if (var7.startsWith("CABST(") && var7.endsWith(")")) {
               this.cabst(var1, var7, var9, var3, var6);
            } else if (var7.startsWith("CABEN(") && var7.endsWith(")")) {
               this.caben(var1, var7, var9, var3, var6);
            } else if (var7.startsWith("CAFAC(") && var7.endsWith(")")) {
               this.cafac(var1, var7, var9, var3, var6);
            } else if (var7.startsWith("CANDB(") && var7.endsWith(")")) {
               this.candb(var1, var7, var9, var3, var6);
            } else if (var7.startsWith("CAAVR(") && var7.endsWith(")")) {
               this.caavr(var1, var7, var9, var3, var6);
            } else if (var7.startsWith("CAACH(") && var7.endsWith(")")) {
               this.caach(var1, var7, var9, var3, var6);
            } else if (!var7.startsWith("CAPRD(") || !var7.endsWith(")")) {
               if (var7.startsWith("QTBLV(") && var7.endsWith(")")) {
                  this.qtblv(var1, var7, var9, var3, var6);
               } else if (var7.startsWith("QTBRT(") && var7.endsWith(")")) {
                  this.qtbrt(var1, var7, var9, var3, var6);
               } else if (var7.startsWith("QTBST(") && var7.endsWith(")")) {
                  this.qtbst(var1, var7, var9, var3, var6);
               } else if (var7.startsWith("QTBEN(") && var7.endsWith(")")) {
                  this.qtben(var1, var7, var9, var3, var6);
               } else if (var7.startsWith("QTFAC(") && var7.endsWith(")")) {
                  this.qtfac(var1, var7, var9, var3, var6);
               } else if (var7.startsWith("QTNDB(") && var7.endsWith(")")) {
                  this.qtndb(var1, var7, var9, var3, var6);
               } else if (var7.startsWith("QTAVR(") && var7.endsWith(")")) {
                  this.qtavr(var1, var7, var9, var3, var6);
               } else if (var7.startsWith("QTACH(") && var7.endsWith(")")) {
                  this.qtach(var1, var7, var9, var3, var6);
               } else if (!var7.startsWith("QTPRD(") || !var7.endsWith(")")) {
                  if (var7.startsWith("VLBLV(") && var7.endsWith(")")) {
                     this.vlblv(var1, var7, var9, var3, var6);
                  } else if (var7.startsWith("VLBRT(") && var7.endsWith(")")) {
                     this.vlbrt(var1, var7, var9, var3, var6);
                  } else if (var7.startsWith("VLBST(") && var7.endsWith(")")) {
                     this.vlbst(var1, var7, var9, var3, var6);
                  } else if (var7.startsWith("VLBEN(") && var7.endsWith(")")) {
                     this.vlben(var1, var7, var9, var3, var6);
                  } else if (var7.startsWith("VLFAC(") && var7.endsWith(")")) {
                     this.vlfac(var1, var7, var9, var3, var6);
                  } else if (var7.startsWith("VLNDB(") && var7.endsWith(")")) {
                     this.vlndb(var1, var7, var9, var3, var6);
                  } else if (var7.startsWith("VLAVR(") && var7.endsWith(")")) {
                     this.vlavr(var1, var7, var9, var3, var6);
                  } else if (var7.startsWith("VLACH(") && var7.endsWith(")")) {
                     this.vlach(var1, var7, var9, var3, var6);
                  } else if (!var7.startsWith("VLPRD(") || !var7.endsWith(")")) {
                     if (var7.startsWith("SAL_NBR(") && var7.endsWith(")")) {
                        this.sal_nbr(var1, var7, var6);
                     } else if (var7.startsWith("SAL_VAL(") && var7.endsWith(")")) {
                        this.sal_val(var1, var7, var6);
                     }
                  }
               }
            }
         } else {
            this.compteBudget(var1, var7, var9, var8, var3, var6);
         }
      } else {
         this.resultat3 = "";
         if (this.listMemoResultat.size() != 0 && var5 >= 0 && var5 < this.listMemoResultat.size()) {
            new TabResultats();
            var10 = (TabResultats)this.listMemoResultat.get(var5);
            if (var4 == 1) {
               this.resultat3 = var10.getTabresCon01();
            } else if (var4 == 2) {
               this.resultat3 = var10.getTabresCon02();
            } else if (var4 == 3) {
               this.resultat3 = var10.getTabresCon03();
            } else if (var4 == 4) {
               this.resultat3 = var10.getTabresCon04();
            } else if (var4 == 5) {
               this.resultat3 = var10.getTabresCon05();
            } else if (var4 == 6) {
               this.resultat3 = var10.getTabresCon06();
            } else if (var4 == 7) {
               this.resultat3 = var10.getTabresCon07();
            } else if (var4 == 8) {
               this.resultat3 = var10.getTabresCon08();
            } else if (var4 == 9) {
               this.resultat3 = var10.getTabresCon09();
            } else if (var4 == 10) {
               this.resultat3 = var10.getTabresCon10();
            } else if (var4 == 11) {
               this.resultat3 = var10.getTabresCon11();
            } else if (var4 == 12) {
               this.resultat3 = var10.getTabresCon12();
            } else if (var4 == 13) {
               this.resultat3 = var10.getTabresCon13();
            } else if (var4 == 14) {
               this.resultat3 = var10.getTabresCon14();
            } else if (var4 == 15) {
               this.resultat3 = var10.getTabresCon15();
            } else if (var4 == 16) {
               this.resultat3 = var10.getTabresCon16();
            } else if (var4 == 17) {
               this.resultat3 = var10.getTabresCon17();
            } else if (var4 == 18) {
               this.resultat3 = var10.getTabresCon18();
            } else if (var4 == 19) {
               this.resultat3 = var10.getTabresCon19();
            } else if (var4 == 20) {
               this.resultat3 = var10.getTabresCon20();
            }
         }
      }

   }

   public void saveNoteExplicative() throws HibernateException, NamingException {
      if (this.cptTabNom != null) {
         Session var1 = this.utilInitHibernate.getOpenSession(this.baseLog, "EtatFinancier");
         Transaction var2 = null;

         try {
            var2 = var1.beginTransaction();
            new ArrayList();
            List var3 = this.tabResultatsDao.chargerMesTabResultats(this.cptTabNom.getTablisCode(), this.selectedExo.getExecpt_id(), var1);
            if (var3.size() != 0) {
               new TabResultats();

               for(int var5 = 0; var5 < var3.size(); ++var5) {
                  TabResultats var4 = (TabResultats)var3.get(var5);
                  if (var5 == 0) {
                     var4.setTabresNotes(this.notesExplicatives);
                  } else {
                     var4.setTabresNotes("");
                  }

                  this.tabResultatsDao.majTabResulats(var4, var1);
               }
            }

            var2.commit();
         } catch (HibernateException var9) {
            if (var2 != null) {
               var2.rollback();
            }

            throw var9;
         } finally {
            this.utilInitHibernate.closeSession();
         }
      }

   }

   public void inv() {
      this.resultat1 *= -1.0D;
   }

   public void abs() {
      this.resultat1 = Math.abs(this.resultat1);
   }

   public void arr(String var1) {
      if (var1.equalsIgnoreCase("ARR(1)")) {
         this.resultat1 = this.utilNombre.myRound(this.resultat1, 1);
      } else if (var1.equalsIgnoreCase("ARR(2)")) {
         this.resultat1 = this.utilNombre.myRound(this.resultat1, 2);
      } else {
         this.resultat1 = (double)Math.round(this.resultat1);
      }

   }

   public void entier() {
      int var1 = (int)this.resultat1;
      this.resultat1 = (double)Float.parseFloat("" + var1);
   }

   public void mod() {
      if (this.resultat2 != 0.0D) {
         this.resultat1 = Math.IEEEremainder(this.resultat1, this.resultat2);
         this.resultat2 = 0.0D;
      }

   }

   public void selectOperateur(String var1) {
      if (var1.equalsIgnoreCase("=")) {
         this.operateur = "=";
         this.resultat2 = this.resultat1;
         this.resultat1 = 0.0D;
      } else if (var1.equalsIgnoreCase("-")) {
         this.operateur = "-";
         this.resultat2 = this.resultat1;
         this.resultat1 = 0.0D;
      } else if (var1.equalsIgnoreCase("*")) {
         this.operateur = "*";
         this.resultat2 = this.resultat1;
         this.resultat1 = 0.0D;
      } else if (var1.equalsIgnoreCase("/")) {
         this.operateur = "/";
         this.resultat2 = this.resultat1;
         this.resultat1 = 0.0D;
      } else {
         this.operateur = "+";
         this.resultat2 = this.resultat1;
         this.resultat1 = 0.0D;
      }

   }

   public void somh(String var1) {
      String var2 = var1.substring(5, var1.length() - 1);
      if (var2.contains(":")) {
         String[] var3 = var2.split(":");
         String var4 = this.filtreNumerique(var3[0]);
         if (var4 != null && !var4.isEmpty()) {
            String var5 = this.filtreNumerique(var3[1]);
            if (var5 != null && !var5.isEmpty()) {
               int var6 = Integer.parseInt(var4);
               int var7 = Integer.parseInt(var5);
               this.recuperSomH(var6, var7, this.tabResultats);
               this.calculByOperateur();
            } else {
               this.resultat1 = 9.99999999E8D;
            }
         } else {
            this.resultat1 = 9.99999999E8D;
         }
      } else {
         this.resultat1 = 0.0D;
      }

   }

   public void difh(String var1) {
      String var2 = var1.substring(5, var1.length() - 1);
      if (var2.contains(":")) {
         String[] var3 = var2.split(":");
         int var4 = Integer.parseInt(var3[0]);
         int var5 = Integer.parseInt(var3[1]);
         this.recuperDifH(var4, var5, this.tabResultats);
         this.calculByOperateur();
      } else {
         this.resultat1 = 0.0D;
      }

   }

   public void somv(String var1, int var2) {
      String var3 = var1.substring(5, var1.length() - 1);
      if (var3.contains(":")) {
         String[] var4 = var3.split(":");
         String var5 = var4[0];
         String var6 = var4[1];
         this.recuperSomV(var5, var6, var2, this.lesResultats);
         this.calculByOperateur();
      } else {
         this.resultat1 = 0.0D;
      }

   }

   public void cel(String var1, int var2, int var3, Session var4) throws HibernateException, NamingException {
      String var5 = var1.substring(4, var1.length() - 1);
      if (var5.contains(":")) {
         String[] var6;
         String var7;
         String var8;
         String var10;
         String var11;
         if (var5.contains("=")) {
            var6 = var5.split("=");
            var7 = var6[0];
            var8 = var6[1];
            String[] var9 = var8.split(":");
            var10 = var9[0];
            var11 = var9[1];
            boolean var12 = false;
            int var18;
            if (var11.equals("*")) {
               var18 = var2;
            } else {
               var18 = Integer.parseInt(var9[1]);
            }

            if (var18 == 1 || var18 == 2 || var18 == 3 || var18 == 4 || var18 == 5 || var18 == 6 || var18 == 7 || var18 == 8 || var18 == 9 || var18 == 10 || var18 == 11 || var18 == 12 || var18 == 13 || var18 == 14 || var18 == 15 || var18 == 16 || var18 == 17 || var18 == 18 || var18 == 19 || var18 == 20) {
               if (var3 <= 19) {
                  this.recuperCelTabRefCol(var7, var10, var18, var4);
               } else {
                  String var13 = this.var_date_periode_deb;
                  String var14 = this.var_date_periode_fin;
                  this.recuperCelTabRefCol(var7, var10, var18, var13, var14, var4);
               }

               this.calculByOperateur();
            }
         } else {
            var6 = var5.split(":");
            var7 = var6[0];
            var8 = var6[1];
            boolean var15 = false;
            int var16;
            if (var8.equals("*")) {
               var16 = var2;
            } else {
               var16 = Integer.parseInt(var6[1]);
            }

            if (var16 == 1 || var16 == 2 || var16 == 3 || var16 == 4 || var16 == 5 || var16 == 6 || var16 == 7 || var16 == 8 || var16 == 9 || var16 == 10 || var16 == 11 || var16 == 12 || var16 == 13 || var16 == 14 || var16 == 15 || var16 == 16 || var16 == 17 || var16 == 18 || var16 == 19 || var16 == 20) {
               if (var3 <= 19) {
                  int var17 = this.lesResultats.size() - 1;
                  if (var17 + 1 != this.lesResultats.size()) {
                     this.lesResultats.add(this.tabResultats);
                  }

                  this.recuperCelRefCol(var7, var16, this.lesResultats);
                  this.calculByOperateur();
                  if (var17 + 1 != this.lesResultats.size()) {
                     this.lesResultats.remove(var17);
                  }
               } else {
                  var10 = this.var_date_periode_deb;
                  var11 = this.var_date_periode_fin;
                  this.recuperCelTabRefCol(this.tabResultats.getTabresCode(), var7, var16, var10, var11, var4);
                  this.calculByOperateur();
               }
            }
         }
      } else {
         this.resultat1 = 0.0D;
      }

   }

   public void val(String var1) {
      if (var1.endsWith("VAL()")) {
         this.resultat1 = 0.0D;
      } else {
         if (var1.contains(",")) {
            String var2 = var1.replace(",", ".");
            var1 = var2;
         }

         this.resultat1 = Double.parseDouble(var1.substring(4, var1.length() - 1));
         this.calculByOperateur();
      }

   }

   public void colsup() {
      if (this.resultat1 < 0.0D) {
         this.resultat1 = 0.0D;
      }

   }

   public void colinf() {
      if (this.resultat1 <= 0.0D) {
         this.resultat1 = Math.abs(this.resultat1);
      } else {
         this.resultat1 = 0.0D;
      }

   }

   public void stot(int var1, int var2) {
      this.recuperSousTotal(var1, var2, this.lesResultats);
      this.calculByOperateur();
   }

   public void ttab(int var1) {
      this.recuperTotalTableau(var1, this.lesResultats);
      this.calculByOperateur();
   }

   public void var(String var1, int var2) {
      String var3 = var1.substring(4, var1.length() - 1);
      if (var3.contains(":")) {
         String[] var4 = var3.split(":");
         String var5 = var4[0];
         String var6 = var4[1];
         double var7 = 0.0D;
         if (var5.equals("1")) {
            var7 = ((TabResultats)this.lesResultats.get(var2)).getTabresCol01();
         } else if (var5.equals("2")) {
            var7 = ((TabResultats)this.lesResultats.get(var2)).getTabresCol02();
         } else if (var5.equals("3")) {
            var7 = ((TabResultats)this.lesResultats.get(var2)).getTabresCol03();
         } else if (var5.equals("4")) {
            var7 = ((TabResultats)this.lesResultats.get(var2)).getTabresCol04();
         } else if (var5.equals("5")) {
            var7 = ((TabResultats)this.lesResultats.get(var2)).getTabresCol05();
         } else if (var5.equals("6")) {
            var7 = ((TabResultats)this.lesResultats.get(var2)).getTabresCol06();
         } else if (var5.equals("7")) {
            var7 = ((TabResultats)this.lesResultats.get(var2)).getTabresCol07();
         } else if (var5.equals("8")) {
            var7 = ((TabResultats)this.lesResultats.get(var2)).getTabresCol08();
         } else if (var5.equals("9")) {
            var7 = ((TabResultats)this.lesResultats.get(var2)).getTabresCol09();
         } else if (var5.equals("10")) {
            var7 = ((TabResultats)this.lesResultats.get(var2)).getTabresCol10();
         } else if (var5.equals("11")) {
            var7 = ((TabResultats)this.lesResultats.get(var2)).getTabresCol11();
         } else if (var5.equals("12")) {
            var7 = ((TabResultats)this.lesResultats.get(var2)).getTabresCol12();
         } else if (var5.equals("13")) {
            var7 = ((TabResultats)this.lesResultats.get(var2)).getTabresCol13();
         } else if (var5.equals("14")) {
            var7 = ((TabResultats)this.lesResultats.get(var2)).getTabresCol14();
         } else if (var5.equals("15")) {
            var7 = ((TabResultats)this.lesResultats.get(var2)).getTabresCol15();
         } else if (var5.equals("16")) {
            var7 = ((TabResultats)this.lesResultats.get(var2)).getTabresCol16();
         } else if (var5.equals("17")) {
            var7 = ((TabResultats)this.lesResultats.get(var2)).getTabresCol17();
         } else if (var5.equals("18")) {
            var7 = ((TabResultats)this.lesResultats.get(var2)).getTabresCol18();
         } else if (var5.equals("19")) {
            var7 = ((TabResultats)this.lesResultats.get(var2)).getTabresCol19();
         } else if (var5.equals("20")) {
            var7 = ((TabResultats)this.lesResultats.get(var2)).getTabresCol20();
         }

         double var9 = 0.0D;
         if (var6.equals("1")) {
            var9 = ((TabResultats)this.lesResultats.get(var2)).getTabresCol01();
         } else if (var6.equals("2")) {
            var9 = ((TabResultats)this.lesResultats.get(var2)).getTabresCol02();
         } else if (var6.equals("3")) {
            var9 = ((TabResultats)this.lesResultats.get(var2)).getTabresCol03();
         } else if (var6.equals("4")) {
            var9 = ((TabResultats)this.lesResultats.get(var2)).getTabresCol04();
         } else if (var6.equals("5")) {
            var9 = ((TabResultats)this.lesResultats.get(var2)).getTabresCol05();
         } else if (var6.equals("6")) {
            var9 = ((TabResultats)this.lesResultats.get(var2)).getTabresCol06();
         } else if (var6.equals("7")) {
            var9 = ((TabResultats)this.lesResultats.get(var2)).getTabresCol07();
         } else if (var6.equals("8")) {
            var9 = ((TabResultats)this.lesResultats.get(var2)).getTabresCol08();
         } else if (var6.equals("9")) {
            var9 = ((TabResultats)this.lesResultats.get(var2)).getTabresCol09();
         } else if (var6.equals("10")) {
            var9 = ((TabResultats)this.lesResultats.get(var2)).getTabresCol10();
         } else if (var6.equals("11")) {
            var9 = ((TabResultats)this.lesResultats.get(var2)).getTabresCol11();
         } else if (var6.equals("12")) {
            var9 = ((TabResultats)this.lesResultats.get(var2)).getTabresCol12();
         } else if (var6.equals("13")) {
            var9 = ((TabResultats)this.lesResultats.get(var2)).getTabresCol13();
         } else if (var6.equals("14")) {
            var9 = ((TabResultats)this.lesResultats.get(var2)).getTabresCol14();
         } else if (var6.equals("15")) {
            var9 = ((TabResultats)this.lesResultats.get(var2)).getTabresCol15();
         } else if (var6.equals("16")) {
            var9 = ((TabResultats)this.lesResultats.get(var2)).getTabresCol16();
         } else if (var6.equals("17")) {
            var9 = ((TabResultats)this.lesResultats.get(var2)).getTabresCol17();
         } else if (var6.equals("18")) {
            var9 = ((TabResultats)this.lesResultats.get(var2)).getTabresCol18();
         } else if (var6.equals("19")) {
            var9 = ((TabResultats)this.lesResultats.get(var2)).getTabresCol19();
         } else if (var6.equals("20")) {
            var9 = ((TabResultats)this.lesResultats.get(var2)).getTabresCol20();
         }

         if (var9 != 0.0D) {
            this.resultat1 = this.utilNombre.myRound((var7 - var9) / var9 * 100.0D, 2);
         }

         this.calculByOperateur();
      } else {
         this.resultat1 = 0.0D;
      }

   }

   public void compte(int var1, String var2, int var3, Session var4) throws HibernateException, NamingException, ParseException {
      String var5 = var2.substring(7, var2.length() - 1);
      this.lePlanComptable.clear();
      if (var5.contains(";")) {
         new ArrayList();
         String[] var7 = var5.split(";");
         new Ecritures();

         for(int var9 = 0; var9 < var7.length; ++var9) {
            List var6 = this.chargerEcrituresByNumCpteStartWith(var1, var7[var9], (String)null, var3, this.cptTabFormule, var4);

            for(int var10 = 0; var10 < var6.size(); ++var10) {
               Ecritures var8 = (Ecritures)var6.get(var10);
               this.lesEcritures.add(var8);
            }
         }
      } else {
         this.lesEcritures = this.chargerEcrituresByNumCpteStartWith(var1, var5, (String)null, var3, this.cptTabFormule, var4);
      }

      this.calculSoldeforCompte(var1, this.lesEcritures, var3, var4);
      this.calculByOperateur();
   }

   public void compteAnalytique(int var1, String var2, String var3, int var4, Session var5) throws HibernateException, NamingException, ParseException {
      String var6 = var2.substring(7, var2.length() - 1);
      this.lePlanComptable.clear();
      if (var6.contains(";")) {
         new ArrayList();
         String[] var8 = var6.split(";");
         new Ecritures();

         for(int var10 = 0; var10 < var8.length; ++var10) {
            List var7 = this.chargerEcrituresByNumCpteStartWith(var1, var8[var10], var3, var4, this.cptTabFormule, var5);

            for(int var11 = 0; var11 < var7.size(); ++var11) {
               Ecritures var9 = (Ecritures)var7.get(var11);
               this.lesEcritures.add(var9);
            }
         }
      } else {
         this.lesEcritures = this.chargerEcrituresByNumCpteStartWith(var1, var6, var3, var4, this.cptTabFormule, var5);
      }

      this.calculSoldeforCompte(var1, this.lesEcritures, var4, var5);
      this.calculByOperateur();
   }

   public void compteBudget(int var1, String var2, String var3, String var4, int var5, Session var6) throws HibernateException, NamingException, ParseException {
      String var7 = var2.substring(7, var2.length() - 1);
      ArrayList var8 = new ArrayList();
      if (var7.contains(";")) {
         String[] var9 = var7.split(";");

         for(int var10 = 0; var10 < var9.length; ++var10) {
            var8.add(var9[var10]);
         }

         this.lesBudgets = this.chargerBudgetsByNumCpteStartWith(var1, var8, var5, var3, var4, var6);
      } else {
         var8.add(var7);
         this.lesBudgets = this.chargerBudgetsByNumCpteStartWith(var1, var8, var5, var3, var4, var6);
      }

      this.calculSoldeforCompte(var1, this.lesBudgets, var5, var6);
      this.calculByOperateur();
   }

   public void analytiqueSimple(int var1, String var2, int var3, Session var4) throws HibernateException, NamingException, ParseException {
      this.lesEcritures = this.chargerEcrituresByNumCpteStartWith(var1, (String)null, var2, var3, this.cptTabFormule, var4);
      this.calculSoldeforCompte(var1, this.lesEcritures, var3, var4);
      this.calculByOperateur();
   }

   public void analytiqueBudget(int var1, String var2, String var3, int var4, Session var5) throws HibernateException, NamingException, ParseException {
      ArrayList var6 = new ArrayList();
      this.lesBudgets = this.chargerBudgetsByNumCpteStartWith(var1, var6, var4, var2, var3, var5);
      this.calculSoldeforCompte(var1, this.lesBudgets, var4, var5);
      this.calculByOperateur();
   }

   public void amach(String var1, Session var2) throws HibernateException, NamingException {
      String var3 = var1.substring(6, var1.length() - 1);
      if (var3.contains(";")) {
         String[] var4 = var3.split(";");

         for(int var5 = 0; var5 < var4.length; ++var5) {
            this.lesAmortissements = this.amortissementsDao.chargerAmortissementByNumCpteStartWith(var2, var4[var5]);
         }
      } else {
         this.lesAmortissements = this.amortissementsDao.chargerAmortissementByNumCpteStartWith(var2, var3);
      }

      this.calculCumulAmort(this.lesAmortissements, 1);
   }

   public void amdot(String var1, Session var2) throws HibernateException, NamingException {
      String var3 = var1.substring(6, var1.length() - 1);
      if (var3.contains(";")) {
         String[] var4 = var3.split(";");

         for(int var5 = 0; var5 < var4.length; ++var5) {
            this.lesAmortissements = this.amortissementsDao.chargerAmortissementByNumCpteStartWith(var2, var4[var5]);
         }
      } else {
         this.lesAmortissements = this.amortissementsDao.chargerAmortissementByNumCpteStartWith(var2, var3);
      }

      this.calculCumulAmort(this.lesAmortissements, 2);
   }

   public void amant(String var1, Session var2) throws HibernateException, NamingException {
      String var3 = var1.substring(6, var1.length() - 1);
      if (var3.contains(";")) {
         String[] var4 = var3.split(";");

         for(int var5 = 0; var5 < var4.length; ++var5) {
            this.lesAmortissements = this.amortissementsDao.chargerAmortissementByNumCpteStartWith(var2, var4[var5]);
         }
      } else {
         this.lesAmortissements = this.amortissementsDao.chargerAmortissementByNumCpteStartWith(var2, var3);
      }

      this.calculCumulAmort(this.lesAmortissements, 3);
   }

   public void amres(String var1, Session var2) throws HibernateException, NamingException {
      String var3 = var1.substring(6, var1.length() - 1);
      if (var3.contains(";")) {
         String[] var4 = var3.split(";");

         for(int var5 = 0; var5 < var4.length; ++var5) {
            this.lesAmortissements = this.amortissementsDao.chargerAmortissementByNumCpteStartWith(var2, var4[var5]);
         }
      } else {
         this.lesAmortissements = this.amortissementsDao.chargerAmortissementByNumCpteStartWith(var2, var3);
      }

      this.calculCumulAmort(this.lesAmortissements, 4);
   }

   public void amces(String var1, Session var2) throws HibernateException, NamingException {
      String var3 = var1.substring(6, var1.length() - 1);
      if (var3.contains(";")) {
         String[] var4 = var3.split(";");

         for(int var5 = 0; var5 < var4.length; ++var5) {
            this.lesAmortissements = this.amortissementsDao.chargerAmortissementByNumCpteStartWith(var2, var4[var5]);
         }
      } else {
         this.lesAmortissements = this.amortissementsDao.chargerAmortissementByNumCpteStartWith(var2, var3);
      }

      this.calculCumulAmort(this.lesAmortissements, 5);
   }

   public void exec(String var1, int var2, int var3, String var4, CptTabFormule var5, Session var6) throws HibernateException, NamingException, ParseException {
      String var7 = var1.substring(5, var1.length() - 1);
      this.calculePeriode(var2);
      Date var8 = null;
      Date var9 = null;
      if (var2 == 19) {
         var8 = this.utilDate.stringToDateSQLLight(this.var_exercice + "-01-01");
         var9 = this.utilDate.stringToDateSQLLight(this.var_exercice + "-12-31");
      } else if (var2 == 39) {
         var8 = this.utilDate.stringToDateSQLLight(this.var_exercice + "-01-01");
         var9 = this.utilDate.stringToDateSQLLight(this.var_exercice + "-12-31");
      } else if (var2 == 59) {
         var8 = this.utilDate.stringToDateSQLLight(this.var_exercice + "-01-01");
         var9 = this.utilDate.stringToDateSQLLight(this.var_exercice + "-12-31");
      } else {
         var8 = this.utilDate.stringToDateSQLLight(this.var_date_periode_deb);
         var9 = this.utilDate.stringToDateSQLLight(this.var_date_periode_fin);
      }

      ArrayList var10 = new ArrayList();
      ArrayList var11 = new ArrayList();
      ArrayList var12 = new ArrayList();
      ArrayList var13 = new ArrayList();
      ArrayList var14 = new ArrayList();
      ArrayList var15 = new ArrayList();
      ArrayList var16 = new ArrayList();
      ArrayList var17 = new ArrayList();
      ArrayList var18 = new ArrayList();
      ArrayList var19 = new ArrayList();
      ArrayList var20 = new ArrayList();
      ArrayList var21 = new ArrayList();
      String[] var23;
      if (var4 != null && !var4.isEmpty()) {
         String var22;
         int var24;
         if (var4 != null && !var4.isEmpty() && var4.startsWith("ACT(") && var4.endsWith(")")) {
            var22 = var4.substring(4, var4.length() - 1);
            if (var22.contains(";")) {
               var23 = var22.split(";");

               for(var24 = 0; var24 < var23.length; ++var24) {
                  var10.add(var23[var24]);
               }
            } else {
               var10.add(var22);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.startsWith("AC1(") && var4.endsWith(")")) {
            var22 = var4.substring(4, var4.length() - 1);
            if (var22.contains(";")) {
               var23 = var22.split(";");

               for(var24 = 0; var24 < var23.length; ++var24) {
                  var11.add(var23[var24]);
               }
            } else {
               var11.add(var22);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.startsWith("AC2(") && var4.endsWith(")")) {
            var22 = var4.substring(4, var4.length() - 1);
            if (var22.contains(";")) {
               var23 = var22.split(";");

               for(var24 = 0; var24 < var23.length; ++var24) {
                  var12.add(var23[var24]);
               }
            } else {
               var12.add(var22);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.startsWith("AC3(") && var4.endsWith(")")) {
            var22 = var4.substring(4, var4.length() - 1);
            if (var22.contains(";")) {
               var23 = var22.split(";");

               for(var24 = 0; var24 < var23.length; ++var24) {
                  var13.add(var23[var24]);
               }
            } else {
               var13.add(var22);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.startsWith("ACX(") && var4.endsWith(")")) {
            var22 = var4.substring(4, var4.length() - 1);
            if (var22.contains(";")) {
               var23 = var22.split(";");

               for(var24 = 0; var24 < var23.length; ++var24) {
                  if (var24 == 0) {
                     var11.add(var23[var24]);
                  } else if (var24 == 1) {
                     var12.add(var23[var24]);
                  } else if (var24 == 2) {
                     var13.add(var23[var24]);
                  }
               }
            } else {
               var11.add(var22);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.contains("SIT")) {
            var22 = var4.substring(4, var4.length() - 1);
            if (var22.contains(";")) {
               var23 = var22.split(";");

               for(var24 = 0; var24 < var23.length; ++var24) {
                  var14.add(var23[var24]);
               }
            } else {
               var14.add(var22);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.contains("DEP")) {
            var22 = var4.substring(4, var4.length() - 1);
            if (var22.contains(";")) {
               var23 = var22.split(";");

               for(var24 = 0; var24 < var23.length; ++var24) {
                  var15.add(var23[var24]);
               }
            } else {
               var15.add(var22);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.contains("SER")) {
            var22 = var4.substring(4, var4.length() - 1);
            if (var22.contains(";")) {
               var23 = var22.split(";");

               for(var24 = 0; var24 < var23.length; ++var24) {
                  var16.add(var23[var24]);
               }
            } else {
               var16.add(var22);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.contains("REG")) {
            var22 = var4.substring(4, var4.length() - 1);
            if (var22.contains(";")) {
               var23 = var22.split(";");

               for(var24 = 0; var24 < var23.length; ++var24) {
                  var17.add(var23[var24]);
               }
            } else {
               var17.add(var22);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.contains("SEC")) {
            var22 = var4.substring(4, var4.length() - 1);
            if (var22.contains(";")) {
               var23 = var22.split(";");

               for(var24 = 0; var24 < var23.length; ++var24) {
                  var18.add(var23[var24]);
               }
            } else {
               var18.add(var22);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.contains("PDV")) {
            var22 = var4.substring(4, var4.length() - 1);
            if (var22.contains(";")) {
               var23 = var22.split(";");

               for(var24 = 0; var24 < var23.length; ++var24) {
                  var19.add(var23[var24]);
               }
            } else {
               var19.add(var22);
            }
         }

         if (var4 != null && !var4.isEmpty() && var4.contains("DOS")) {
            var22 = var4.substring(4, var4.length() - 1);
            if (var22.contains(";")) {
               var23 = var22.split(";");

               for(var24 = 0; var24 < var23.length; ++var24) {
                  var20.add(var23[var24]);
               }
            } else {
               var20.add(var22);
            }
         }

         if (var4 != null && !var4.isEmpty() && var4.contains("PRC")) {
            var22 = var4.substring(4, var4.length() - 1);
            if (var22.contains(";")) {
               var23 = var22.split(";");

               for(var24 = 0; var24 < var23.length; ++var24) {
                  var21.add(var23[var24]);
               }
            } else {
               var21.add(var22);
            }
         }
      }

      if (var7.contains(";")) {
         new ArrayList();
         var23 = var7.split(";");
         new Reglements();

         for(int var25 = 0; var25 < var23.length; ++var25) {
            List var27 = this.reglementsDao.rechercheTresoReporting(var6, var5.getTabforNature(), var5.getTabforCategorie(), var23[var25], (String)null, (String)null, var8, var9, this.decoupageActivite, var5.getTabforTypeReglement(), var10, var11, var12, var13, var14, var15, var16, var17, var18, var19);

            for(int var26 = 0; var26 < var27.size(); ++var26) {
               Reglements var28 = (Reglements)var27.get(var26);
               this.listReglement.add(var28);
            }
         }
      } else {
         if (var7.equals("*")) {
            var7 = "";
         }

         this.listReglement = this.reglementsDao.rechercheTresoReporting(var6, var5.getTabforNature(), var5.getTabforCategorie(), var7, (String)null, (String)null, var8, var9, this.decoupageActivite, var5.getTabforTypeReglement(), var10, var11, var12, var13, var14, var15, var16, var17, var18, var19);
      }

      this.filtreCompteDest(var5.getTabforCpteDest());
      this.calculCumulTreso(this.listReglement, var5.getTabforSens());
      this.calculByOperateur();
   }

   public void orig(String var1, int var2, int var3, String var4, CptTabFormule var5, Session var6) throws HibernateException, NamingException, ParseException {
      String var7 = var1.substring(5, var1.length() - 1);
      this.calculePeriode(var2);
      ArrayList var8 = new ArrayList();
      ArrayList var9 = new ArrayList();
      ArrayList var10 = new ArrayList();
      ArrayList var11 = new ArrayList();
      ArrayList var12 = new ArrayList();
      ArrayList var13 = new ArrayList();
      ArrayList var14 = new ArrayList();
      ArrayList var15 = new ArrayList();
      ArrayList var16 = new ArrayList();
      ArrayList var17 = new ArrayList();
      ArrayList var18 = new ArrayList();
      ArrayList var19 = new ArrayList();
      Date var20 = null;
      Date var21 = null;
      if (var2 == 19) {
         var20 = this.utilDate.stringToDateSQLLight(this.var_exercice + "-01-01");
         var21 = this.utilDate.stringToDateSQLLight(this.var_exercice + "-12-31");
      } else if (var2 == 39) {
         var20 = this.utilDate.stringToDateSQLLight(this.var_exercice + "-01-01");
         var21 = this.utilDate.stringToDateSQLLight(this.var_exercice + "-12-31");
      } else if (var2 == 59) {
         var20 = this.utilDate.stringToDateSQLLight(this.var_exercice + "-01-01");
         var21 = this.utilDate.stringToDateSQLLight(this.var_exercice + "-12-31");
      } else {
         var20 = this.utilDate.stringToDateSQLLight(this.var_date_periode_deb);
         var21 = this.utilDate.stringToDateSQLLight(this.var_date_periode_fin);
      }

      String[] var23;
      if (var4 != null && !var4.isEmpty()) {
         String var22;
         int var24;
         if (var4 != null && !var4.isEmpty() && var4.startsWith("ACT(") && var4.endsWith(")")) {
            var22 = var4.substring(4, var4.length() - 1);
            if (var22.contains(";")) {
               var23 = var22.split(";");

               for(var24 = 0; var24 < var23.length; ++var24) {
                  var8.add(var23[var24]);
               }
            } else {
               var8.add(var22);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.startsWith("AC1(") && var4.endsWith(")")) {
            var22 = var4.substring(4, var4.length() - 1);
            if (var22.contains(";")) {
               var23 = var22.split(";");

               for(var24 = 0; var24 < var23.length; ++var24) {
                  var9.add(var23[var24]);
               }
            } else {
               var9.add(var22);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.startsWith("AC2(") && var4.endsWith(")")) {
            var22 = var4.substring(4, var4.length() - 1);
            if (var22.contains(";")) {
               var23 = var22.split(";");

               for(var24 = 0; var24 < var23.length; ++var24) {
                  var10.add(var23[var24]);
               }
            } else {
               var10.add(var22);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.startsWith("AC3(") && var4.endsWith(")")) {
            var22 = var4.substring(4, var4.length() - 1);
            if (var22.contains(";")) {
               var23 = var22.split(";");

               for(var24 = 0; var24 < var23.length; ++var24) {
                  var11.add(var23[var24]);
               }
            } else {
               var11.add(var22);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.startsWith("ACX(") && var4.endsWith(")")) {
            var22 = var4.substring(4, var4.length() - 1);
            if (var22.contains(";")) {
               var23 = var22.split(";");

               for(var24 = 0; var24 < var23.length; ++var24) {
                  if (var24 == 0) {
                     var9.add(var23[var24]);
                  } else if (var24 == 1) {
                     var10.add(var23[var24]);
                  } else if (var24 == 2) {
                     var11.add(var23[var24]);
                  }
               }
            } else {
               var9.add(var22);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.contains("SIT")) {
            var22 = var4.substring(4, var4.length() - 1);
            if (var22.contains(";")) {
               var23 = var22.split(";");

               for(var24 = 0; var24 < var23.length; ++var24) {
                  var12.add(var23[var24]);
               }
            } else {
               var12.add(var22);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.contains("DEP")) {
            var22 = var4.substring(4, var4.length() - 1);
            if (var22.contains(";")) {
               var23 = var22.split(";");

               for(var24 = 0; var24 < var23.length; ++var24) {
                  var13.add(var23[var24]);
               }
            } else {
               var13.add(var22);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.contains("SER")) {
            var22 = var4.substring(4, var4.length() - 1);
            if (var22.contains(";")) {
               var23 = var22.split(";");

               for(var24 = 0; var24 < var23.length; ++var24) {
                  var14.add(var23[var24]);
               }
            } else {
               var14.add(var22);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.contains("REG")) {
            var22 = var4.substring(4, var4.length() - 1);
            if (var22.contains(";")) {
               var23 = var22.split(";");

               for(var24 = 0; var24 < var23.length; ++var24) {
                  var15.add(var23[var24]);
               }
            } else {
               var15.add(var22);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.contains("SEC")) {
            var22 = var4.substring(4, var4.length() - 1);
            if (var22.contains(";")) {
               var23 = var22.split(";");

               for(var24 = 0; var24 < var23.length; ++var24) {
                  var16.add(var23[var24]);
               }
            } else {
               var16.add(var22);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.contains("PDV")) {
            var22 = var4.substring(4, var4.length() - 1);
            if (var22.contains(";")) {
               var23 = var22.split(";");

               for(var24 = 0; var24 < var23.length; ++var24) {
                  var17.add(var23[var24]);
               }
            } else {
               var17.add(var22);
            }
         }

         if (var4 != null && !var4.isEmpty() && var4.contains("DOS")) {
            var22 = var4.substring(4, var4.length() - 1);
            if (var22.contains(";")) {
               var23 = var22.split(";");

               for(var24 = 0; var24 < var23.length; ++var24) {
                  var18.add(var23[var24]);
               }
            } else {
               var18.add(var22);
            }
         }

         if (var4 != null && !var4.isEmpty() && var4.contains("PRC")) {
            var22 = var4.substring(4, var4.length() - 1);
            if (var22.contains(";")) {
               var23 = var22.split(";");

               for(var24 = 0; var24 < var23.length; ++var24) {
                  var19.add(var23[var24]);
               }
            } else {
               var19.add(var22);
            }
         }
      }

      if (var7.contains(";")) {
         new ArrayList();
         var23 = var7.split(";");
         new Reglements();

         for(int var25 = 0; var25 < var23.length; ++var25) {
            List var27 = this.reglementsDao.rechercheTresoReporting(var6, var5.getTabforNature(), var5.getTabforCategorie(), (String)null, var23[var25], (String)null, var20, var21, this.decoupageActivite, var5.getTabforTypeReglement(), var8, var9, var10, var11, var12, var13, var14, var15, var16, var17);

            for(int var26 = 0; var26 < var27.size(); ++var26) {
               Reglements var28 = (Reglements)var27.get(var26);
               this.listReglement.add(var28);
            }
         }
      } else {
         if (var7.equals("*")) {
            var7 = "";
         }

         this.listReglement = this.reglementsDao.rechercheTresoReporting(var6, var5.getTabforNature(), var5.getTabforCategorie(), (String)null, var7, (String)null, var20, var21, this.decoupageActivite, var5.getTabforTypeReglement(), var8, var9, var10, var11, var12, var13, var14, var15, var16, var17);
      }

      this.filtreCompteDest(var5.getTabforCpteDest());
      this.calculCumulTreso(this.listReglement, var5.getTabforSens());
      this.calculByOperateur();
   }

   public void dest(String var1, int var2, int var3, String var4, CptTabFormule var5, Session var6) throws HibernateException, NamingException, ParseException {
      String var7 = var1.substring(5, var1.length() - 1);
      this.calculePeriode(var2);
      ArrayList var8 = new ArrayList();
      ArrayList var9 = new ArrayList();
      ArrayList var10 = new ArrayList();
      ArrayList var11 = new ArrayList();
      ArrayList var12 = new ArrayList();
      ArrayList var13 = new ArrayList();
      ArrayList var14 = new ArrayList();
      ArrayList var15 = new ArrayList();
      ArrayList var16 = new ArrayList();
      ArrayList var17 = new ArrayList();
      ArrayList var18 = new ArrayList();
      ArrayList var19 = new ArrayList();
      Date var20 = null;
      Date var21 = null;
      if (var2 == 19) {
         var20 = this.utilDate.stringToDateSQLLight(this.var_exercice + "-01-01");
         var21 = this.utilDate.stringToDateSQLLight(this.var_exercice + "-12-31");
      } else if (var2 == 39) {
         var20 = this.utilDate.stringToDateSQLLight(this.var_exercice + "-01-01");
         var21 = this.utilDate.stringToDateSQLLight(this.var_exercice + "-12-31");
      } else if (var2 == 59) {
         var20 = this.utilDate.stringToDateSQLLight(this.var_exercice + "-01-01");
         var21 = this.utilDate.stringToDateSQLLight(this.var_exercice + "-12-31");
      } else {
         var20 = this.utilDate.stringToDateSQLLight(this.var_date_periode_deb);
         var21 = this.utilDate.stringToDateSQLLight(this.var_date_periode_fin);
      }

      String[] var23;
      if (var4 != null && !var4.isEmpty()) {
         String var22;
         int var24;
         if (var4 != null && !var4.isEmpty() && var4.startsWith("ACT(") && var4.endsWith(")")) {
            var22 = var4.substring(4, var4.length() - 1);
            if (var22.contains(";")) {
               var23 = var22.split(";");

               for(var24 = 0; var24 < var23.length; ++var24) {
                  var8.add(var23[var24]);
               }
            } else {
               var8.add(var22);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.startsWith("AC1(") && var4.endsWith(")")) {
            var22 = var4.substring(4, var4.length() - 1);
            if (var22.contains(";")) {
               var23 = var22.split(";");

               for(var24 = 0; var24 < var23.length; ++var24) {
                  var9.add(var23[var24]);
               }
            } else {
               var9.add(var22);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.startsWith("AC2(") && var4.endsWith(")")) {
            var22 = var4.substring(4, var4.length() - 1);
            if (var22.contains(";")) {
               var23 = var22.split(";");

               for(var24 = 0; var24 < var23.length; ++var24) {
                  var10.add(var23[var24]);
               }
            } else {
               var10.add(var22);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.startsWith("AC3(") && var4.endsWith(")")) {
            var22 = var4.substring(4, var4.length() - 1);
            if (var22.contains(";")) {
               var23 = var22.split(";");

               for(var24 = 0; var24 < var23.length; ++var24) {
                  var11.add(var23[var24]);
               }
            } else {
               var11.add(var22);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.startsWith("ACX(") && var4.endsWith(")")) {
            var22 = var4.substring(4, var4.length() - 1);
            if (var22.contains(";")) {
               var23 = var22.split(";");

               for(var24 = 0; var24 < var23.length; ++var24) {
                  if (var24 == 0) {
                     var9.add(var23[var24]);
                  } else if (var24 == 1) {
                     var10.add(var23[var24]);
                  } else if (var24 == 2) {
                     var11.add(var23[var24]);
                  }
               }
            } else {
               var9.add(var22);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.contains("SIT")) {
            var22 = var4.substring(4, var4.length() - 1);
            if (var22.contains(";")) {
               var23 = var22.split(";");

               for(var24 = 0; var24 < var23.length; ++var24) {
                  var12.add(var23[var24]);
               }
            } else {
               var12.add(var22);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.contains("DEP")) {
            var22 = var4.substring(4, var4.length() - 1);
            if (var22.contains(";")) {
               var23 = var22.split(";");

               for(var24 = 0; var24 < var23.length; ++var24) {
                  var13.add(var23[var24]);
               }
            } else {
               var13.add(var22);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.contains("SER")) {
            var22 = var4.substring(4, var4.length() - 1);
            if (var22.contains(";")) {
               var23 = var22.split(";");

               for(var24 = 0; var24 < var23.length; ++var24) {
                  var14.add(var23[var24]);
               }
            } else {
               var14.add(var22);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.contains("REG")) {
            var22 = var4.substring(4, var4.length() - 1);
            if (var22.contains(";")) {
               var23 = var22.split(";");

               for(var24 = 0; var24 < var23.length; ++var24) {
                  var15.add(var23[var24]);
               }
            } else {
               var15.add(var22);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.contains("SEC")) {
            var22 = var4.substring(4, var4.length() - 1);
            if (var22.contains(";")) {
               var23 = var22.split(";");

               for(var24 = 0; var24 < var23.length; ++var24) {
                  var16.add(var23[var24]);
               }
            } else {
               var16.add(var22);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.contains("PDV")) {
            var22 = var4.substring(4, var4.length() - 1);
            if (var22.contains(";")) {
               var23 = var22.split(";");

               for(var24 = 0; var24 < var23.length; ++var24) {
                  var17.add(var23[var24]);
               }
            } else {
               var17.add(var22);
            }
         }

         if (var4 != null && !var4.isEmpty() && var4.contains("DOS")) {
            var22 = var4.substring(4, var4.length() - 1);
            if (var22.contains(";")) {
               var23 = var22.split(";");

               for(var24 = 0; var24 < var23.length; ++var24) {
                  var18.add(var23[var24]);
               }
            } else {
               var18.add(var22);
            }
         }

         if (var4 != null && !var4.isEmpty() && var4.contains("PRC")) {
            var22 = var4.substring(4, var4.length() - 1);
            if (var22.contains(";")) {
               var23 = var22.split(";");

               for(var24 = 0; var24 < var23.length; ++var24) {
                  var19.add(var23[var24]);
               }
            } else {
               var19.add(var22);
            }
         }
      }

      if (var7.contains(";")) {
         new ArrayList();
         var23 = var7.split(";");
         new Reglements();

         for(int var25 = 0; var25 < var23.length; ++var25) {
            List var27 = this.reglementsDao.rechercheTresoReporting(var6, var5.getTabforNature(), var5.getTabforCategorie(), (String)null, (String)null, var23[var25], var20, var21, this.decoupageActivite, var5.getTabforTypeReglement(), var8, var9, var10, var11, var12, var13, var14, var15, var16, var17);

            for(int var26 = 0; var26 < var27.size(); ++var26) {
               Reglements var28 = (Reglements)var27.get(var26);
               this.listReglement.add(var28);
            }
         }
      } else {
         if (var7.equals("*")) {
            var7 = "";
         }

         this.listReglement = this.reglementsDao.rechercheTresoReporting(var6, var5.getTabforNature(), var5.getTabforCategorie(), (String)null, (String)null, var7, var20, var21, this.decoupageActivite, var5.getTabforTypeReglement(), var8, var9, var10, var11, var12, var13, var14, var15, var16, var17);
      }

      this.filtreCompteDest(var5.getTabforCpteDest());
      this.calculCumulTreso(this.listReglement, var5.getTabforSens());
      this.calculByOperateur();
   }

   public void filtreCompteDest(String var1) {
      if (this.listReglement.size() != 0 && var1 != null && !var1.isEmpty()) {
         ArrayList var2 = new ArrayList();

         for(int var3 = 0; var3 < this.listReglement.size(); ++var3) {
            var2.add(this.listReglement.get(var3));
         }

         this.listReglement.clear();
         new Reglements();

         for(int var4 = 0; var4 < var2.size(); ++var4) {
            Reglements var5 = (Reglements)var2.get(var4);
            if (var5.getRglTypeTiers() == 0 && var5.getRglIdTiers() != 0L) {
               if (var1.startsWith("41")) {
                  this.listReglement.add(var5);
               }
            } else if (var5.getRglTypeTiers() == 1 && var5.getRglIdTiers() != 0L) {
               if (var1.startsWith("40")) {
                  this.listReglement.add(var5);
               }
            } else if (var5.getRglTypeTiers() != 2 || var5.getRglIdTiers() == 0L) {
               if (var5.getRglTypeTiers() == 3 && var5.getRglIdTiers() == 0L) {
                  if (var5.getRglNomTiers() != null && !var5.getRglNomTiers().isEmpty() && var5.getRglNomTiers().startsWith(var1)) {
                     this.listReglement.add(var5);
                  }
               } else if (var5.getRglTypeTiers() == 4 && var5.getRglIdTiers() != 0L) {
                  if (var1.startsWith("41")) {
                     this.listReglement.add(var5);
                  }
               } else if (var5.getRglTypeTiers() == 5 && var5.getRglIdTiers() != 0L && var1.startsWith("41")) {
                  this.listReglement.add(var5);
               }
            }
         }
      }

   }

   public void rubrique(String var1, int var2, int var3, String var4, CptTabFormule var5, Session var6) throws HibernateException, NamingException, ParseException {
      String var7 = var1.substring(9, var1.length() - 1);
      this.calculePeriode(var2);
      Date var8 = null;
      Date var9 = null;
      if (var2 == 19) {
         var8 = this.utilDate.stringToDateSQLLight(this.var_exercice + "-01-01");
         var9 = this.utilDate.stringToDateSQLLight(this.var_exercice + "-12-31");
      } else if (var2 == 39) {
         var8 = this.utilDate.stringToDateSQLLight(this.var_exercice + "-01-01");
         var9 = this.utilDate.stringToDateSQLLight(this.var_exercice + "-12-31");
      } else if (var2 == 59) {
         var8 = this.utilDate.stringToDateSQLLight(this.var_exercice + "-01-01");
         var9 = this.utilDate.stringToDateSQLLight(this.var_exercice + "-12-31");
      } else {
         var8 = this.utilDate.stringToDateSQLLight(this.var_date_periode_deb);
         var9 = this.utilDate.stringToDateSQLLight(this.var_date_periode_fin);
      }

      ArrayList var10 = new ArrayList();
      ArrayList var11 = new ArrayList();
      ArrayList var12 = new ArrayList();
      ArrayList var13 = new ArrayList();
      ArrayList var14 = new ArrayList();
      ArrayList var15 = new ArrayList();
      ArrayList var16 = new ArrayList();
      ArrayList var17 = new ArrayList();
      ArrayList var18 = new ArrayList();
      ArrayList var19 = new ArrayList();
      ArrayList var20 = new ArrayList();
      ArrayList var21 = new ArrayList();
      ArrayList var22 = new ArrayList();
      if (var4 != null && !var4.isEmpty()) {
         String var23;
         String[] var24;
         int var25;
         if (var4 != null && !var4.isEmpty() && var4.startsWith("ACT(") && var4.endsWith(")")) {
            var23 = var4.substring(4, var4.length() - 1);
            if (var23.contains(";")) {
               var24 = var23.split(";");

               for(var25 = 0; var25 < var24.length; ++var25) {
                  var11.add(var24[var25]);
               }
            } else {
               var11.add(var23);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.startsWith("AC1(") && var4.endsWith(")")) {
            var23 = var4.substring(4, var4.length() - 1);
            if (var23.contains(";")) {
               var24 = var23.split(";");

               for(var25 = 0; var25 < var24.length; ++var25) {
                  var12.add(var24[var25]);
               }
            } else {
               var12.add(var23);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.startsWith("AC2(") && var4.endsWith(")")) {
            var23 = var4.substring(4, var4.length() - 1);
            if (var23.contains(";")) {
               var24 = var23.split(";");

               for(var25 = 0; var25 < var24.length; ++var25) {
                  var13.add(var24[var25]);
               }
            } else {
               var13.add(var23);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.startsWith("AC3(") && var4.endsWith(")")) {
            var23 = var4.substring(4, var4.length() - 1);
            if (var23.contains(";")) {
               var24 = var23.split(";");

               for(var25 = 0; var25 < var24.length; ++var25) {
                  var14.add(var24[var25]);
               }
            } else {
               var14.add(var23);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.startsWith("ACX(") && var4.endsWith(")")) {
            var23 = var4.substring(4, var4.length() - 1);
            if (var23.contains(";")) {
               var24 = var23.split(";");

               for(var25 = 0; var25 < var24.length; ++var25) {
                  if (var25 == 0) {
                     var12.add(var24[var25]);
                  } else if (var25 == 1) {
                     var13.add(var24[var25]);
                  } else if (var25 == 2) {
                     var14.add(var24[var25]);
                  }
               }
            } else {
               var12.add(var23);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.contains("SIT")) {
            var23 = var4.substring(4, var4.length() - 1);
            if (var23.contains(";")) {
               var24 = var23.split(";");

               for(var25 = 0; var25 < var24.length; ++var25) {
                  var15.add(var24[var25]);
               }
            } else {
               var15.add(var23);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.contains("DEP")) {
            var23 = var4.substring(4, var4.length() - 1);
            if (var23.contains(";")) {
               var24 = var23.split(";");

               for(var25 = 0; var25 < var24.length; ++var25) {
                  var16.add(var24[var25]);
               }
            } else {
               var16.add(var23);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.contains("SER")) {
            var23 = var4.substring(4, var4.length() - 1);
            if (var23.contains(";")) {
               var24 = var23.split(";");

               for(var25 = 0; var25 < var24.length; ++var25) {
                  var17.add(var24[var25]);
               }
            } else {
               var17.add(var23);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.contains("REG")) {
            var23 = var4.substring(4, var4.length() - 1);
            if (var23.contains(";")) {
               var24 = var23.split(";");

               for(var25 = 0; var25 < var24.length; ++var25) {
                  var18.add(var24[var25]);
               }
            } else {
               var18.add(var23);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.contains("SEC")) {
            var23 = var4.substring(4, var4.length() - 1);
            if (var23.contains(";")) {
               var24 = var23.split(";");

               for(var25 = 0; var25 < var24.length; ++var25) {
                  var19.add(var24[var25]);
               }
            } else {
               var19.add(var23);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.contains("PDV")) {
            var23 = var4.substring(4, var4.length() - 1);
            if (var23.contains(";")) {
               var24 = var23.split(";");

               for(var25 = 0; var25 < var24.length; ++var25) {
                  var20.add(var24[var25]);
               }
            } else {
               var20.add(var23);
            }
         }

         if (var4 != null && !var4.isEmpty() && var4.contains("DOS")) {
            var23 = var4.substring(4, var4.length() - 1);
            if (var23.contains(";")) {
               var24 = var23.split(";");

               for(var25 = 0; var25 < var24.length; ++var25) {
                  var21.add(var24[var25]);
               }
            } else {
               var21.add(var23);
            }
         }

         if (var4 != null && !var4.isEmpty() && var4.contains("PRC")) {
            var23 = var4.substring(4, var4.length() - 1);
            if (var23.contains(";")) {
               var24 = var23.split(";");

               for(var25 = 0; var25 < var24.length; ++var25) {
                  var22.add(var24[var25]);
               }
            } else {
               var22.add(var23);
            }
         }
      }

      var10.clear();
      if (var5.getTabforNatureSalarie() != null && !var5.getTabforNatureSalarie().isEmpty()) {
         if (!var5.getTabforNatureSalarie().contains(":")) {
            var10.add(var5.getTabforNatureSalarie());
         } else {
            String[] var30 = var5.getTabforNatureSalarie().split(":");

            for(int var32 = 0; var32 < var30.length; ++var32) {
               String var34 = var30[var32];
               var10.add(var34);
            }
         }
      }

      new OptionPaye();
      LireLesoptionsPaye var33 = new LireLesoptionsPaye();
      var33.setStrId(this.structureLog.getStrid());
      var33.lancer();
      OptionPaye var31 = var33.getOptionsPaye();
      this.listBulletins.clear();
      if (var7.contains(";")) {
         new ArrayList();
         String[] var26 = var7.split(";");
         new BulletinLigne();

         for(int var28 = 0; var28 < var26.length; ++var28) {
            List var35 = this.bulletinLigneDao.rechercheBulletinReporting(var6, var31.getSocieteInterim(), var10, var5.getTabforFeuilleSalarie(), var5.getTabforTypeSalarie(), var26[var28], "", var5.getTabforEtatSalarie(), var5.getTabforClassementSalarie(), var8, var9, this.decoupageActivite, var5.getTabforTypeReglement(), var11, var12, var13, var14, var15, var16, var17, var18, var19, var20);

            for(int var29 = 0; var29 < var35.size(); ++var29) {
               BulletinLigne var27 = (BulletinLigne)var35.get(var29);
               this.listBulletins.add(var27);
            }
         }
      } else {
         if (var7.equals("*")) {
            var7 = "299999:E";
         }

         this.listBulletins = this.bulletinLigneDao.rechercheBulletinReporting(var6, var31.getSocieteInterim(), var10, var5.getTabforFeuilleSalarie(), var5.getTabforTypeSalarie(), var7, "", var5.getTabforEtatSalarie(), var5.getTabforClassementSalarie(), var8, var9, this.decoupageActivite, var5.getTabforTypeReglement(), var11, var12, var13, var14, var15, var16, var17, var18, var19, var20);
      }

      this.calculCumulBulletin(this.listBulletins, var5.getTabforFormule());
      this.calculByOperateur();
   }

   public void nat_rubrique(String var1, int var2, int var3, String var4, CptTabFormule var5, Session var6) throws HibernateException, NamingException, ParseException {
      String var7 = var1.substring(13, var1.length() - 1);
      this.calculePeriode(var2);
      Date var8 = null;
      Date var9 = null;
      if (var2 == 19) {
         var8 = this.utilDate.stringToDateSQLLight(this.var_exercice + "-01-01");
         var9 = this.utilDate.stringToDateSQLLight(this.var_exercice + "-12-31");
      } else if (var2 == 39) {
         var8 = this.utilDate.stringToDateSQLLight(this.var_exercice + "-01-01");
         var9 = this.utilDate.stringToDateSQLLight(this.var_exercice + "-12-31");
      } else if (var2 == 59) {
         var8 = this.utilDate.stringToDateSQLLight(this.var_exercice + "-01-01");
         var9 = this.utilDate.stringToDateSQLLight(this.var_exercice + "-12-31");
      } else {
         var8 = this.utilDate.stringToDateSQLLight(this.var_date_periode_deb);
         var9 = this.utilDate.stringToDateSQLLight(this.var_date_periode_fin);
      }

      ArrayList var10 = new ArrayList();
      ArrayList var11 = new ArrayList();
      ArrayList var12 = new ArrayList();
      ArrayList var13 = new ArrayList();
      ArrayList var14 = new ArrayList();
      ArrayList var15 = new ArrayList();
      ArrayList var16 = new ArrayList();
      ArrayList var17 = new ArrayList();
      ArrayList var18 = new ArrayList();
      ArrayList var19 = new ArrayList();
      ArrayList var20 = new ArrayList();
      ArrayList var21 = new ArrayList();
      ArrayList var22 = new ArrayList();
      if (var4 != null && !var4.isEmpty()) {
         String var23;
         String[] var24;
         int var25;
         if (var4 != null && !var4.isEmpty() && var4.startsWith("ACT(") && var4.endsWith(")")) {
            var23 = var4.substring(4, var4.length() - 1);
            if (var23.contains(";")) {
               var24 = var23.split(";");

               for(var25 = 0; var25 < var24.length; ++var25) {
                  var11.add(var24[var25]);
               }
            } else {
               var11.add(var23);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.startsWith("AC1(") && var4.endsWith(")")) {
            var23 = var4.substring(4, var4.length() - 1);
            if (var23.contains(";")) {
               var24 = var23.split(";");

               for(var25 = 0; var25 < var24.length; ++var25) {
                  var12.add(var24[var25]);
               }
            } else {
               var12.add(var23);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.startsWith("AC2(") && var4.endsWith(")")) {
            var23 = var4.substring(4, var4.length() - 1);
            if (var23.contains(";")) {
               var24 = var23.split(";");

               for(var25 = 0; var25 < var24.length; ++var25) {
                  var13.add(var24[var25]);
               }
            } else {
               var13.add(var23);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.startsWith("AC3(") && var4.endsWith(")")) {
            var23 = var4.substring(4, var4.length() - 1);
            if (var23.contains(";")) {
               var24 = var23.split(";");

               for(var25 = 0; var25 < var24.length; ++var25) {
                  var14.add(var24[var25]);
               }
            } else {
               var14.add(var23);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.startsWith("ACX(") && var4.endsWith(")")) {
            var23 = var4.substring(4, var4.length() - 1);
            if (var23.contains(";")) {
               var24 = var23.split(";");

               for(var25 = 0; var25 < var24.length; ++var25) {
                  if (var25 == 0) {
                     var12.add(var24[var25]);
                  } else if (var25 == 1) {
                     var13.add(var24[var25]);
                  } else if (var25 == 2) {
                     var14.add(var24[var25]);
                  }
               }
            } else {
               var12.add(var23);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.contains("SIT")) {
            var23 = var4.substring(4, var4.length() - 1);
            if (var23.contains(";")) {
               var24 = var23.split(";");

               for(var25 = 0; var25 < var24.length; ++var25) {
                  var15.add(var24[var25]);
               }
            } else {
               var15.add(var23);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.contains("DEP")) {
            var23 = var4.substring(4, var4.length() - 1);
            if (var23.contains(";")) {
               var24 = var23.split(";");

               for(var25 = 0; var25 < var24.length; ++var25) {
                  var16.add(var24[var25]);
               }
            } else {
               var16.add(var23);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.contains("SER")) {
            var23 = var4.substring(4, var4.length() - 1);
            if (var23.contains(";")) {
               var24 = var23.split(";");

               for(var25 = 0; var25 < var24.length; ++var25) {
                  var17.add(var24[var25]);
               }
            } else {
               var17.add(var23);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.contains("REG")) {
            var23 = var4.substring(4, var4.length() - 1);
            if (var23.contains(";")) {
               var24 = var23.split(";");

               for(var25 = 0; var25 < var24.length; ++var25) {
                  var18.add(var24[var25]);
               }
            } else {
               var18.add(var23);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.contains("SEC")) {
            var23 = var4.substring(4, var4.length() - 1);
            if (var23.contains(";")) {
               var24 = var23.split(";");

               for(var25 = 0; var25 < var24.length; ++var25) {
                  var19.add(var24[var25]);
               }
            } else {
               var19.add(var23);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.contains("PDV")) {
            var23 = var4.substring(4, var4.length() - 1);
            if (var23.contains(";")) {
               var24 = var23.split(";");

               for(var25 = 0; var25 < var24.length; ++var25) {
                  var20.add(var24[var25]);
               }
            } else {
               var20.add(var23);
            }
         }

         if (var4 != null && !var4.isEmpty() && var4.contains("DOS")) {
            var23 = var4.substring(4, var4.length() - 1);
            if (var23.contains(";")) {
               var24 = var23.split(";");

               for(var25 = 0; var25 < var24.length; ++var25) {
                  var21.add(var24[var25]);
               }
            } else {
               var21.add(var23);
            }
         }

         if (var4 != null && !var4.isEmpty() && var4.contains("PRC")) {
            var23 = var4.substring(4, var4.length() - 1);
            if (var23.contains(";")) {
               var24 = var23.split(";");

               for(var25 = 0; var25 < var24.length; ++var25) {
                  var22.add(var24[var25]);
               }
            } else {
               var22.add(var23);
            }
         }
      }

      var10.clear();
      if (var5.getTabforNatureSalarie() != null && !var5.getTabforNatureSalarie().isEmpty()) {
         if (!var5.getTabforNatureSalarie().contains(":")) {
            var10.add(var5.getTabforNatureSalarie());
         } else {
            String[] var30 = var5.getTabforNatureSalarie().split(":");

            for(int var32 = 0; var32 < var30.length; ++var32) {
               String var34 = var30[var32];
               var10.add(var34);
            }
         }
      }

      new OptionPaye();
      LireLesoptionsPaye var33 = new LireLesoptionsPaye();
      var33.setStrId(this.structureLog.getStrid());
      var33.lancer();
      OptionPaye var31 = var33.getOptionsPaye();
      this.listBulletins.clear();
      if (var7.contains(";")) {
         new ArrayList();
         String[] var26 = var7.split(";");
         new BulletinLigne();

         for(int var28 = 0; var28 < var26.length; ++var28) {
            List var35 = this.bulletinLigneDao.rechercheBulletinReporting(var6, var31.getSocieteInterim(), var10, var5.getTabforFeuilleSalarie(), var5.getTabforTypeSalarie(), "", var26[var28], var5.getTabforEtatSalarie(), var5.getTabforClassementSalarie(), var8, var9, this.decoupageActivite, var5.getTabforTypeReglement(), var11, var12, var13, var14, var15, var16, var17, var18, var19, var20);

            for(int var29 = 0; var29 < var35.size(); ++var29) {
               BulletinLigne var27 = (BulletinLigne)var35.get(var29);
               this.listBulletins.add(var27);
            }
         }
      } else {
         if (var7.equals("*")) {
            var7 = "59:E";
         }

         this.listBulletins = this.bulletinLigneDao.rechercheBulletinReporting(var6, var31.getSocieteInterim(), var10, var5.getTabforFeuilleSalarie(), var5.getTabforTypeSalarie(), "", var7, var5.getTabforEtatSalarie(), var5.getTabforClassementSalarie(), var8, var9, this.decoupageActivite, var5.getTabforTypeReglement(), var11, var12, var13, var14, var15, var16, var17, var18, var19, var20);
      }

      this.calculCumulBulletin(this.listBulletins, var5.getTabforFormule());
      this.calculByOperateur();
   }

   public void cablv(int var1, String var2, String var3, int var4, Session var5) throws HibernateException, NamingException, ParseException {
      String var6 = var2.substring(6, var2.length() - 1);
      String var7 = "";
      if (var3 != null && !var3.isEmpty() && var3.startsWith("TIE(")) {
         var7 = var3.substring(4, var3.length() - 1);
      }

      this.lePlanComptable.clear();
      if (var6.contains(";")) {
         new ArrayList();
         String[] var9 = var6.split(";");
         new Ecritures();

         for(int var11 = 0; var11 < var9.length; ++var11) {
            List var8 = this.chargerBlByProdStartWith(var1, var9[var11], 0, var7, var5);

            for(int var12 = 0; var12 < var8.size(); ++var12) {
               Ecritures var10 = (Ecritures)var8.get(var12);
               this.lesEcritures.add(var10);
            }
         }
      } else {
         this.lesEcritures = this.chargerBlByProdStartWith(var1, var6, 0, var7, var5);
      }

      this.calculSoldeforCompte(var1, this.lesEcritures, var4, var5);
      this.calculByOperateur();
   }

   public void cabrt(int var1, String var2, String var3, int var4, Session var5) throws HibernateException, NamingException, ParseException {
      String var6 = var2.substring(6, var2.length() - 1);
      String var7 = "";
      if (var3 != null && !var3.isEmpty() && var3.startsWith("TIE(")) {
         var7 = var3.substring(4, var3.length() - 1);
      }

      this.lePlanComptable.clear();
      if (var6.contains(";")) {
         new ArrayList();
         String[] var9 = var6.split(";");
         new Ecritures();

         for(int var11 = 0; var11 < var9.length; ++var11) {
            List var8 = this.chargerBrByProdStartWith(var1, var9[var11], 0, var7, var5);

            for(int var12 = 0; var12 < var8.size(); ++var12) {
               Ecritures var10 = (Ecritures)var8.get(var12);
               this.lesEcritures.add(var10);
            }
         }
      } else {
         this.lesEcritures = this.chargerBrByProdStartWith(var1, var6, 0, var7, var5);
      }

      this.calculSoldeforCompte(var1, this.lesEcritures, var4, var5);
      this.calculByOperateur();
   }

   public void cabst(int var1, String var2, String var3, int var4, Session var5) throws HibernateException, NamingException, ParseException {
      String var6 = var2.substring(6, var2.length() - 1);
      this.lePlanComptable.clear();
      if (var6.contains(";")) {
         new ArrayList();
         String[] var8 = var6.split(";");
         new Ecritures();

         for(int var10 = 0; var10 < var8.length; ++var10) {
            List var7 = this.chargerBsByProdStartWith(var1, var8[var10], 0, var5);

            for(int var11 = 0; var11 < var7.size(); ++var11) {
               Ecritures var9 = (Ecritures)var7.get(var11);
               this.lesEcritures.add(var9);
            }
         }
      } else {
         this.lesEcritures = this.chargerBsByProdStartWith(var1, var6, 0, var5);
      }

      this.calculSoldeforCompte(var1, this.lesEcritures, var4, var5);
      this.calculByOperateur();
   }

   public void caben(int var1, String var2, String var3, int var4, Session var5) throws HibernateException, NamingException, ParseException {
      String var6 = var2.substring(6, var2.length() - 1);
      this.lePlanComptable.clear();
      if (var6.contains(";")) {
         new ArrayList();
         String[] var8 = var6.split(";");
         new Ecritures();

         for(int var10 = 0; var10 < var8.length; ++var10) {
            List var7 = this.chargerBeByProdStartWith(var1, var8[var10], 0, var5);

            for(int var11 = 0; var11 < var7.size(); ++var11) {
               Ecritures var9 = (Ecritures)var7.get(var11);
               this.lesEcritures.add(var9);
            }
         }
      } else {
         this.lesEcritures = this.chargerBeByProdStartWith(var1, var6, 0, var5);
      }

      this.calculSoldeforCompte(var1, this.lesEcritures, var4, var5);
      this.calculByOperateur();
   }

   public void cafac(int var1, String var2, String var3, int var4, Session var5) throws HibernateException, NamingException, ParseException {
      String var6 = var2.substring(6, var2.length() - 1);
      String var7 = "";
      if (var3 != null && !var3.isEmpty() && var3.startsWith("TIE(")) {
         var7 = var3.substring(4, var3.length() - 1);
      }

      this.lePlanComptable.clear();
      if (var6.contains(";")) {
         new ArrayList();
         String[] var9 = var6.split(";");
         new Ecritures();

         for(int var11 = 0; var11 < var9.length; ++var11) {
            List var8 = this.chargerFacByProdStartWith(var1, var9[var11], 0, var7, var5);

            for(int var12 = 0; var12 < var8.size(); ++var12) {
               Ecritures var10 = (Ecritures)var8.get(var12);
               this.lesEcritures.add(var10);
            }
         }
      } else {
         this.lesEcritures = this.chargerFacByProdStartWith(var1, var6, 0, var7, var5);
      }

      this.calculSoldeforCompte(var1, this.lesEcritures, var4, var5);
      this.calculByOperateur();
   }

   public void candb(int var1, String var2, String var3, int var4, Session var5) throws HibernateException, NamingException, ParseException {
      String var6 = var2.substring(6, var2.length() - 1);
      String var7 = "";
      if (var3 != null && !var3.isEmpty() && var3.startsWith("TIE(")) {
         var7 = var3.substring(4, var3.length() - 1);
      }

      this.lePlanComptable.clear();
      if (var6.contains(";")) {
         new ArrayList();
         String[] var9 = var6.split(";");
         new Ecritures();

         for(int var11 = 0; var11 < var9.length; ++var11) {
            List var8 = this.chargerNdbByProdStartWith(var1, var9[var11], 0, var7, var5);

            for(int var12 = 0; var12 < var8.size(); ++var12) {
               Ecritures var10 = (Ecritures)var8.get(var12);
               this.lesEcritures.add(var10);
            }
         }
      } else {
         this.lesEcritures = this.chargerNdbByProdStartWith(var1, var6, 0, var7, var5);
      }

      this.calculSoldeforCompte(var1, this.lesEcritures, var4, var5);
      this.calculByOperateur();
   }

   public void caavr(int var1, String var2, String var3, int var4, Session var5) throws HibernateException, NamingException, ParseException {
      String var6 = var2.substring(6, var2.length() - 1);
      String var7 = "";
      if (var3 != null && !var3.isEmpty() && var3.startsWith("TIE(")) {
         var7 = var3.substring(4, var3.length() - 1);
      }

      this.lePlanComptable.clear();
      if (var6.contains(";")) {
         new ArrayList();
         String[] var9 = var6.split(";");
         new Ecritures();

         for(int var11 = 0; var11 < var9.length; ++var11) {
            List var8 = this.chargerAvrByProdStartWith(var1, var9[var11], 0, var7, var5);

            for(int var12 = 0; var12 < var8.size(); ++var12) {
               Ecritures var10 = (Ecritures)var8.get(var12);
               this.lesEcritures.add(var10);
            }
         }
      } else {
         this.lesEcritures = this.chargerAvrByProdStartWith(var1, var6, 0, var7, var5);
      }

      this.calculSoldeforCompte(var1, this.lesEcritures, var4, var5);
      this.calculByOperateur();
   }

   public void caach(int var1, String var2, String var3, int var4, Session var5) throws HibernateException, NamingException, ParseException {
      String var6 = var2.substring(6, var2.length() - 1);
      String var7 = "";
      if (var3 != null && !var3.isEmpty() && var3.startsWith("TIE(")) {
         var7 = var3.substring(4, var3.length() - 1);
      }

      this.lePlanComptable.clear();
      if (var6.contains(";")) {
         new ArrayList();
         String[] var9 = var6.split(";");
         new Ecritures();

         for(int var11 = 0; var11 < var9.length; ++var11) {
            List var8 = this.chargerAchByProdStartWith(var1, var9[var11], 0, var7, var5);

            for(int var12 = 0; var12 < var8.size(); ++var12) {
               Ecritures var10 = (Ecritures)var8.get(var12);
               this.lesEcritures.add(var10);
            }
         }
      } else {
         this.lesEcritures = this.chargerAchByProdStartWith(var1, var6, 0, var7, var5);
      }

      this.calculSoldeforCompte(var1, this.lesEcritures, var4, var5);
      this.calculByOperateur();
   }

   public void qtblv(int var1, String var2, String var3, int var4, Session var5) throws HibernateException, NamingException, ParseException {
      String var6 = var2.substring(6, var2.length() - 1);
      String var7 = "";
      if (var3 != null && !var3.isEmpty() && var3.startsWith("TIE(")) {
         var7 = var3.substring(4, var3.length() - 1);
      }

      this.lePlanComptable.clear();
      if (var6.contains(";")) {
         new ArrayList();
         String[] var9 = var6.split(";");
         new Ecritures();

         for(int var11 = 0; var11 < var9.length; ++var11) {
            List var8 = this.chargerBlByProdStartWith(var1, var9[var11], 1, var7, var5);

            for(int var12 = 0; var12 < var8.size(); ++var12) {
               Ecritures var10 = (Ecritures)var8.get(var12);
               this.lesEcritures.add(var10);
            }
         }
      } else {
         this.lesEcritures = this.chargerBlByProdStartWith(var1, var6, 1, var7, var5);
      }

      this.calculSoldeforCompte(var1, this.lesEcritures, var4, var5);
      this.calculByOperateur();
   }

   public void qtbrt(int var1, String var2, String var3, int var4, Session var5) throws HibernateException, NamingException, ParseException {
      String var6 = var2.substring(6, var2.length() - 1);
      String var7 = "";
      if (var3 != null && !var3.isEmpty() && var3.startsWith("TIE(")) {
         var7 = var3.substring(4, var3.length() - 1);
      }

      this.lePlanComptable.clear();
      if (var6.contains(";")) {
         new ArrayList();
         String[] var9 = var6.split(";");
         new Ecritures();

         for(int var11 = 0; var11 < var9.length; ++var11) {
            List var8 = this.chargerBrByProdStartWith(var1, var9[var11], 1, var7, var5);

            for(int var12 = 0; var12 < var8.size(); ++var12) {
               Ecritures var10 = (Ecritures)var8.get(var12);
               this.lesEcritures.add(var10);
            }
         }
      } else {
         this.lesEcritures = this.chargerBrByProdStartWith(var1, var6, 1, var7, var5);
      }

      this.calculSoldeforCompte(var1, this.lesEcritures, var4, var5);
      this.calculByOperateur();
   }

   public void qtbst(int var1, String var2, String var3, int var4, Session var5) throws HibernateException, NamingException, ParseException {
      String var6 = var2.substring(6, var2.length() - 1);
      this.lePlanComptable.clear();
      if (var6.contains(";")) {
         new ArrayList();
         String[] var8 = var6.split(";");
         new Ecritures();

         for(int var10 = 0; var10 < var8.length; ++var10) {
            List var7 = this.chargerBsByProdStartWith(var1, var8[var10], 1, var5);

            for(int var11 = 0; var11 < var7.size(); ++var11) {
               Ecritures var9 = (Ecritures)var7.get(var11);
               this.lesEcritures.add(var9);
            }
         }
      } else {
         this.lesEcritures = this.chargerBsByProdStartWith(var1, var6, 1, var5);
      }

      this.calculSoldeforCompte(var1, this.lesEcritures, var4, var5);
      this.calculByOperateur();
   }

   public void qtben(int var1, String var2, String var3, int var4, Session var5) throws HibernateException, NamingException, ParseException {
      String var6 = var2.substring(6, var2.length() - 1);
      this.lePlanComptable.clear();
      if (var6.contains(";")) {
         new ArrayList();
         String[] var8 = var6.split(";");
         new Ecritures();

         for(int var10 = 0; var10 < var8.length; ++var10) {
            List var7 = this.chargerBeByProdStartWith(var1, var8[var10], 1, var5);

            for(int var11 = 0; var11 < var7.size(); ++var11) {
               Ecritures var9 = (Ecritures)var7.get(var11);
               this.lesEcritures.add(var9);
            }
         }
      } else {
         this.lesEcritures = this.chargerBeByProdStartWith(var1, var6, 1, var5);
      }

      this.calculSoldeforCompte(var1, this.lesEcritures, var4, var5);
      this.calculByOperateur();
   }

   public void qtfac(int var1, String var2, String var3, int var4, Session var5) throws HibernateException, NamingException, ParseException {
      String var6 = var2.substring(6, var2.length() - 1);
      String var7 = "";
      if (var3 != null && !var3.isEmpty() && var3.startsWith("TIE(")) {
         var7 = var3.substring(4, var3.length() - 1);
      }

      this.lePlanComptable.clear();
      if (var6.contains(";")) {
         new ArrayList();
         String[] var9 = var6.split(";");
         new Ecritures();

         for(int var11 = 0; var11 < var9.length; ++var11) {
            List var8 = this.chargerFacByProdStartWith(var1, var9[var11], 1, var7, var5);

            for(int var12 = 0; var12 < var8.size(); ++var12) {
               Ecritures var10 = (Ecritures)var8.get(var12);
               this.lesEcritures.add(var10);
            }
         }
      } else {
         this.lesEcritures = this.chargerFacByProdStartWith(var1, var6, 1, var7, var5);
      }

      this.calculSoldeforCompte(var1, this.lesEcritures, var4, var5);
      this.calculByOperateur();
   }

   public void qtndb(int var1, String var2, String var3, int var4, Session var5) throws HibernateException, NamingException, ParseException {
      String var6 = var2.substring(6, var2.length() - 1);
      String var7 = "";
      if (var3 != null && !var3.isEmpty() && var3.startsWith("TIE(")) {
         var7 = var3.substring(4, var3.length() - 1);
      }

      this.lePlanComptable.clear();
      if (var6.contains(";")) {
         new ArrayList();
         String[] var9 = var6.split(";");
         new Ecritures();

         for(int var11 = 0; var11 < var9.length; ++var11) {
            List var8 = this.chargerNdbByProdStartWith(var1, var9[var11], 1, var7, var5);

            for(int var12 = 0; var12 < var8.size(); ++var12) {
               Ecritures var10 = (Ecritures)var8.get(var12);
               this.lesEcritures.add(var10);
            }
         }
      } else {
         this.lesEcritures = this.chargerNdbByProdStartWith(var1, var6, 1, var7, var5);
      }

      this.calculSoldeforCompte(var1, this.lesEcritures, var4, var5);
      this.calculByOperateur();
   }

   public void qtavr(int var1, String var2, String var3, int var4, Session var5) throws HibernateException, NamingException, ParseException {
      String var6 = var2.substring(6, var2.length() - 1);
      String var7 = "";
      if (var3 != null && !var3.isEmpty() && var3.startsWith("TIE(")) {
         var7 = var3.substring(4, var3.length() - 1);
      }

      this.lePlanComptable.clear();
      if (var6.contains(";")) {
         new ArrayList();
         String[] var9 = var6.split(";");
         new Ecritures();

         for(int var11 = 0; var11 < var9.length; ++var11) {
            List var8 = this.chargerAvrByProdStartWith(var1, var9[var11], 1, var7, var5);

            for(int var12 = 0; var12 < var8.size(); ++var12) {
               Ecritures var10 = (Ecritures)var8.get(var12);
               this.lesEcritures.add(var10);
            }
         }
      } else {
         this.lesEcritures = this.chargerAvrByProdStartWith(var1, var6, 1, var7, var5);
      }

      this.calculSoldeforCompte(var1, this.lesEcritures, var4, var5);
      this.calculByOperateur();
   }

   public void qtach(int var1, String var2, String var3, int var4, Session var5) throws HibernateException, NamingException, ParseException {
      String var6 = var2.substring(6, var2.length() - 1);
      String var7 = "";
      if (var3 != null && !var3.isEmpty() && var3.startsWith("TIE(")) {
         var7 = var3.substring(4, var3.length() - 1);
      }

      this.lePlanComptable.clear();
      if (var6.contains(";")) {
         new ArrayList();
         String[] var9 = var6.split(";");
         new Ecritures();

         for(int var11 = 0; var11 < var9.length; ++var11) {
            List var8 = this.chargerAchByProdStartWith(var1, var9[var11], 1, var7, var5);

            for(int var12 = 0; var12 < var8.size(); ++var12) {
               Ecritures var10 = (Ecritures)var8.get(var12);
               this.lesEcritures.add(var10);
            }
         }
      } else {
         this.lesEcritures = this.chargerAchByProdStartWith(var1, var6, 1, var7, var5);
      }

      this.calculSoldeforCompte(var1, this.lesEcritures, var4, var5);
      this.calculByOperateur();
   }

   public void vlblv(int var1, String var2, String var3, int var4, Session var5) throws HibernateException, NamingException, ParseException {
      String var6 = var2.substring(6, var2.length() - 1);
      String var7 = "";
      if (var3 != null && !var3.isEmpty() && var3.startsWith("TIE(")) {
         var7 = var3.substring(4, var3.length() - 1);
      }

      this.lePlanComptable.clear();
      if (var6.contains(";")) {
         new ArrayList();
         String[] var9 = var6.split(";");
         new Ecritures();

         for(int var11 = 0; var11 < var9.length; ++var11) {
            List var8 = this.chargerBlByProdStartWith(var1, var9[var11], 2, var7, var5);

            for(int var12 = 0; var12 < var8.size(); ++var12) {
               Ecritures var10 = (Ecritures)var8.get(var12);
               this.lesEcritures.add(var10);
            }
         }
      } else {
         this.lesEcritures = this.chargerBlByProdStartWith(var1, var6, 2, var7, var5);
      }

      this.calculSoldeforCompte(var1, this.lesEcritures, var4, var5);
      this.calculByOperateur();
   }

   public void vlbrt(int var1, String var2, String var3, int var4, Session var5) throws HibernateException, NamingException, ParseException {
      String var6 = var2.substring(6, var2.length() - 1);
      String var7 = "";
      if (var3 != null && !var3.isEmpty() && var3.startsWith("TIE(")) {
         var7 = var3.substring(4, var3.length() - 1);
      }

      this.lePlanComptable.clear();
      if (var6.contains(";")) {
         new ArrayList();
         String[] var9 = var6.split(";");
         new Ecritures();

         for(int var11 = 0; var11 < var9.length; ++var11) {
            List var8 = this.chargerBrByProdStartWith(var1, var9[var11], 2, var7, var5);

            for(int var12 = 0; var12 < var8.size(); ++var12) {
               Ecritures var10 = (Ecritures)var8.get(var12);
               this.lesEcritures.add(var10);
            }
         }
      } else {
         this.lesEcritures = this.chargerBrByProdStartWith(var1, var6, 2, var7, var5);
      }

      this.calculSoldeforCompte(var1, this.lesEcritures, var4, var5);
      this.calculByOperateur();
   }

   public void vlbst(int var1, String var2, String var3, int var4, Session var5) throws HibernateException, NamingException, ParseException {
      String var6 = var2.substring(6, var2.length() - 1);
      this.lePlanComptable.clear();
      if (var6.contains(";")) {
         new ArrayList();
         String[] var8 = var6.split(";");
         new Ecritures();

         for(int var10 = 0; var10 < var8.length; ++var10) {
            List var7 = this.chargerBsByProdStartWith(var1, var8[var10], 2, var5);

            for(int var11 = 0; var11 < var7.size(); ++var11) {
               Ecritures var9 = (Ecritures)var7.get(var11);
               this.lesEcritures.add(var9);
            }
         }
      } else {
         this.lesEcritures = this.chargerBsByProdStartWith(var1, var6, 2, var5);
      }

      this.calculSoldeforCompte(var1, this.lesEcritures, var4, var5);
      this.calculByOperateur();
   }

   public void vlben(int var1, String var2, String var3, int var4, Session var5) throws HibernateException, NamingException, ParseException {
      String var6 = var2.substring(6, var2.length() - 1);
      this.lePlanComptable.clear();
      if (var6.contains(";")) {
         new ArrayList();
         String[] var8 = var6.split(";");
         new Ecritures();

         for(int var10 = 0; var10 < var8.length; ++var10) {
            List var7 = this.chargerBeByProdStartWith(var1, var8[var10], 2, var5);

            for(int var11 = 0; var11 < var7.size(); ++var11) {
               Ecritures var9 = (Ecritures)var7.get(var11);
               this.lesEcritures.add(var9);
            }
         }
      } else {
         this.lesEcritures = this.chargerBeByProdStartWith(var1, var6, 2, var5);
      }

      this.calculSoldeforCompte(var1, this.lesEcritures, var4, var5);
      this.calculByOperateur();
   }

   public void vlfac(int var1, String var2, String var3, int var4, Session var5) throws HibernateException, NamingException, ParseException {
      String var6 = var2.substring(6, var2.length() - 1);
      String var7 = "";
      if (var3 != null && !var3.isEmpty() && var3.startsWith("TIE(")) {
         var7 = var3.substring(4, var3.length() - 1);
      }

      this.lePlanComptable.clear();
      if (var6.contains(";")) {
         new ArrayList();
         String[] var9 = var6.split(";");
         new Ecritures();

         for(int var11 = 0; var11 < var9.length; ++var11) {
            List var8 = this.chargerFacByProdStartWith(var1, var9[var11], 2, var7, var5);

            for(int var12 = 0; var12 < var8.size(); ++var12) {
               Ecritures var10 = (Ecritures)var8.get(var12);
               this.lesEcritures.add(var10);
            }
         }
      } else {
         this.lesEcritures = this.chargerFacByProdStartWith(var1, var6, 2, var7, var5);
      }

      this.calculSoldeforCompte(var1, this.lesEcritures, var4, var5);
      this.calculByOperateur();
   }

   public void vlndb(int var1, String var2, String var3, int var4, Session var5) throws HibernateException, NamingException, ParseException {
      String var6 = var2.substring(6, var2.length() - 1);
      String var7 = "";
      if (var3 != null && !var3.isEmpty() && var3.startsWith("TIE(")) {
         var7 = var3.substring(4, var3.length() - 1);
      }

      this.lePlanComptable.clear();
      if (var6.contains(";")) {
         new ArrayList();
         String[] var9 = var6.split(";");
         new Ecritures();

         for(int var11 = 0; var11 < var9.length; ++var11) {
            List var8 = this.chargerNdbByProdStartWith(var1, var9[var11], 2, var7, var5);

            for(int var12 = 0; var12 < var8.size(); ++var12) {
               Ecritures var10 = (Ecritures)var8.get(var12);
               this.lesEcritures.add(var10);
            }
         }
      } else {
         this.lesEcritures = this.chargerNdbByProdStartWith(var1, var6, 2, var7, var5);
      }

      this.calculSoldeforCompte(var1, this.lesEcritures, var4, var5);
      this.calculByOperateur();
   }

   public void vlavr(int var1, String var2, String var3, int var4, Session var5) throws HibernateException, NamingException, ParseException {
      String var6 = var2.substring(6, var2.length() - 1);
      String var7 = "";
      if (var3 != null && !var3.isEmpty() && var3.startsWith("TIE(")) {
         var7 = var3.substring(4, var3.length() - 1);
      }

      this.lePlanComptable.clear();
      if (var6.contains(";")) {
         new ArrayList();
         String[] var9 = var6.split(";");
         new Ecritures();

         for(int var11 = 0; var11 < var9.length; ++var11) {
            List var8 = this.chargerAvrByProdStartWith(var1, var9[var11], 2, var7, var5);

            for(int var12 = 0; var12 < var8.size(); ++var12) {
               Ecritures var10 = (Ecritures)var8.get(var12);
               this.lesEcritures.add(var10);
            }
         }
      } else {
         this.lesEcritures = this.chargerAvrByProdStartWith(var1, var6, 2, var7, var5);
      }

      this.calculSoldeforCompte(var1, this.lesEcritures, var4, var5);
      this.calculByOperateur();
   }

   public void vlach(int var1, String var2, String var3, int var4, Session var5) throws HibernateException, NamingException, ParseException {
      String var6 = var2.substring(6, var2.length() - 1);
      String var7 = "";
      if (var3 != null && !var3.isEmpty() && var3.startsWith("TIE(")) {
         var7 = var3.substring(4, var3.length() - 1);
      }

      this.lePlanComptable.clear();
      if (var6.contains(";")) {
         new ArrayList();
         String[] var9 = var6.split(";");
         new Ecritures();

         for(int var11 = 0; var11 < var9.length; ++var11) {
            List var8 = this.chargerAchByProdStartWith(var1, var9[var11], 2, var7, var5);

            for(int var12 = 0; var12 < var8.size(); ++var12) {
               Ecritures var10 = (Ecritures)var8.get(var12);
               this.lesEcritures.add(var10);
            }
         }
      } else {
         this.lesEcritures = this.chargerAchByProdStartWith(var1, var6, 2, var7, var5);
      }

      this.calculSoldeforCompte(var1, this.lesEcritures, var4, var5);
      this.calculByOperateur();
   }

   public void sal_nbr(int var1, String var2, Session var3) throws HibernateException, NamingException, ParseException {
      if (this.listSalaries.size() == 0) {
         this.tabResultats.setTabresNomFr("Chargement et traitement des bulletins de salaire (N)");
         Date var4 = this.utilDate.stringToDateSQLLight(this.var_date_periode_deb);
         Date var5 = this.utilDate.stringToDateSQLLight(this.var_date_periode_fin);
         this.listSalaries = this.bulletinLigneDao.chargerLesMvtsSalaries(var4, var5, this.var_jrxrsv, var3);
      }

      ArrayList var16 = new ArrayList();
      String var17 = var2.substring(8, var2.length() - 1);
      if (var17.contains(";")) {
         String[] var6 = var17.split(";");
         String var7 = var6[0];
         int var8 = Integer.parseInt(var6[1]);
         int var9 = Integer.parseInt(var6[2]);
         int var10 = Integer.parseInt(var6[3]);
         new Salaries();
         double var12 = 0.0D;
         if (this.listSalaries.size() != 0) {
            for(int var14 = 0; var14 < this.listSalaries.size(); ++var14) {
               Salaries var11 = (Salaries)this.listSalaries.get(var14);
               if ((var7.equals("0") && var11.getSalNature().startsWith(var7) || var7.equals("1") && (var11.getSalNature().equals("11") || var11.getSalNature().equals("12")) || var7.equals("2") && (var11.getSalNature().equals("13") || var11.getSalNature().equals("14") || var11.getSalNature().equals("15"))) && (var11.getSalGenre() == var8 || var8 == 2)) {
                  if (var9 == 0 && (var11.getSalClassement().equals("11") || var11.getSalClassement().equals("21") || var11.getSalClassement().equals("31")) || var9 == 1 && (var11.getSalClassement().equals("12") || var11.getSalClassement().equals("22") || var11.getSalClassement().equals("32")) || var9 == 2 && (var11.getSalClassement().equals("13") || var11.getSalClassement().equals("23") || var11.getSalClassement().equals("33") || var11.getSalClassement().equals("14") || var11.getSalClassement().equals("24") || var11.getSalClassement().equals("34"))) {
                     if (var10 == 0 && var11.getSalNivEmploi().equals("1") || var10 == 1 && var11.getSalNivEmploi().equals("2") || var10 == 2 && var11.getSalNivEmploi().equals("3") || var10 == 3 && (var11.getSalNivEmploi().equals("4") || var11.getSalNivEmploi().equals("5") || var11.getSalNivEmploi().equals("6"))) {
                        ++var12;
                     }
                  } else if (var9 >= 11 && var11.getSalClassement().equals("" + var9) && (var10 == 0 && var11.getSalNivEmploi().equals("1") || var10 == 1 && var11.getSalNivEmploi().equals("2") || var10 == 2 && var11.getSalNivEmploi().equals("3") || var10 == 3 && (var11.getSalNivEmploi().equals("4") || var11.getSalNivEmploi().equals("5") || var11.getSalNivEmploi().equals("6")))) {
                     ++var12;
                  }
               }
            }

            Date var18 = this.utilDate.stringToDateSQLLight(this.var_date_periode_deb);
            Ecritures var15 = new Ecritures();
            var15.setEcrAnnee("" + var18.getYear() + 1900);
            var15.setEcrCompte("" + var9);
            var15.setEcrDateSaisie(var18);
            var15.setEcrDebitPays(0.0D);
            var15.setEcrCreditPays(var12);
            var15.setEcrNature(0);
            var15.setEcrNatureJrx(0);
            var16.add(var15);
         }
      }

      this.calculSoldeforCompte(var1, var16, 1, var3);
      this.calculByOperateur();
   }

   public void sal_val(int var1, String var2, Session var3) throws HibernateException, NamingException, ParseException {
      if (this.listBulletins.size() == 0) {
         this.tabResultats.setTabresNomFr("Chargement et traitement des bulletins de salaire (N)");
         Date var4 = this.utilDate.stringToDateSQLLight(this.var_date_periode_deb);
         Date var5 = this.utilDate.stringToDateSQLLight(this.var_date_periode_fin);
         this.listBulletins = this.bulletinLigneDao.chargerLesMvts(var4, var5, this.var_jrxrsv, var3);
      }

      ArrayList var16 = new ArrayList();
      String var17 = var2.substring(8, var2.length() - 1);
      if (var17.contains(";")) {
         String[] var6 = var17.split(";");
         String var7 = var6[0];
         int var8 = Integer.parseInt(var6[1]);
         int var9 = Integer.parseInt(var6[2]);
         int var10 = Integer.parseInt(var6[3]);
         new BulletinLigne();
         double var12 = 0.0D;
         if (this.listBulletins.size() != 0) {
            for(int var14 = 0; var14 < this.listBulletins.size(); ++var14) {
               BulletinLigne var11 = (BulletinLigne)this.listBulletins.get(var14);
               if ((var7.equals("0") && var11.getSalaries().getSalNature().startsWith(var7) || var7.equals("1") && (var11.getSalaries().getSalNature().equals("11") || var11.getSalaries().getSalNature().equals("12")) || var7.equals("2") && (var11.getSalaries().getSalNature().equals("13") || var11.getSalaries().getSalNature().equals("14") || var11.getSalaries().getSalNature().equals("15"))) && (var11.getSalaries().getSalGenre() == var8 || var8 == 2)) {
                  if (var9 == 0 && (var11.getSalaries().getSalClassement().equals("11") || var11.getSalaries().getSalClassement().equals("21") || var11.getSalaries().getSalClassement().equals("31")) || var9 == 1 && (var11.getSalaries().getSalClassement().equals("12") || var11.getSalaries().getSalClassement().equals("22") || var11.getSalaries().getSalClassement().equals("32")) || var9 == 2 && (var11.getSalaries().getSalClassement().equals("13") || var11.getSalaries().getSalClassement().equals("23") || var11.getSalaries().getSalClassement().equals("33") || var11.getSalaries().getSalClassement().equals("14") || var11.getSalaries().getSalClassement().equals("24") || var11.getSalaries().getSalClassement().equals("34"))) {
                     if (var10 == 0 && var11.getSalaries().getSalNivEmploi().equals("1") || var10 == 1 && var11.getSalaries().getSalNivEmploi().equals("2") || var10 == 2 && var11.getSalaries().getSalNivEmploi().equals("3") || var10 == 3 && (var11.getSalaries().getSalNivEmploi().equals("4") || var11.getSalaries().getSalNivEmploi().equals("5") || var11.getSalaries().getSalNivEmploi().equals("6"))) {
                        var12 += var11.getBulligValColE();
                     }
                  } else if (var9 >= 11 && var11.getSalaries().getSalClassement().equals("" + var9) && (var10 == 0 && var11.getSalaries().getSalNivEmploi().equals("1") || var10 == 1 && var11.getSalaries().getSalNivEmploi().equals("2") || var10 == 2 && var11.getSalaries().getSalNivEmploi().equals("3") || var10 == 3 && (var11.getSalaries().getSalNivEmploi().equals("4") || var11.getSalaries().getSalNivEmploi().equals("5") || var11.getSalaries().getSalNivEmploi().equals("6")))) {
                     var12 += var11.getBulligValColE();
                  }
               }
            }

            Date var18 = this.utilDate.stringToDateSQLLight(this.var_date_periode_deb);
            Ecritures var15 = new Ecritures();
            var15.setEcrAnnee("" + var18.getYear() + 1900);
            var15.setEcrCompte("" + var9);
            var15.setEcrDateSaisie(var18);
            var15.setEcrDebitPays(0.0D);
            var15.setEcrCreditPays(var12);
            var15.setEcrNature(0);
            var15.setEcrNatureJrx(0);
            var16.add(var15);
         }
      }

      this.calculSoldeforCompte(var1, var16, 1, var3);
      this.calculByOperateur();
   }

   public void calculByOperateur() {
      if (this.operateur.equalsIgnoreCase("+")) {
         this.resultat1 += this.resultat2;
         this.resultat2 = 0.0D;
      } else if (this.operateur.equalsIgnoreCase("-")) {
         this.resultat1 = this.resultat2 - this.resultat1;
         this.resultat2 = 0.0D;
      } else if (this.operateur.equalsIgnoreCase("*")) {
         this.resultat1 = this.resultat2 * this.resultat1;
         this.resultat2 = 0.0D;
      } else if (this.operateur.equalsIgnoreCase("/")) {
         if (this.resultat1 != 0.0D) {
            this.resultat1 = this.utilNombre.myRound(this.resultat2 / this.resultat1, 4);
            this.resultat2 = 0.0D;
         } else {
            this.resultat1 = 0.0D;
            this.resultat2 = 0.0D;
         }
      }

   }

   public void renseigneCol(int var1, double var2, String var4) {
      if (var1 == 1) {
         this.tabResultats.setTabresCol01(var2);
         this.tabResultats.setTabresCon01(var4);
      } else if (var1 == 2) {
         this.tabResultats.setTabresCol02(var2);
         this.tabResultats.setTabresCon02(var4);
      } else if (var1 == 3) {
         this.tabResultats.setTabresCol03(var2);
         this.tabResultats.setTabresCon03(var4);
      } else if (var1 == 4) {
         this.tabResultats.setTabresCol04(var2);
         this.tabResultats.setTabresCon04(var4);
      } else if (var1 == 5) {
         this.tabResultats.setTabresCol05(var2);
         this.tabResultats.setTabresCon05(var4);
      } else if (var1 == 6) {
         this.tabResultats.setTabresCol06(var2);
         this.tabResultats.setTabresCon06(var4);
      } else if (var1 == 7) {
         this.tabResultats.setTabresCol07(var2);
         this.tabResultats.setTabresCon07(var4);
      } else if (var1 == 8) {
         this.tabResultats.setTabresCol08(var2);
         this.tabResultats.setTabresCon08(var4);
      } else if (var1 == 9) {
         this.tabResultats.setTabresCol09(var2);
         this.tabResultats.setTabresCon09(var4);
      } else if (var1 == 10) {
         this.tabResultats.setTabresCol10(var2);
         this.tabResultats.setTabresCon10(var4);
      } else if (var1 == 11) {
         this.tabResultats.setTabresCol11(var2);
         this.tabResultats.setTabresCon11(var4);
      } else if (var1 == 12) {
         this.tabResultats.setTabresCol12(var2);
         this.tabResultats.setTabresCon12(var4);
      } else if (var1 == 13) {
         this.tabResultats.setTabresCol13(var2);
         this.tabResultats.setTabresCon13(var4);
      } else if (var1 == 14) {
         this.tabResultats.setTabresCol14(var2);
         this.tabResultats.setTabresCon14(var4);
      } else if (var1 == 15) {
         this.tabResultats.setTabresCol15(var2);
         this.tabResultats.setTabresCon15(var4);
      } else if (var1 == 16) {
         this.tabResultats.setTabresCol16(var2);
         this.tabResultats.setTabresCon16(var4);
      } else if (var1 == 17) {
         this.tabResultats.setTabresCol17(var2);
         this.tabResultats.setTabresCon17(var4);
      } else if (var1 == 18) {
         this.tabResultats.setTabresCol18(var2);
         this.tabResultats.setTabresCon18(var4);
      } else if (var1 == 19) {
         this.tabResultats.setTabresCol19(var2);
         this.tabResultats.setTabresCon19(var4);
      } else if (var1 == 20) {
         this.tabResultats.setTabresCol20(var2);
         this.tabResultats.setTabresCon20(var4);
      }

   }

   public double recuperSomH(int var1, int var2, TabResultats var3) {
      double var4 = 0.0D;

      for(int var6 = var1; var6 <= var2; ++var6) {
         if (var6 == 1) {
            var4 += var3.getTabresCol01();
         } else if (var6 == 2) {
            var4 += var3.getTabresCol02();
         } else if (var6 == 3) {
            var4 += var3.getTabresCol03();
         } else if (var6 == 4) {
            var4 += var3.getTabresCol04();
         } else if (var6 == 5) {
            var4 += var3.getTabresCol05();
         } else if (var6 == 6) {
            var4 += var3.getTabresCol06();
         } else if (var6 == 7) {
            var4 += var3.getTabresCol07();
         } else if (var6 == 8) {
            var4 += var3.getTabresCol08();
         } else if (var6 == 9) {
            var4 += var3.getTabresCol09();
         } else if (var6 == 10) {
            var4 += var3.getTabresCol10();
         } else if (var6 == 11) {
            var4 += var3.getTabresCol11();
         } else if (var6 == 12) {
            var4 += var3.getTabresCol12();
         } else if (var6 == 13) {
            var4 += var3.getTabresCol13();
         } else if (var6 == 14) {
            var4 += var3.getTabresCol14();
         } else if (var6 == 15) {
            var4 += var3.getTabresCol15();
         } else if (var6 == 16) {
            var4 += var3.getTabresCol16();
         } else if (var6 == 17) {
            var4 += var3.getTabresCol17();
         } else if (var6 == 18) {
            var4 += var3.getTabresCol18();
         } else if (var6 == 19) {
            var4 += var3.getTabresCol19();
         } else if (var6 == 20) {
            var4 += var3.getTabresCol20();
         }
      }

      this.resultat1 = var4;
      return var4;
   }

   public double recuperDifH(int var1, int var2, TabResultats var3) {
      double var4 = 0.0D;
      double var6 = 0.0D;
      boolean var8 = false;

      for(int var9 = var1; var9 <= var2; ++var9) {
         if (var9 == 1) {
            var4 = var3.getTabresCol01();
         } else if (var9 == 2) {
            var4 = var3.getTabresCol02();
         } else if (var9 == 3) {
            var4 = var3.getTabresCol03();
         } else if (var9 == 4) {
            var4 = var3.getTabresCol04();
         } else if (var9 == 5) {
            var4 = var3.getTabresCol05();
         } else if (var9 == 6) {
            var4 = var3.getTabresCol06();
         } else if (var9 == 7) {
            var4 = var3.getTabresCol07();
         } else if (var9 == 8) {
            var4 = var3.getTabresCol08();
         } else if (var9 == 9) {
            var4 = var3.getTabresCol09();
         } else if (var9 == 10) {
            var4 = var3.getTabresCol10();
         } else if (var9 == 11) {
            var4 = var3.getTabresCol11();
         } else if (var9 == 12) {
            var4 = var3.getTabresCol12();
         } else if (var9 == 13) {
            var4 = var3.getTabresCol13();
         } else if (var9 == 14) {
            var4 = var3.getTabresCol14();
         } else if (var9 == 15) {
            var4 = var3.getTabresCol15();
         } else if (var9 == 16) {
            var4 = var3.getTabresCol16();
         } else if (var9 == 17) {
            var4 = var3.getTabresCol17();
         } else if (var9 == 18) {
            var4 = var3.getTabresCol18();
         } else if (var9 == 19) {
            var4 = var3.getTabresCol19();
         } else if (var9 == 20) {
            var4 = var3.getTabresCol20();
         }

         if (!var8) {
            var6 = var4;
            var8 = true;
         } else {
            var6 -= var4;
            var8 = false;
         }

         var4 = 0.0D;
      }

      this.resultat1 = var6;
      return var6;
   }

   public double recuperSomV(String var1, String var2, int var3, List var4) {
      double var5 = 0.0D;
      boolean var7 = false;
      new TabResultats();

      for(int var9 = 0; var9 < var4.size(); ++var9) {
         TabResultats var8 = (TabResultats)var4.get(var9);
         if (var8.getTabresReference() != null && var8.getTabresReference().equalsIgnoreCase(var1)) {
            var7 = true;
         }

         if (var7 && var8.getTabresType() == 3 && var8.getTabresMode() == 0) {
            if (var3 == 1) {
               var5 += var8.getTabresCol01();
            } else if (var3 == 2) {
               var5 += var8.getTabresCol02();
            } else if (var3 == 3) {
               var5 += var8.getTabresCol03();
            } else if (var3 == 4) {
               var5 += var8.getTabresCol04();
            } else if (var3 == 5) {
               var5 += var8.getTabresCol05();
            } else if (var3 == 6) {
               var5 += var8.getTabresCol06();
            } else if (var3 == 7) {
               var5 += var8.getTabresCol07();
            } else if (var3 == 8) {
               var5 += var8.getTabresCol08();
            } else if (var3 == 9) {
               var5 += var8.getTabresCol09();
            } else if (var3 == 10) {
               var5 += var8.getTabresCol10();
            } else if (var3 == 11) {
               var5 += var8.getTabresCol11();
            } else if (var3 == 12) {
               var5 += var8.getTabresCol12();
            } else if (var3 == 13) {
               var5 += var8.getTabresCol13();
            } else if (var3 == 14) {
               var5 += var8.getTabresCol14();
            } else if (var3 == 15) {
               var5 += var8.getTabresCol15();
            } else if (var3 == 16) {
               var5 += var8.getTabresCol16();
            } else if (var3 == 17) {
               var5 += var8.getTabresCol17();
            } else if (var3 == 18) {
               var5 += var8.getTabresCol18();
            } else if (var3 == 19) {
               var5 += var8.getTabresCol19();
            } else if (var3 == 20) {
               var5 += var8.getTabresCol20();
            }
         }

         if (var8.getTabresReference() != null && var8.getTabresReference().equalsIgnoreCase(var2)) {
            var7 = false;
            break;
         }
      }

      this.resultat1 = var5;
      return var5;
   }

   public double recuperSousTotal(int var1, int var2, List var3) {
      double var4 = 0.0D;
      boolean var6 = true;
      new TabResultats();

      for(int var8 = var1; var8 != 0; --var8) {
         TabResultats var7 = (TabResultats)var3.get(var8);
         if (var7.getTabresType() <= 2) {
            var6 = false;
         }

         if (var6 && var7.getTabresType() == 3 && var7.getTabresMode() == 0) {
            if (var2 == 1) {
               var4 += var7.getTabresCol01();
            } else if (var2 == 2) {
               var4 += var7.getTabresCol02();
            } else if (var2 == 3) {
               var4 += var7.getTabresCol03();
            } else if (var2 == 4) {
               var4 += var7.getTabresCol04();
            } else if (var2 == 5) {
               var4 += var7.getTabresCol05();
            } else if (var2 == 6) {
               var4 += var7.getTabresCol06();
            } else if (var2 == 7) {
               var4 += var7.getTabresCol07();
            } else if (var2 == 8) {
               var4 += var7.getTabresCol08();
            } else if (var2 == 9) {
               var4 += var7.getTabresCol09();
            } else if (var2 == 10) {
               var4 += var7.getTabresCol10();
            } else if (var2 == 11) {
               var4 += var7.getTabresCol11();
            } else if (var2 == 12) {
               var4 += var7.getTabresCol12();
            } else if (var2 == 13) {
               var4 += var7.getTabresCol13();
            } else if (var2 == 14) {
               var4 += var7.getTabresCol14();
            } else if (var2 == 15) {
               var4 += var7.getTabresCol15();
            } else if (var2 == 16) {
               var4 += var7.getTabresCol16();
            } else if (var2 == 17) {
               var4 += var7.getTabresCol17();
            } else if (var2 == 18) {
               var4 += var7.getTabresCol18();
            } else if (var2 == 19) {
               var4 += var7.getTabresCol19();
            } else if (var2 == 20) {
               var4 += var7.getTabresCol20();
            }
         }

         if (var7.getTabresType() <= 2) {
            var6 = false;
            break;
         }
      }

      this.resultat1 = var4;
      return var4;
   }

   public double recuperTotalTableau(int var1, List var2) {
      double var3 = 0.0D;
      new TabResultats();

      for(int var6 = 0; var6 < var2.size(); ++var6) {
         TabResultats var5 = (TabResultats)var2.get(var6);
         if (var5.getTabresType() == 3 && var5.getTabresMode() == 0) {
            if (var1 == 1) {
               var3 += var5.getTabresCol01();
            } else if (var1 == 2) {
               var3 += var5.getTabresCol02();
            } else if (var1 == 3) {
               var3 += var5.getTabresCol03();
            } else if (var1 == 4) {
               var3 += var5.getTabresCol04();
            } else if (var1 == 5) {
               var3 += var5.getTabresCol05();
            } else if (var1 == 6) {
               var3 += var5.getTabresCol06();
            } else if (var1 == 7) {
               var3 += var5.getTabresCol07();
            } else if (var1 == 8) {
               var3 += var5.getTabresCol08();
            } else if (var1 == 9) {
               var3 += var5.getTabresCol09();
            } else if (var1 == 10) {
               var3 += var5.getTabresCol10();
            } else if (var1 == 11) {
               var3 += var5.getTabresCol11();
            } else if (var1 == 12) {
               var3 += var5.getTabresCol12();
            } else if (var1 == 13) {
               var3 += var5.getTabresCol13();
            } else if (var1 == 14) {
               var3 += var5.getTabresCol14();
            } else if (var1 == 15) {
               var3 += var5.getTabresCol15();
            } else if (var1 == 16) {
               var3 += var5.getTabresCol16();
            } else if (var1 == 17) {
               var3 += var5.getTabresCol17();
            } else if (var1 == 18) {
               var3 += var5.getTabresCol18();
            } else if (var1 == 19) {
               var3 += var5.getTabresCol19();
            } else if (var1 == 20) {
               var3 += var5.getTabresCol20();
            }
         }
      }

      this.resultat1 = var3;
      return var3;
   }

   public double recuperCelRefCol(String var1, int var2, List var3) {
      double var4 = 0.0D;
      new TabResultats();

      for(int var7 = 0; var7 < var3.size(); ++var7) {
         TabResultats var6 = (TabResultats)var3.get(var7);
         if (var6.getTabresReference() != null && var6.getTabresReference().equalsIgnoreCase(var1)) {
            if (var2 == 1) {
               var4 = var6.getTabresCol01();
               break;
            }

            if (var2 == 2) {
               var4 = var6.getTabresCol02();
               break;
            }

            if (var2 == 3) {
               var4 = var6.getTabresCol03();
               break;
            }

            if (var2 == 4) {
               var4 = var6.getTabresCol04();
               break;
            }

            if (var2 == 5) {
               var4 = var6.getTabresCol05();
               break;
            }

            if (var2 == 6) {
               var4 = var6.getTabresCol06();
               break;
            }

            if (var2 == 7) {
               var4 = var6.getTabresCol07();
               break;
            }

            if (var2 == 8) {
               var4 = var6.getTabresCol08();
               break;
            }

            if (var2 == 9) {
               var4 = var6.getTabresCol09();
               break;
            }

            if (var2 == 10) {
               var4 = var6.getTabresCol10();
               break;
            }

            if (var2 == 11) {
               var4 = var6.getTabresCol11();
               break;
            }

            if (var2 == 12) {
               var4 = var6.getTabresCol12();
               break;
            }

            if (var2 == 13) {
               var4 = var6.getTabresCol13();
               break;
            }

            if (var2 == 14) {
               var4 = var6.getTabresCol14();
               break;
            }

            if (var2 == 15) {
               var4 = var6.getTabresCol15();
               break;
            }

            if (var2 == 16) {
               var4 = var6.getTabresCol16();
               break;
            }

            if (var2 == 17) {
               var4 = var6.getTabresCol17();
               break;
            }

            if (var2 == 18) {
               var4 = var6.getTabresCol18();
               break;
            }

            if (var2 == 19) {
               var4 = var6.getTabresCol19();
               break;
            }

            if (var2 == 20) {
               var4 = var6.getTabresCol20();
               break;
            }
         }
      }

      this.resultat1 = var4;
      return var4;
   }

   public double recuperCelTabRefCol(String var1, String var2, int var3, Session var4) throws HibernateException, NamingException {
      double var5 = 0.0D;
      new TabResultats();
      TabResultats var7 = this.tabResultatsDao.recuperCelTabRefCol(var4, this.var_exercice, var2, var1);
      if (var7 != null) {
         if (var3 == 1) {
            var5 = var7.getTabresCol01();
         } else if (var3 == 2) {
            var5 = var7.getTabresCol02();
         } else if (var3 == 3) {
            var5 = var7.getTabresCol03();
         } else if (var3 == 4) {
            var5 = var7.getTabresCol04();
         } else if (var3 == 5) {
            var5 = var7.getTabresCol05();
         } else if (var3 == 6) {
            var5 = var7.getTabresCol06();
         } else if (var3 == 7) {
            var5 = var7.getTabresCol07();
         } else if (var3 == 8) {
            var5 = var7.getTabresCol08();
         } else if (var3 == 9) {
            var5 = var7.getTabresCol09();
         } else if (var3 == 10) {
            var5 = var7.getTabresCol10();
         } else if (var3 == 11) {
            var5 = var7.getTabresCol11();
         } else if (var3 == 12) {
            var5 = var7.getTabresCol12();
         } else if (var3 == 13) {
            var5 = var7.getTabresCol13();
         } else if (var3 == 14) {
            var5 = var7.getTabresCol14();
         } else if (var3 == 15) {
            var5 = var7.getTabresCol15();
         } else if (var3 == 16) {
            var5 = var7.getTabresCol16();
         } else if (var3 == 17) {
            var5 = var7.getTabresCol17();
         } else if (var3 == 18) {
            var5 = var7.getTabresCol18();
         } else if (var3 == 19) {
            var5 = var7.getTabresCol19();
         } else if (var3 == 20) {
            var5 = var7.getTabresCol20();
         }
      } else {
         var5 = 0.0D;
      }

      this.resultat1 = var5;
      return var5;
   }

   public double recuperCelTabRefCol(String var1, String var2, int var3, String var4, String var5, Session var6) throws HibernateException, NamingException {
      double var7 = 0.0D;
      new TabResultats();
      TabResultats var9 = this.tabResultatsDao.recuperCelTabRefCol(var6, this.var_exercice, var2, var1, var4, var5);
      if (var9 != null) {
         if (var3 == 1) {
            var7 = var9.getTabresCol01();
         } else if (var3 == 2) {
            var7 = var9.getTabresCol02();
         } else if (var3 == 3) {
            var7 = var9.getTabresCol03();
         } else if (var3 == 4) {
            var7 = var9.getTabresCol04();
         } else if (var3 == 5) {
            var7 = var9.getTabresCol05();
         } else if (var3 == 6) {
            var7 = var9.getTabresCol06();
         } else if (var3 == 7) {
            var7 = var9.getTabresCol07();
         } else if (var3 == 8) {
            var7 = var9.getTabresCol08();
         } else if (var3 == 9) {
            var7 = var9.getTabresCol09();
         } else if (var3 == 10) {
            var7 = var9.getTabresCol10();
         } else if (var3 == 11) {
            var7 = var9.getTabresCol11();
         } else if (var3 == 12) {
            var7 = var9.getTabresCol12();
         } else if (var3 == 13) {
            var7 = var9.getTabresCol13();
         } else if (var3 == 14) {
            var7 = var9.getTabresCol14();
         } else if (var3 == 15) {
            var7 = var9.getTabresCol15();
         } else if (var3 == 16) {
            var7 = var9.getTabresCol16();
         } else if (var3 == 17) {
            var7 = var9.getTabresCol17();
         } else if (var3 == 18) {
            var7 = var9.getTabresCol18();
         } else if (var3 == 19) {
            var7 = var9.getTabresCol19();
         } else if (var3 == 20) {
            var7 = var9.getTabresCol20();
         }
      } else {
         var7 = 0.0D;
      }

      this.resultat1 = var7;
      return var7;
   }

   public List chargerEcrituresByNumCpteStartWith(int var1, String var2, String var3, int var4, CptTabFormule var5, Session var6) throws HibernateException, NamingException, ParseException {
      Object var7 = new ArrayList();
      if (this.cptTabNom.getTablisType() == 1) {
         var7 = this.calculeTableaudeBord((List)var7, var1, var2, var3, var4, var5, var6);
      } else {
         this.calculeEtatFinancier((List)var7, var1, var2, var3, var4, var5, var6);
      }

      return (List)var7;
   }

   public List calculeTableaudeBord(List var1, int var2, String var3, String var4, int var5, CptTabFormule var6, Session var7) throws HibernateException, NamingException, ParseException {
      List var8;
      ArrayList var12;
      if (var4 != null && !var4.isEmpty()) {
         new ArrayList();
         ArrayList var34 = new ArrayList();
         ArrayList var36 = new ArrayList();
         ArrayList var35 = new ArrayList();
         var12 = new ArrayList();
         ArrayList var37 = new ArrayList();
         ArrayList var38 = new ArrayList();
         ArrayList var39 = new ArrayList();
         ArrayList var16 = new ArrayList();
         ArrayList var17 = new ArrayList();
         ArrayList var18 = new ArrayList();
         ArrayList var19 = new ArrayList();
         ArrayList var20 = new ArrayList();
         ArrayList var21 = new ArrayList();
         ArrayList var22 = new ArrayList();
         ArrayList var23 = new ArrayList();
         ArrayList var24 = new ArrayList();
         ArrayList var25 = new ArrayList();
         ArrayList var26 = new ArrayList();
         ArrayList var27 = new ArrayList();
         ArrayList var28 = new ArrayList();
         String var29;
         String[] var30;
         int var31;
         if (var4 != null && !var4.isEmpty() && var4.startsWith("ACT(") && var4.endsWith(")")) {
            var29 = var4.substring(4, var4.length() - 1);
            if (var29.contains(";")) {
               var30 = var29.split(";");

               for(var31 = 0; var31 < var30.length; ++var31) {
                  this.lesActivites.add(var30[var31]);
               }
            } else {
               this.lesActivites.add(var29);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.startsWith("AC1(") && var4.endsWith(")")) {
            var29 = var4.substring(4, var4.length() - 1);
            if (var29.contains(";")) {
               var30 = var29.split(";");

               for(var31 = 0; var31 < var30.length; ++var31) {
                  var36.add(var30[var31]);
               }
            } else {
               var36.add(var29);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.startsWith("AC2(") && var4.endsWith(")")) {
            var29 = var4.substring(4, var4.length() - 1);
            if (var29.contains(";")) {
               var30 = var29.split(";");

               for(var31 = 0; var31 < var30.length; ++var31) {
                  var35.add(var30[var31]);
               }
            } else {
               var35.add(var29);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.startsWith("AC3(") && var4.endsWith(")")) {
            var29 = var4.substring(4, var4.length() - 1);
            if (var29.contains(";")) {
               var30 = var29.split(";");

               for(var31 = 0; var31 < var30.length; ++var31) {
                  var12.add(var30[var31]);
               }
            } else {
               var12.add(var29);
            }
         } else if (var4 != null && !var4.isEmpty() && var4.startsWith("ACX(") && var4.endsWith(")")) {
            var29 = var4.substring(4, var4.length() - 1);
            if (var29.contains(":")) {
               var30 = var29.split(":");

               for(var31 = 0; var31 < var30.length; ++var31) {
                  if (var31 == 0) {
                     var36.add(var30[var31]);
                  } else if (var31 == 1) {
                     var35.add(var30[var31]);
                  } else if (var31 == 2) {
                     var12.add(var30[var31]);
                  }
               }
            } else {
               var36.add(var29);
            }
         } else if (var6.getTabforSite() != null && !var6.getTabforSite().isEmpty() && var6.getTabforSite().contains("SIT")) {
            var29 = var6.getTabforSite().substring(4, var6.getTabforSite().length() - 1);
            if (var29.contains(";")) {
               var30 = var29.split(";");

               for(var31 = 0; var31 < var30.length; ++var31) {
                  var37.add(var30[var31]);
               }
            } else {
               var37.add(var29);
            }
         } else if (var6.getTabforDepartement() != null && !var6.getTabforDepartement().isEmpty() && var6.getTabforDepartement().contains("DEP")) {
            var29 = var6.getTabforDepartement().substring(4, var6.getTabforDepartement().length() - 1);
            if (var29.contains(";")) {
               var30 = var29.split(";");

               for(var31 = 0; var31 < var30.length; ++var31) {
                  var38.add(var30[var31]);
               }
            } else {
               var38.add(var29);
            }
         } else if (var6.getTabforService() != null && !var6.getTabforService().isEmpty() && var6.getTabforService().contains("SER")) {
            var29 = var6.getTabforService().substring(4, var6.getTabforService().length() - 1);
            if (var29.contains(";")) {
               var30 = var29.split(";");

               for(var31 = 0; var31 < var30.length; ++var31) {
                  var39.add(var30[var31]);
               }
            } else {
               var39.add(var29);
            }
         } else if (var6.getTabforRegion() != null && !var6.getTabforRegion().isEmpty() && var6.getTabforRegion().contains("REG")) {
            var29 = var6.getTabforRegion().substring(4, var6.getTabforRegion().length() - 1);
            if (var29.contains(";")) {
               var30 = var29.split(";");

               for(var31 = 0; var31 < var30.length; ++var31) {
                  var16.add(var30[var31]);
               }
            } else {
               var16.add(var29);
            }
         } else if (var6.getTabforSecteur() != null && !var6.getTabforSecteur().isEmpty() && var6.getTabforSecteur().contains("SEC")) {
            var29 = var6.getTabforSecteur().substring(4, var6.getTabforSecteur().length() - 1);
            if (var29.contains(";")) {
               var30 = var29.split(";");

               for(var31 = 0; var31 < var30.length; ++var31) {
                  var17.add(var30[var31]);
               }
            } else {
               var17.add(var29);
            }
         } else if (var6.getTabforPdv() != null && !var6.getTabforPdv().isEmpty() && var6.getTabforPdv().contains("PDV")) {
            var29 = var6.getTabforPdv().substring(4, var6.getTabforPdv().length() - 1);
            if (var29.contains(";")) {
               var30 = var29.split(";");

               for(var31 = 0; var31 < var30.length; ++var31) {
                  var18.add(var30[var31]);
               }
            } else {
               var18.add(var29);
            }
         }

         if (var6.getTabforDossier() != null && !var6.getTabforDossier().isEmpty() && var6.getTabforDossier().contains("DOS")) {
            var29 = var6.getTabforDossier().substring(4, var6.getTabforDossier().length() - 1);
            if (var29.contains(";")) {
               var30 = var29.split(";");

               for(var31 = 0; var31 < var30.length; ++var31) {
                  var22.add(var30[var31]);
               }
            } else {
               var22.add(var29);
            }
         }

         if (var6.getTabforParc() != null && !var6.getTabforParc().isEmpty() && var6.getTabforParc().contains("PRC")) {
            var29 = var6.getTabforParc().substring(4, var6.getTabforParc().length() - 1);
            if (var29.contains(";")) {
               var30 = var29.split(";");

               for(var31 = 0; var31 < var30.length; ++var31) {
                  var23.add(var30[var31]);
               }
            } else {
               var23.add(var29);
            }
         }

         var29 = null;
         var30 = null;
         Date var40;
         Date var41;
         if (var2 == 19) {
            var40 = this.utilDate.stringToDateSQLLight(this.var_exercice + "-01-01");
            var41 = this.utilDate.stringToDateSQLLight(this.var_exercice + "-12-31");
         } else if (var2 == 39) {
            var40 = this.utilDate.stringToDateSQLLight(this.var_exercice + "-01-01");
            var41 = this.utilDate.stringToDateSQLLight(this.var_exercice + "-12-31");
         } else if (var2 == 59) {
            var40 = this.utilDate.stringToDateSQLLight(this.var_exercice + "-01-01");
            var41 = this.utilDate.stringToDateSQLLight(this.var_exercice + "-12-31");
         } else {
            var40 = this.utilDate.stringToDateSQLLight(this.var_date_periode_deb);
            var41 = this.utilDate.stringToDateSQLLight(this.var_date_periode_fin);
         }

         var8 = this.ecrituresAnalytiquesDao.recherche(var7, this.selectedExo.getExecpt_id(), var40, var41, this.var_jrxsit, this.var_jrxrsv, this.decoupageActivite, var34, var36, var35, var12, var37, var38, var39, var16, var17, var18, var19, var20, var21, var22, var23, var24, var3, (String)null, var27, var28, var25, var26);
         if (var8.size() != 0) {
            new EcrituresAnalytique();

            for(int var32 = 0; var32 < var8.size(); ++var32) {
               EcrituresAnalytique var42 = (EcrituresAnalytique)var8.get(var32);
               Ecritures var33 = new Ecritures();
               var33.setEcrAnnee(var42.getEcritures().getEcrAnnee());
               var33.setEcrCompte(var42.getEcranaCompte());
               var33.setEcrDateSaisie(var42.getEcritures().getEcrDateSaisie());
               if (var42.getEcritures().getEcrCreditSaisie() != 0.0D && var42.getEcritures().getEcrDebitSaisie() == 0.0D) {
                  var33.setEcrDebitPays(0.0D);
                  var33.setEcrCreditPays(var42.getEcranaMontantSaisie());
               } else {
                  var33.setEcrDebitPays(var42.getEcranaMontantSaisie());
                  var33.setEcrCreditPays(0.0D);
               }

               var33.setEcrNature(var42.getEcranaNature());
               var33.setEcrNatureJrx(var42.getEcranaNatureJrx());
               var1.add(var33);
            }
         }
      } else {
         new ArrayList();
         Date var9 = null;
         Date var10 = null;
         if (var2 == 19) {
            var9 = this.utilDate.stringToDateSQLLight(this.var_exercice + "-01-01");
            var10 = this.utilDate.stringToDateSQLLight(this.var_exercice + "-12-31");
         } else if (var2 == 39) {
            var9 = this.utilDate.stringToDateSQLLight(this.var_exercice + "-01-01");
            var10 = this.utilDate.stringToDateSQLLight(this.var_exercice + "-12-31");
         } else if (var2 == 59) {
            var9 = this.utilDate.stringToDateSQLLight(this.var_exercice + "-01-01");
            var10 = this.utilDate.stringToDateSQLLight(this.var_exercice + "-12-31");
         } else {
            var9 = this.utilDate.stringToDateSQLLight(this.var_date_periode_deb);
            var10 = this.utilDate.stringToDateSQLLight(this.var_date_periode_fin);
         }

         if (this.optionComptabilite.getTri_extrait() == null || this.optionComptabilite.getTri_extrait().isEmpty() || this.optionComptabilite.getTri_extrait().equals("piece")) {
            this.optionComptabilite.setTri_extrait("0");
         }

         int var11 = Integer.parseInt(this.optionComptabilite.getTri_extrait());
         var12 = new ArrayList();
         var8 = this.ecrituresDao.chargerExtraitClasse(var9, var10, var3, this.var_jrxsit, this.var_jrxrsv, "", "", "", "", "", "", var12, (List)null, "", 0.0D, "", "", var11, var7);
         if (var8.size() != 0) {
            new Ecritures();

            for(int var14 = 0; var14 < var8.size(); ++var14) {
               Ecritures var13 = (Ecritures)var8.get(var14);
               Ecritures var15 = new Ecritures();
               var15.setEcrAnnee(var13.getEcrAnnee());
               var15.setEcrCompte(var13.getEcrCompte());
               var15.setEcrDateSaisie(var13.getEcrDateSaisie());
               var15.setEcrDebitPays(var13.getEcrDebitPays());
               var15.setEcrCreditPays(var13.getEcrCreditPays());
               var15.setEcrNature(var13.getEcrNature());
               var15.setEcrNatureJrx(var13.getEcrNatureJrx());
               var1.add(var15);
            }
         }
      }

      return var1;
   }

   public List calculeEtatFinancier(List var1, int var2, String var3, String var4, int var5, CptTabFormule var6, Session var7) throws HibernateException, NamingException {
      int var9;
      if (var5 != 2 && var5 != 3 && var5 != 12 && var5 != 13 && var5 != 25 && var5 != 26) {
         this.elementEnCours = var3 + "/" + this.var_exercice;
         if (this.balanceListe.size() != 0) {
            new EcrituresLight();

            for(var9 = 0; var9 < this.balanceListe.size(); ++var9) {
               EcrituresLight var11 = (EcrituresLight)this.balanceListe.get(var9);
               if (var11.getEcrCompte().startsWith(var3) && var11.getEcrAnnee().equals("" + this.var_exercice)) {
                  Ecritures var12 = new Ecritures();
                  var12.setEcrAnnee(var11.getEcrAnnee());
                  var12.setEcrCompte(var11.getEcrCompte());
                  var12.setEcrDateSaisie(var11.getEcrDateSaisie());
                  var12.setEcrDebitPays(var11.getEcrDebitSaisie());
                  var12.setEcrCreditPays(var11.getEcrCreditSaisie());
                  var12.setEcrNature(var11.getEcrNature());
                  var12.setEcrNatureJrx(var11.getEcrNatureJrx());
                  var1.add(var12);
               }
            }
         }
      } else {
         List var8;
         PlanComptable var10;
         if (this.optionComptabilite.getPlanCpteLiasse().equals("1")) {
            new ArrayList();
            var8 = this.ecrituresDao.chargerLesComptes(this.var_exercice, var3, var7);
            if (var8.size() != 0) {
               for(var9 = 0; var9 < var8.size(); ++var9) {
                  var10 = new PlanComptable();
                  var10.setPlcCompte(((Ecritures)var8.get(var9)).getEcrCompte());
                  var10.setPlcLibelleCpteFR(((Ecritures)var8.get(var9)).getEcrLibCompte());
                  this.lePlanComptable.add(var10);
               }
            }
         } else {
            new ArrayList();
            var8 = this.planComptableDao.chargerlesNumCpte((String)null, var3, this.var_exercice, "", var7);

            for(var9 = 0; var9 < var8.size(); ++var9) {
               var10 = (PlanComptable)var8.get(var9);
               if (var10.getPlcCompteSyscohada() != null && !var10.getPlcCompteSyscohada().isEmpty()) {
                  var10.setPlcCompte(var10.getPlcCompteSyscohada());
               }

               this.lePlanComptable.add(var10);
            }
         }
      }

      return var1;
   }

   public List chargerEcrituresByNumCpte(int var1, String var2, Session var3) {
      ArrayList var4 = new ArrayList();
      if (this.balanceListe.size() != 0 && this.cptTabNom.getTablisType() == 0) {
         new EcrituresLight();

         for(int var6 = 0; var6 < this.balanceListe.size(); ++var6) {
            EcrituresLight var5 = (EcrituresLight)this.balanceListe.get(var6);
            if (var5.getEcrCompte().equals(var2) && var5.getEcrAnnee().equals("" + this.var_exercice)) {
               Ecritures var7 = new Ecritures();
               var7.setEcrAnnee(var5.getEcrAnnee());
               var7.setEcrCompte(var5.getEcrCompte());
               var7.setEcrDateSaisie(var5.getEcrDateSaisie());
               var7.setEcrDebitPays(var5.getEcrDebitSaisie());
               var7.setEcrCreditPays(var5.getEcrCreditSaisie());
               var7.setEcrNature(var5.getEcrNature());
               var7.setEcrNatureJrx(var5.getEcrNatureJrx());
               var4.add(var7);
            }
         }
      }

      return var4;
   }

   public List chargerBudgetsByNumCpteStartWith(int var1, List var2, int var3, String var4, String var5, Session var6) throws HibernateException, NamingException, ParseException {
      ArrayList var7 = new ArrayList();
      if (this.cptTabNom.getTablisType() == 1) {
         ArrayList var8 = new ArrayList();
         new ArrayList();
         String var10;
         BudgetDao var11;
         int var14;
         if (var5 != null && !var5.isEmpty()) {
            var10 = var5.substring(7, var5.length() - 1);
            var11 = new BudgetDao(this.baseLog, this.utilInitHibernate);
            new ArrayList();
            List var12;
            if (!var10.contains(";")) {
               var12 = var11.chargerLesBudgets(var10, var6);
               if (var12.size() != 0) {
                  for(int var35 = 0; var35 < var12.size(); ++var35) {
                     var8.add(((Budget)var12.get(var35)).getBudCode());
                  }
               }
            } else {
               String[] var13 = var10.split(";");

               for(var14 = 0; var14 < var13.length; ++var14) {
                  var12 = var11.chargerLesBudgets(var13[var14], var6);
                  if (var12.size() != 0) {
                     for(int var15 = 0; var15 < var12.size(); ++var15) {
                        var8.add(((Budget)var12.get(var15)).getBudCode());
                     }
                  }
               }
            }
         }

         var10 = null;
         var11 = null;
         Date var32;
         Date var33;
         if (var1 == 19) {
            var32 = this.utilDate.stringToDateSQLLight(this.var_exercice + "-01-01");
            var33 = this.utilDate.stringToDateSQLLight(this.var_exercice + "-12-31");
         } else if (var1 == 39) {
            var32 = this.utilDate.stringToDateSQLLight(this.var_exercice + "-01-01");
            var33 = this.utilDate.stringToDateSQLLight(this.var_exercice + "-12-31");
         } else if (var1 == 59) {
            var32 = this.utilDate.stringToDateSQLLight(this.var_exercice + "-01-01");
            var33 = this.utilDate.stringToDateSQLLight(this.var_exercice + "-12-31");
         } else {
            var32 = this.utilDate.stringToDateSQLLight(this.var_date_periode_deb);
            var33 = this.utilDate.stringToDateSQLLight(this.var_date_periode_fin);
         }

         String var34 = "" + (var32.getYear() + 1900);
         List var9;
         if (var4 != null && !var4.isEmpty()) {
            this.elementEnCours = var4 + "/" + this.var_exercice;
            ArrayList var36 = new ArrayList();
            ArrayList var38 = new ArrayList();
            ArrayList var39 = new ArrayList();
            ArrayList var16 = new ArrayList();
            ArrayList var17 = new ArrayList();
            ArrayList var18 = new ArrayList();
            ArrayList var19 = new ArrayList();
            ArrayList var20 = new ArrayList();
            ArrayList var21 = new ArrayList();
            ArrayList var22 = new ArrayList();
            ArrayList var23 = new ArrayList();
            ArrayList var24 = new ArrayList();
            ArrayList var25 = new ArrayList();
            ArrayList var26 = new ArrayList();
            ArrayList var27 = new ArrayList();
            ArrayList var28 = new ArrayList();
            String var29;
            String[] var30;
            int var31;
            if (var4 != null && !var4.isEmpty() && var4.startsWith("ACT(") && var4.endsWith(")")) {
               var29 = var4.substring(4, var4.length() - 1);
               if (var29.contains(";")) {
                  var30 = var29.split(";");

                  for(var31 = 0; var31 < var30.length; ++var31) {
                     var36.add(var30[var31]);
                  }
               } else {
                  var36.add(var29);
               }
            } else if (var4 != null && !var4.isEmpty() && var4.startsWith("AC1(") && var4.endsWith(")")) {
               var29 = var4.substring(4, var4.length() - 1);
               if (var29.contains(";")) {
                  var30 = var29.split(";");

                  for(var31 = 0; var31 < var30.length; ++var31) {
                     var38.add(var30[var31]);
                  }
               } else {
                  var38.add(var29);
               }
            } else if (var4 != null && !var4.isEmpty() && var4.startsWith("AC2(") && var4.endsWith(")")) {
               var29 = var4.substring(4, var4.length() - 1);
               if (var29.contains(";")) {
                  var30 = var29.split(";");

                  for(var31 = 0; var31 < var30.length; ++var31) {
                     var39.add(var30[var31]);
                  }
               } else {
                  var39.add(var29);
               }
            } else if (var4 != null && !var4.isEmpty() && var4.startsWith("AC3(") && var4.endsWith(")")) {
               var29 = var4.substring(4, var4.length() - 1);
               if (var29.contains(";")) {
                  var30 = var29.split(";");

                  for(var31 = 0; var31 < var30.length; ++var31) {
                     var16.add(var30[var31]);
                  }
               } else {
                  var16.add(var29);
               }
            } else if (var4 != null && !var4.isEmpty() && var4.startsWith("ACX(") && var4.endsWith(")")) {
               var29 = var4.substring(4, var4.length() - 1);
               if (var29.contains(":")) {
                  var30 = var29.split(":");

                  for(var31 = 0; var31 < var30.length; ++var31) {
                     if (var31 == 0) {
                        var38.add(var30[var31]);
                     } else if (var31 == 1) {
                        var39.add(var30[var31]);
                     } else if (var31 == 2) {
                        var16.add(var30[var31]);
                     }
                  }
               } else {
                  var38.add(var29);
               }
            } else if (this.cptTabFormule.getTabforSite() != null && !this.cptTabFormule.getTabforSite().isEmpty() && this.cptTabFormule.getTabforSite().contains("SIT")) {
               var29 = this.cptTabFormule.getTabforSite().substring(4, this.cptTabFormule.getTabforSite().length() - 1);
               if (var29.contains(";")) {
                  var30 = var29.split(";");

                  for(var31 = 0; var31 < var30.length; ++var31) {
                     var17.add(var30[var31]);
                  }
               } else {
                  var17.add(var29);
               }
            } else if (this.cptTabFormule.getTabforDepartement() != null && !this.cptTabFormule.getTabforDepartement().isEmpty() && this.cptTabFormule.getTabforDepartement().contains("DEP")) {
               var29 = this.cptTabFormule.getTabforDepartement().substring(4, this.cptTabFormule.getTabforDepartement().length() - 1);
               if (var29.contains(";")) {
                  var30 = var29.split(";");

                  for(var31 = 0; var31 < var30.length; ++var31) {
                     var18.add(var30[var31]);
                  }
               } else {
                  var18.add(var29);
               }
            } else if (this.cptTabFormule.getTabforService() != null && !this.cptTabFormule.getTabforService().isEmpty() && this.cptTabFormule.getTabforService().contains("SER")) {
               var29 = this.cptTabFormule.getTabforService().substring(4, this.cptTabFormule.getTabforService().length() - 1);
               if (var29.contains(";")) {
                  var30 = var29.split(";");

                  for(var31 = 0; var31 < var30.length; ++var31) {
                     var19.add(var30[var31]);
                  }
               } else {
                  var19.add(var29);
               }
            } else if (this.cptTabFormule.getTabforRegion() != null && !this.cptTabFormule.getTabforRegion().isEmpty() && this.cptTabFormule.getTabforRegion().contains("REG")) {
               var29 = this.cptTabFormule.getTabforRegion().substring(4, this.cptTabFormule.getTabforRegion().length() - 1);
               if (var29.contains(";")) {
                  var30 = var29.split(";");

                  for(var31 = 0; var31 < var30.length; ++var31) {
                     var20.add(var30[var31]);
                  }
               } else {
                  var20.add(var29);
               }
            } else if (this.cptTabFormule.getTabforSecteur() != null && !this.cptTabFormule.getTabforSecteur().isEmpty() && this.cptTabFormule.getTabforSecteur().contains("SEC")) {
               var29 = this.cptTabFormule.getTabforSecteur().substring(4, this.cptTabFormule.getTabforSecteur().length() - 1);
               if (var29.contains(";")) {
                  var30 = var29.split(";");

                  for(var31 = 0; var31 < var30.length; ++var31) {
                     var21.add(var30[var31]);
                  }
               } else {
                  var21.add(var29);
               }
            } else if (this.cptTabFormule.getTabforPdv() != null && !this.cptTabFormule.getTabforPdv().isEmpty() && this.cptTabFormule.getTabforPdv().contains("PDV")) {
               var29 = this.cptTabFormule.getTabforPdv().substring(4, this.cptTabFormule.getTabforPdv().length() - 1);
               if (var29.contains(";")) {
                  var30 = var29.split(";");

                  for(var31 = 0; var31 < var30.length; ++var31) {
                     var22.add(var30[var31]);
                  }
               } else {
                  var22.add(var29);
               }
            } else if (!var4.contains("") && !var4.contains("") && !var4.contains("")) {
               if (this.cptTabFormule.getTabforDossier() != null && !this.cptTabFormule.getTabforDossier().isEmpty() && this.cptTabFormule.getTabforDossier().contains("DOS")) {
                  var29 = this.cptTabFormule.getTabforDossier().substring(4, this.cptTabFormule.getTabforDossier().length() - 1);
                  if (var29.contains(";")) {
                     var30 = var29.split(";");

                     for(var31 = 0; var31 < var30.length; ++var31) {
                        var26.add(var30[var31]);
                     }
                  } else {
                     var26.add(var29);
                  }
               } else if (this.cptTabFormule.getTabforParc() != null && !this.cptTabFormule.getTabforParc().isEmpty() && this.cptTabFormule.getTabforParc().contains("PRC")) {
                  var29 = this.cptTabFormule.getTabforParc().substring(4, this.cptTabFormule.getTabforParc().length() - 1);
                  if (var29.contains(";")) {
                     var30 = var29.split(";");

                     for(var31 = 0; var31 < var30.length; ++var31) {
                        var27.add(var30[var31]);
                     }
                  } else {
                     var27.add(var29);
                  }
               }
            }

            var9 = this.budgetLigneDao.chargerLesMvts(var8, var34, this.decoupageActivite, var36, var38, var39, var16, var17, var18, var19, var20, var21, var22, var23, var24, var25, var26, var27, var28, var6);
         } else {
            var9 = this.budgetLigneDao.chargerLesMvts(var8, var34, var6);
         }

         if (var9.size() != 0) {
            new BudgetLigne();

            for(var14 = 0; var14 < var9.size(); ++var14) {
               BudgetLigne var37 = (BudgetLigne)var9.get(var14);
               new ArrayList();
               List var40 = this.planBudgetaireCompteDao.chargerLesComptesCode(var37.getBudligCode(), 0, var6);
               boolean var41 = false;
               String var42 = "";
               if (var40.size() != 0) {
                  new PlanBudgetaireCompte();

                  for(int var45 = 0; var45 < var40.size(); ++var45) {
                     PlanBudgetaireCompte var43 = (PlanBudgetaireCompte)var40.get(var45);
                     var42 = var43.getPlbcptCompte();
                     if (var43.getPlbcptCompte().startsWith(var42)) {
                        var41 = true;
                        break;
                     }
                  }
               } else {
                  var42 = "";
                  var41 = true;
               }

               if (var41) {
                  Ecritures var44 = new Ecritures();
                  var44.setEcrAnnee(var34);
                  var44.setEcrCompte(var42);
                  double var46 = 0.0D;

                  for(int var47 = 1; var47 < 13; ++var47) {
                     String var48 = "";
                     if (var47 <= 9) {
                        var48 = "0" + var47;
                     } else {
                        var48 = "" + var47;
                     }

                     Date var49 = this.utilDate.stringToDateSQLLight(var34 + "-" + var48 + "-01");
                     if ((var49.after(var32) || var49.equals(var32)) && (var49.before(var33) || var49.equals(var33))) {
                        var44.setEcrDateSaisie(var49);
                        if (var47 == 1) {
                           var44.setEcrDebitPays(var37.getBudlig01R1Val());
                        } else if (var47 == 2) {
                           var44.setEcrDebitPays(var37.getBudlig02R1Val());
                        } else if (var47 == 3) {
                           var44.setEcrDebitPays(var37.getBudlig03R1Val());
                        } else if (var47 == 4) {
                           var44.setEcrDebitPays(var37.getBudlig04R1Val());
                        } else if (var47 == 5) {
                           var44.setEcrDebitPays(var37.getBudlig05R1Val());
                        } else if (var47 == 6) {
                           var44.setEcrDebitPays(var37.getBudlig06R1Val());
                        } else if (var47 == 7) {
                           var44.setEcrDebitPays(var37.getBudlig07R1Val());
                        } else if (var47 == 8) {
                           var44.setEcrDebitPays(var37.getBudlig08R1Val());
                        } else if (var47 == 9) {
                           var44.setEcrDebitPays(var37.getBudlig09R1Val());
                        } else if (var47 == 10) {
                           var44.setEcrDebitPays(var37.getBudlig10R1Val());
                        } else if (var47 == 11) {
                           var44.setEcrDebitPays(var37.getBudlig11R1Val());
                        } else if (var47 == 12) {
                           var44.setEcrDebitPays(var37.getBudlig12R1Val());
                        }

                        var46 += var44.getEcrDebitPays();
                        var44.setEcrCreditPays(0.0D);
                        var44.setEcrNature(0);
                        var44.setEcrNatureJrx(0);
                        var7.add(var44);
                     }
                  }
               }
            }
         }
      }

      return var7;
   }

   public List chargerBsByProdStartWith(int var1, String var2, int var3, Session var4) throws HibernateException, NamingException, ParseException {
      ArrayList var5 = new ArrayList();
      this.elementEnCours = var2 + "/" + this.var_exercice;
      if (this.cptTabNom.getTablisType() == 1) {
         Object[] var6 = null;
         new ArrayList();
         BonSortieLigneDao var8 = new BonSortieLigneDao(this.baseLog, this.utilInitHibernate);
         String var9 = this.var_date_periode_deb + " 00:00:00";
         String var10 = this.var_date_periode_fin + " 23:59:59";
         List var7 = var8.chargerLesMvts("", var2, (String)null, 0L, (String)null, (String)null, var9, var10, var4);
         if (var7.size() != 0) {
            for(int var11 = 0; var11 < var7.size(); ++var11) {
               var6 = (Object[])((Object[])var7.get(var11));
               this.calculeLigneStock(var6);
               Ecritures var12 = new Ecritures();
               var12.setEcrAnnee("" + this.date.getYear() + 1900);
               var12.setEcrCompte(this.code);
               var12.setEcrDateSaisie(this.date);
               var12.setEcrDebitPays(0.0D);
               if (var3 == 0) {
                  var12.setEcrCreditPays(this.ptLig);
               } else if (var3 == 1) {
                  var12.setEcrCreditPays((double)this.qteUtilLig);
               } else if (var3 == 2) {
                  var12.setEcrCreditPays((double)this.poidsBrut);
               }

               var12.setEcrNature(0);
               var12.setEcrNatureJrx(0);
               var5.add(var12);
            }
         }
      }

      return var5;
   }

   public List chargerBeByProdStartWith(int var1, String var2, int var3, Session var4) throws HibernateException, NamingException, ParseException {
      ArrayList var5 = new ArrayList();
      this.elementEnCours = var2 + "/" + this.var_exercice;
      if (this.cptTabNom.getTablisType() == 1) {
         Object[] var6 = null;
         new ArrayList();
         BonEntreeLigneDao var8 = new BonEntreeLigneDao(this.baseLog, this.utilInitHibernate);
         String var9 = this.var_date_periode_deb + " 00:00:00";
         String var10 = this.var_date_periode_fin + " 23:59:59";
         List var7 = var8.chargerLesMvts("", var2, (String)null, 0L, (String)null, (String)null, var9, var10, var4);
         if (var7.size() != 0) {
            for(int var11 = 0; var11 < var7.size(); ++var11) {
               var6 = (Object[])((Object[])var7.get(var11));
               this.calculeLigneStock(var6);
               Ecritures var12 = new Ecritures();
               var12.setEcrAnnee("" + this.date.getYear() + 1900);
               var12.setEcrCompte(this.code);
               var12.setEcrDateSaisie(this.date);
               var12.setEcrDebitPays(0.0D);
               if (var3 == 0) {
                  var12.setEcrCreditPays(this.ptLig);
               } else if (var3 == 1) {
                  var12.setEcrCreditPays((double)this.qteUtilLig);
               } else if (var3 == 2) {
                  var12.setEcrCreditPays((double)this.poidsBrut);
               }

               var12.setEcrNature(0);
               var12.setEcrNatureJrx(0);
               var5.add(var12);
            }
         }
      }

      return var5;
   }

   public List chargerBlByProdStartWith(int var1, String var2, int var3, String var4, Session var5) throws HibernateException, NamingException, ParseException {
      ArrayList var6 = new ArrayList();
      this.elementEnCours = var2 + "/" + this.var_exercice;
      if (this.cptTabNom.getTablisType() == 1) {
         Object[] var7 = null;
         new ArrayList();
         LivraisonLigneVentesDao var9 = new LivraisonLigneVentesDao(this.baseLog, this.utilInitHibernate);
         String var10 = this.var_date_periode_deb + " 00:00:00";
         String var11 = this.var_date_periode_fin + " 23:59:59";
         List var8 = var9.chargerLesMvts("", var2, (String)null, 0L, (String)null, (String)null, var10, var11, var4, var5);
         if (var8.size() != 0) {
            float var12 = 0.0F;

            for(int var13 = 0; var13 < var8.size(); ++var13) {
               var7 = (Object[])((Object[])var8.get(var13));
               this.calculeLigneVente(var7);
               Ecritures var14 = new Ecritures();
               var14.setEcrAnnee("" + this.date.getYear() + 1900);
               var14.setEcrCompte(this.code);
               var14.setEcrDateSaisie(this.date);
               var14.setEcrDebitPays(0.0D);
               if (var3 == 0) {
                  var14.setEcrCreditPays(this.ptLig);
               } else if (var3 == 1) {
                  var14.setEcrCreditPays((double)this.qteUtilLig);
               } else if (var3 == 2) {
                  var14.setEcrCreditPays((double)this.poidsBrut);
               }

               var14.setEcrNature(0);
               var14.setEcrNatureJrx(0);
               var6.add(var14);
            }
         }
      }

      return var6;
   }

   public List chargerBrByProdStartWith(int var1, String var2, int var3, String var4, Session var5) throws HibernateException, NamingException, ParseException {
      ArrayList var6 = new ArrayList();
      this.elementEnCours = var2 + "/" + this.var_exercice;
      if (this.cptTabNom.getTablisType() == 1) {
         Object[] var7 = null;
         new ArrayList();
         RetourLigneVentesDao var9 = new RetourLigneVentesDao(this.baseLog, this.utilInitHibernate);
         String var10 = this.var_date_periode_deb + " 00:00:00";
         String var11 = this.var_date_periode_fin + " 23:59:59";
         List var8 = var9.chargerLesMvts("", var2, (String)null, 0L, (String)null, (String)null, var10, var11, var4, var5);
         if (var8.size() != 0) {
            for(int var12 = 0; var12 < var8.size(); ++var12) {
               var7 = (Object[])((Object[])var8.get(var12));
               this.calculeLigneVente(var7);
               Ecritures var13 = new Ecritures();
               var13.setEcrAnnee("" + this.date.getYear() + 1900);
               var13.setEcrCompte(this.code);
               var13.setEcrDateSaisie(this.date);
               var13.setEcrDebitPays(0.0D);
               if (var3 == 0) {
                  var13.setEcrCreditPays(this.ptLig);
               } else if (var3 == 1) {
                  var13.setEcrCreditPays((double)this.qteUtilLig);
               } else if (var3 == 2) {
                  var13.setEcrCreditPays((double)this.poidsBrut);
               }

               var13.setEcrCreditPays(0.0D);
               var13.setEcrNature(0);
               var13.setEcrNatureJrx(0);
               var6.add(var13);
            }
         }
      }

      return var6;
   }

   public List chargerFacByProdStartWith(int var1, String var2, int var3, String var4, Session var5) throws HibernateException, NamingException, ParseException {
      ArrayList var6 = new ArrayList();
      this.elementEnCours = var2 + "/" + this.var_exercice;
      if (this.cptTabNom.getTablisType() == 1) {
         Object[] var7 = null;
         new ArrayList();
         FactureLigneVentesDao var9 = new FactureLigneVentesDao(this.baseLog, this.utilInitHibernate);
         String var10 = this.var_date_periode_deb + " 00:00:00";
         String var11 = this.var_date_periode_fin + " 23:59:59";
         List var8 = var9.chargerLesMvts("", var2, "", 0L, (String)null, (String)null, var10, var11, var4, var5);
         if (var8.size() != 0) {
            for(int var12 = 0; var12 < var8.size(); ++var12) {
               var7 = (Object[])((Object[])var8.get(var12));
               this.calculeLigneVente(var7);
               Ecritures var13 = new Ecritures();
               var13.setEcrAnnee("" + this.date.getYear() + 1900);
               var13.setEcrCompte(this.code);
               var13.setEcrDateSaisie(this.date);
               var13.setEcrDebitPays(0.0D);
               if (var3 == 0) {
                  var13.setEcrCreditPays(this.ptLig);
               } else if (var3 == 1) {
                  var13.setEcrCreditPays((double)this.qteUtilLig);
               } else if (var3 == 2) {
                  var13.setEcrCreditPays((double)this.poidsBrut);
               }

               var13.setEcrNature(0);
               var13.setEcrNatureJrx(0);
               var6.add(var13);
            }
         }
      }

      return var6;
   }

   public List chargerNdbByProdStartWith(int var1, String var2, int var3, String var4, Session var5) throws HibernateException, NamingException, ParseException {
      ArrayList var6 = new ArrayList();
      this.elementEnCours = var2 + "/" + this.var_exercice;
      if (this.cptTabNom.getTablisType() == 1) {
         Object[] var7 = null;
         new ArrayList();
         NoteDebitLigneVentesDao var9 = new NoteDebitLigneVentesDao(this.baseLog, this.utilInitHibernate);
         String var10 = this.var_date_periode_deb + " 00:00:00";
         String var11 = this.var_date_periode_fin + " 23:59:59";
         List var8 = var9.chargerLesMvts("", var2, 0L, (String)null, (String)null, var10, var11, var4, var5);
         if (var8.size() != 0) {
            for(int var12 = 0; var12 < var8.size(); ++var12) {
               var7 = (Object[])((Object[])var8.get(var12));
               this.calculeLigneVente(var7);
               Ecritures var13 = new Ecritures();
               var13.setEcrAnnee("" + this.date.getYear() + 1900);
               var13.setEcrCompte(this.code);
               var13.setEcrDateSaisie(this.date);
               var13.setEcrDebitPays(0.0D);
               if (var3 == 0) {
                  var13.setEcrCreditPays(this.ptLig);
               } else if (var3 == 1) {
                  var13.setEcrCreditPays((double)this.qteUtilLig);
               } else if (var3 == 2) {
                  var13.setEcrCreditPays((double)this.poidsBrut);
               }

               var13.setEcrNature(0);
               var13.setEcrNatureJrx(0);
               var6.add(var13);
            }
         }
      }

      return var6;
   }

   public List chargerAvrByProdStartWith(int var1, String var2, int var3, String var4, Session var5) throws HibernateException, NamingException, ParseException {
      ArrayList var6 = new ArrayList();
      this.elementEnCours = var2 + "/" + this.var_exercice;
      if (this.cptTabNom.getTablisType() == 1) {
         Object[] var7 = null;
         new ArrayList();
         AvoirLigneVentesDao var9 = new AvoirLigneVentesDao(this.baseLog, this.utilInitHibernate);
         String var10 = this.var_date_periode_deb + " 00:00:00";
         String var11 = this.var_date_periode_fin + " 23:59:59";
         List var8 = var9.chargerLesMvts("", var2, 0L, (String)null, (String)null, var10, var11, var4, var5);
         if (var8.size() != 0) {
            for(int var12 = 0; var12 < var8.size(); ++var12) {
               var7 = (Object[])((Object[])var8.get(var12));
               this.calculeLigneVente(var7);
               Ecritures var13 = new Ecritures();
               var13.setEcrAnnee("" + this.date.getYear() + 1900);
               var13.setEcrCompte(this.code);
               var13.setEcrDateSaisie(this.date);
               var13.setEcrDebitPays(0.0D);
               if (var3 == 0) {
                  var13.setEcrCreditPays(this.ptLig);
               } else if (var3 == 1) {
                  var13.setEcrCreditPays((double)this.qteUtilLig);
               } else if (var3 == 2) {
                  var13.setEcrCreditPays((double)this.poidsBrut);
               }

               var13.setEcrCreditPays(0.0D);
               var13.setEcrNature(0);
               var13.setEcrNatureJrx(0);
               var6.add(var13);
            }
         }
      }

      return var6;
   }

   public List chargerAchByProdStartWith(int var1, String var2, int var3, String var4, Session var5) throws HibernateException, NamingException, ParseException {
      ArrayList var6 = new ArrayList();
      this.elementEnCours = var2 + "/" + this.var_exercice;
      if (this.cptTabNom.getTablisType() == 1) {
         Object[] var7 = null;
         new ArrayList();
         FactureLigneAchatsDao var9 = new FactureLigneAchatsDao(this.baseLog, this.utilInitHibernate);
         String var10 = this.var_date_periode_deb + " 00:00:00";
         String var11 = this.var_date_periode_fin + " 23:59:59";
         List var8 = var9.chargerLesMvts("", var2, (String)null, (String)null, var10, var11, var4, var5);
         if (var8.size() != 0) {
            for(int var12 = 0; var12 < var8.size(); ++var12) {
               var7 = (Object[])((Object[])var8.get(var12));
               this.calculeLigneAchat(var7);
               Ecritures var13 = new Ecritures();
               var13.setEcrAnnee("" + this.date.getYear() + 1900);
               var13.setEcrCompte(this.code);
               var13.setEcrDateSaisie(this.date);
               var13.setEcrDebitPays(0.0D);
               if (var3 == 0) {
                  var13.setEcrCreditPays(this.ptLig);
               } else if (var3 == 1) {
                  var13.setEcrCreditPays((double)this.qteUtilLig);
               } else if (var3 == 2) {
                  var13.setEcrCreditPays((double)this.poidsBrut);
               }

               var13.setEcrCreditPays(0.0D);
               var13.setEcrNature(0);
               var13.setEcrNatureJrx(0);
               var6.add(var13);
            }
         }

         var7 = null;
         new ArrayList();
         AvoirLigneAchatsDao var17 = new AvoirLigneAchatsDao(this.baseLog, this.utilInitHibernate);
         List var16 = var17.chargerLesMvts("", var2, (String)null, (String)null, var10, var11, var5);
         if (var16.size() != 0) {
            for(int var14 = 0; var14 < var16.size(); ++var14) {
               var7 = (Object[])((Object[])var8.get(var14));
               this.calculeLigneAchat(var7);
               Ecritures var15 = new Ecritures();
               var15.setEcrAnnee("" + this.date.getYear() + 1900);
               var15.setEcrCompte(this.code);
               var15.setEcrDateSaisie(this.date);
               var15.setEcrDebitPays(0.0D);
               if (var3 == 0) {
                  var15.setEcrCreditPays(this.ptLig);
               } else if (var3 == 1) {
                  var15.setEcrCreditPays((double)this.qteUtilLig);
               } else if (var3 == 2) {
                  var15.setEcrCreditPays((double)this.poidsBrut);
               }

               var15.setEcrCreditPays(0.0D);
               var15.setEcrNature(0);
               var15.setEcrNatureJrx(0);
               var6.add(var15);
            }
         }
      }

      return var6;
   }

   public double calculCumulAmort(List var1, int var2) {
      new Amortissements();
      double var4 = 0.0D;

      for(int var6 = 0; var6 < var1.size(); ++var6) {
         Amortissements var3 = (Amortissements)var1.get(var6);
         if (var2 == 1) {
            var4 += var3.getAmoValeurAchat();
         } else if (var2 == 2) {
            var4 += var3.getAmoDotation();
         } else if (var2 == 3) {
            var4 += var3.getAmoAnterieur();
         } else if (var2 == 4) {
            var4 += var3.getAmoValeurResiduelle();
         } else if (var2 == 5) {
            var4 += var3.getAmoValeurCession();
         }
      }

      this.resultat1 = var4;
      return var4;
   }

   public double calculCumulTreso(List var1, int var2) {
      new Reglements();
      double var4 = 0.0D;

      for(int var6 = 0; var6 < var1.size(); ++var6) {
         Reglements var3 = (Reglements)var1.get(var6);
         if (var2 == 0) {
            var4 += var3.getRglDepense();
         } else if (var2 == 1) {
            var4 += var3.getRglRecette();
         } else if (var2 == 2) {
            var4 += var3.getRglRecette() - var3.getRglDepense();
         } else if (var2 == 3) {
            var4 += var3.getRglDepense() - var3.getRglRecette();
         } else if (var3.getRglRecette() != 0.0D && var3.getRglDepense() == 0.0D) {
            var4 += var3.getRglRecette();
         } else {
            var4 += var3.getRglDepense();
         }
      }

      this.resultat1 = var4;
      return var4;
   }

   public double calculCumulBulletin(List var1, String var2) {
      new BulletinLigne();
      double var4 = 0.0D;

      for(int var6 = 0; var6 < var1.size(); ++var6) {
         BulletinLigne var3 = (BulletinLigne)var1.get(var6);
         if (var2.contains(":A")) {
            var4 += var3.getBulligValColA();
         } else if (var2.contains(":B")) {
            var4 += var3.getBulligValColB();
         } else if (var2.contains(":C")) {
            var4 += var3.getBulligValColC();
         } else if (var2.contains(":D")) {
            var4 += var3.getBulligValColD();
         } else {
            var4 += var3.getBulligValColE();
         }
      }

      this.resultat1 = var4;
      return var4;
   }

   public double calculSoldeforCompte(int var1, List var2, int var3, Session var4) {
      double var5 = 0.0D;
      double var7 = 0.0D;
      double var9 = 0.0D;
      int var11;
      if (var3 != 0 && var3 != 1) {
         List var12;
         int var13;
         if (var3 == 2) {
            for(var11 = 0; var11 < this.lePlanComptable.size(); ++var11) {
               new ArrayList();
               var12 = this.chargerEcrituresByNumCpte(var1, ((PlanComptable)this.lePlanComptable.get(var11)).getPlcCompte(), var4);
               this.elementEnCours = ((PlanComptable)this.lePlanComptable.get(var11)).getPlcCompte() + "/" + this.var_exercice;
               var7 = 0.0D;
               var9 = 0.0D;

               for(var13 = 0; var13 < var12.size(); ++var13) {
                  if (((Ecritures)var12.get(var13)).getEcrNatureJrx() != 13) {
                     var7 += ((Ecritures)var12.get(var13)).getEcrDebitPays();
                     var9 += ((Ecritures)var12.get(var13)).getEcrCreditPays();
                  }
               }

               if (var7 > var9) {
                  var5 += var7 - var9;
               }
            }
         } else if (var3 == 3) {
            for(var11 = 0; var11 < this.lePlanComptable.size(); ++var11) {
               new ArrayList();
               var12 = this.chargerEcrituresByNumCpte(var1, ((PlanComptable)this.lePlanComptable.get(var11)).getPlcCompte(), var4);
               this.elementEnCours = ((PlanComptable)this.lePlanComptable.get(var11)).getPlcCompte() + "/" + this.var_exercice;
               var7 = 0.0D;
               var9 = 0.0D;

               for(var13 = 0; var13 < var12.size(); ++var13) {
                  if (((Ecritures)var12.get(var13)).getEcrNatureJrx() != 13) {
                     var7 += ((Ecritures)var12.get(var13)).getEcrDebitPays();
                     var9 += ((Ecritures)var12.get(var13)).getEcrCreditPays();
                  }
               }

               if (var9 > var7) {
                  var5 += var9 - var7;
               }
            }
         } else if (var3 == 4) {
            for(var11 = 0; var11 < var2.size(); ++var11) {
               if (((Ecritures)var2.get(var11)).getEcrNatureJrx() != 15 && ((Ecritures)var2.get(var11)).getEcrNatureJrx() != 13) {
                  var7 += ((Ecritures)var2.get(var11)).getEcrDebitPays();
               }
            }

            var5 = var7;
         } else if (var3 == 5) {
            for(var11 = 0; var11 < var2.size(); ++var11) {
               if (((Ecritures)var2.get(var11)).getEcrNatureJrx() != 15 && ((Ecritures)var2.get(var11)).getEcrNatureJrx() != 13) {
                  var9 += ((Ecritures)var2.get(var11)).getEcrCreditPays();
               }
            }

            var5 = var9;
         } else if (var3 != 10 && var3 != 11) {
            if (var3 == 12) {
               for(var11 = 0; var11 < this.lePlanComptable.size(); ++var11) {
                  new ArrayList();
                  var12 = this.chargerEcrituresByNumCpte(var1, ((PlanComptable)this.lePlanComptable.get(var11)).getPlcCompte(), var4);
                  this.elementEnCours = ((PlanComptable)this.lePlanComptable.get(var11)).getPlcCompte() + "/" + this.var_exercice;
                  var7 = 0.0D;
                  var9 = 0.0D;

                  for(var13 = 0; var13 < var12.size(); ++var13) {
                     if (((Ecritures)var12.get(var13)).getEcrNatureJrx() == 15) {
                        var7 += ((Ecritures)var12.get(var13)).getEcrDebitPays();
                        var9 += ((Ecritures)var12.get(var13)).getEcrCreditPays();
                     }
                  }

                  if (var7 > var9) {
                     var5 += var7 - var9;
                  }
               }
            } else if (var3 == 13) {
               for(var11 = 0; var11 < this.lePlanComptable.size(); ++var11) {
                  new ArrayList();
                  var12 = this.chargerEcrituresByNumCpte(var1, ((PlanComptable)this.lePlanComptable.get(var11)).getPlcCompte(), var4);
                  this.elementEnCours = ((PlanComptable)this.lePlanComptable.get(var11)).getPlcCompte() + "/" + this.var_exercice;
                  var7 = 0.0D;
                  var9 = 0.0D;

                  for(var13 = 0; var13 < var12.size(); ++var13) {
                     if (((Ecritures)var12.get(var13)).getEcrNatureJrx() == 15) {
                        var7 += ((Ecritures)var12.get(var13)).getEcrDebitPays();
                        var9 += ((Ecritures)var12.get(var13)).getEcrCreditPays();
                     }
                  }

                  if (var9 > var7) {
                     var5 += var9 - var7;
                  }
               }
            } else if (var3 == 14) {
               for(var11 = 0; var11 < var2.size(); ++var11) {
                  if (((Ecritures)var2.get(var11)).getEcrNatureJrx() == 15) {
                     var7 += ((Ecritures)var2.get(var11)).getEcrDebitPays();
                     if (((Ecritures)var2.get(var11)).getEcrCreditPays() < 0.0D) {
                        var7 += ((Ecritures)var2.get(var11)).getEcrCreditPays() * -1.0D;
                     }
                  }
               }

               var5 = var7;
            } else if (var3 == 15) {
               for(var11 = 0; var11 < var2.size(); ++var11) {
                  if (((Ecritures)var2.get(var11)).getEcrNatureJrx() == 15) {
                     var9 += ((Ecritures)var2.get(var11)).getEcrCreditPays();
                     if (((Ecritures)var2.get(var11)).getEcrDebitPays() < 0.0D) {
                        var9 += ((Ecritures)var2.get(var11)).getEcrDebitPays() * -1.0D;
                     }
                  }
               }

               var5 = var9;
            } else if (var3 == 16) {
               for(var11 = 0; var11 < var2.size(); ++var11) {
                  if (((Ecritures)var2.get(var11)).getEcrNatureJrx() != 6 && ((Ecritures)var2.get(var11)).getEcrNatureJrx() != 15 && ((Ecritures)var2.get(var11)).getEcrNatureJrx() != 13) {
                     var7 += ((Ecritures)var2.get(var11)).getEcrDebitPays();
                  }
               }

               var5 = var7;
            } else if (var3 == 17) {
               for(var11 = 0; var11 < var2.size(); ++var11) {
                  if (((Ecritures)var2.get(var11)).getEcrNatureJrx() != 6 && ((Ecritures)var2.get(var11)).getEcrNatureJrx() != 15 && ((Ecritures)var2.get(var11)).getEcrNatureJrx() != 13) {
                     var9 += ((Ecritures)var2.get(var11)).getEcrCreditPays();
                  }
               }

               var5 = var9;
            } else if (var3 == 18) {
               for(var11 = 0; var11 < var2.size(); ++var11) {
                  if (((Ecritures)var2.get(var11)).getEcrNatureJrx() != 6 && ((Ecritures)var2.get(var11)).getEcrNatureJrx() != 13) {
                     var7 += ((Ecritures)var2.get(var11)).getEcrDebitPays();
                  }
               }

               var5 = var7;
            } else if (var3 == 19) {
               for(var11 = 0; var11 < var2.size(); ++var11) {
                  if (((Ecritures)var2.get(var11)).getEcrNatureJrx() != 6 && ((Ecritures)var2.get(var11)).getEcrNatureJrx() != 13) {
                     var9 += ((Ecritures)var2.get(var11)).getEcrCreditPays();
                  }
               }

               var5 = var9;
            } else if (var3 == 20) {
               for(var11 = 0; var11 < var2.size(); ++var11) {
                  if (((Ecritures)var2.get(var11)).getEcrNatureJrx() == 6) {
                     var7 += ((Ecritures)var2.get(var11)).getEcrDebitPays();
                  }
               }

               var5 = var7;
            } else if (var3 == 21) {
               for(var11 = 0; var11 < var2.size(); ++var11) {
                  if (((Ecritures)var2.get(var11)).getEcrNatureJrx() == 6) {
                     var9 += ((Ecritures)var2.get(var11)).getEcrCreditPays();
                  }
               }

               var5 = var9;
            } else if (var3 == 22) {
               for(var11 = 0; var11 < var2.size(); ++var11) {
                  if (((Ecritures)var2.get(var11)).getEcrNatureJrx() == 6) {
                     var7 += ((Ecritures)var2.get(var11)).getEcrDebitPays();
                     var9 += ((Ecritures)var2.get(var11)).getEcrCreditPays();
                  }
               }

               var5 = var7 - var9;
            } else if (var3 == 23) {
               for(var11 = 0; var11 < var2.size(); ++var11) {
                  if (((Ecritures)var2.get(var11)).getEcrNatureJrx() == 13) {
                     var7 += ((Ecritures)var2.get(var11)).getEcrDebitPays();
                     if (((Ecritures)var2.get(var11)).getEcrCreditPays() < 0.0D) {
                        var7 += ((Ecritures)var2.get(var11)).getEcrCreditPays() * -1.0D;
                     }
                  }
               }

               var5 = var7;
            } else if (var3 == 24) {
               for(var11 = 0; var11 < var2.size(); ++var11) {
                  if (((Ecritures)var2.get(var11)).getEcrNatureJrx() == 13) {
                     var9 += ((Ecritures)var2.get(var11)).getEcrCreditPays();
                     if (((Ecritures)var2.get(var11)).getEcrDebitPays() < 0.0D) {
                        var9 += ((Ecritures)var2.get(var11)).getEcrDebitPays() * -1.0D;
                     }
                  }
               }

               var5 = var9;
            } else if (var3 == 25) {
               for(var11 = 0; var11 < this.lePlanComptable.size(); ++var11) {
                  new ArrayList();
                  var12 = this.chargerEcrituresByNumCpte(var1, ((PlanComptable)this.lePlanComptable.get(var11)).getPlcCompte(), var4);
                  this.elementEnCours = ((PlanComptable)this.lePlanComptable.get(var11)).getPlcCompte() + "/" + this.var_exercice;
                  var7 = 0.0D;
                  var9 = 0.0D;

                  for(var13 = 0; var13 < var12.size(); ++var13) {
                     if (((Ecritures)var12.get(var13)).getEcrNatureJrx() == 13) {
                        var7 += ((Ecritures)var12.get(var13)).getEcrDebitPays();
                        var9 += ((Ecritures)var12.get(var13)).getEcrCreditPays();
                     }
                  }

                  if (var7 > var9) {
                     var5 += var7 - var9;
                  }
               }
            } else if (var3 == 26) {
               for(var11 = 0; var11 < this.lePlanComptable.size(); ++var11) {
                  new ArrayList();
                  var12 = this.chargerEcrituresByNumCpte(var1, ((PlanComptable)this.lePlanComptable.get(var11)).getPlcCompte(), var4);
                  this.elementEnCours = ((PlanComptable)this.lePlanComptable.get(var11)).getPlcCompte() + "/" + this.var_exercice;
                  var7 = 0.0D;
                  var9 = 0.0D;

                  for(var13 = 0; var13 < var12.size(); ++var13) {
                     if (((Ecritures)var12.get(var13)).getEcrNatureJrx() == 13) {
                        var7 += ((Ecritures)var12.get(var13)).getEcrDebitPays();
                        var9 += ((Ecritures)var12.get(var13)).getEcrCreditPays();
                     }
                  }

                  if (var9 > var7) {
                     var5 += var9 - var7;
                  }
               }
            } else if (var3 == 27 || var3 == 28) {
               for(var11 = 0; var11 < var2.size(); ++var11) {
                  if (((Ecritures)var2.get(var11)).getEcrNatureJrx() == 13) {
                     var7 += ((Ecritures)var2.get(var11)).getEcrDebitPays();
                     var9 += ((Ecritures)var2.get(var11)).getEcrCreditPays();
                  }
               }

               if (var3 == 27) {
                  var5 = var7 - var9;
               } else {
                  var5 = var9 - var7;
               }
            }
         } else {
            for(var11 = 0; var11 < var2.size(); ++var11) {
               if (((Ecritures)var2.get(var11)).getEcrNatureJrx() == 15) {
                  var7 += ((Ecritures)var2.get(var11)).getEcrDebitPays();
                  var9 += ((Ecritures)var2.get(var11)).getEcrCreditPays();
               }
            }

            if (var3 == 10) {
               var5 = var7 - var9;
            } else {
               var5 = var9 - var7;
            }
         }
      } else {
         for(var11 = 0; var11 < var2.size(); ++var11) {
            if (((Ecritures)var2.get(var11)).getEcrNatureJrx() != 13) {
               var7 += ((Ecritures)var2.get(var11)).getEcrDebitPays();
               var9 += ((Ecritures)var2.get(var11)).getEcrCreditPays();
            }
         }

         if (var3 == 0) {
            var5 = var7 - var9;
         } else {
            var5 = var9 - var7;
         }
      }

      this.resultat1 = var5;
      return this.resultat1;
   }

   public void calculeLigneVente(Object[] var1) throws ParseException {
      if (var1[0] != null) {
         this.etat = Integer.parseInt(var1[0].toString());
      } else {
         this.etat = 0;
      }

      if (var1[1] != null) {
         this.num = var1[1].toString();
      } else {
         this.num = "";
      }

      if (var1[2] != null) {
         this.idEquipe = Long.parseLong(var1[2].toString());
      } else {
         this.idEquipe = 0L;
      }

      if (var1[3] != null) {
         this.nomDivers = var1[3].toString();
      } else {
         this.nomDivers = "";
      }

      if (var1[4] != null) {
         this.nomTiers = var1[4].toString();
      } else {
         this.nomTiers = "";
      }

      if (var1[5] != null) {
         this.date = this.utilDate.stringToDateSQL(var1[5].toString());
      } else {
         this.date = null;
      }

      if (var1[6] != null) {
         this.devise = var1[6].toString();
      } else {
         this.devise = "";
      }

      if (var1[7] != null) {
         this.idDoc = Long.parseLong(var1[7].toString());
      } else {
         this.idDoc = 0L;
      }

      if (var1[8] != null) {
         this.nomDepot = var1[8].toString();
      } else {
         this.nomDepot = "";
      }

      if (var1[9] != null) {
         this.code = var1[9].toString();
      } else {
         this.code = "";
      }

      if (var1[10] != null) {
         this.nomFamille = var1[10].toString();
      } else {
         this.nomFamille = "";
      }

      if (var1[11] != null) {
         this.libelle = var1[11].toString();
      } else {
         this.libelle = "";
      }

      if (var1[12] != null) {
         this.qteLig = Float.parseFloat(var1[12].toString());
      } else {
         this.qteLig = 0.0F;
      }

      if (var1[13] != null) {
         this.qteUtilLig = Float.parseFloat(var1[13].toString());
      } else {
         this.qteUtilLig = 0.0F;
      }

      if (var1[14] != null) {
         this.puLig = Double.parseDouble(var1[14].toString());
      } else {
         this.puLig = 0.0D;
      }

      if (var1[15] != null) {
         this.ptLig = Double.parseDouble(var1[15].toString());
      } else {
         this.ptLig = 0.0D;
      }

      if (var1[16] != null) {
         this.pumpLig = Double.parseDouble(var1[16].toString());
      } else {
         this.pumpLig = 0.0D;
      }

      if (var1[17] != null) {
         this.poidsBrut = Float.parseFloat(var1[17].toString());
      } else {
         this.poidsBrut = 0.0F;
      }

   }

   public void calculeLigneAchat(Object[] var1) throws ParseException {
      if (var1[0] != null) {
         this.etat = Integer.parseInt(var1[0].toString());
      } else {
         this.etat = 0;
      }

      if (var1[1] != null) {
         this.num = var1[1].toString();
      } else {
         this.num = "";
      }

      if (var1[2] != null) {
         this.nomDivers = var1[2].toString();
      } else {
         this.nomDivers = "";
      }

      if (var1[3] != null) {
         this.nomTiers = var1[3].toString();
      } else {
         this.nomTiers = "";
      }

      if (var1[4] != null) {
         this.date = this.utilDate.stringToDateSQL(var1[4].toString());
      } else {
         this.date = null;
      }

      if (var1[5] != null) {
         this.devise = var1[5].toString();
      } else {
         this.devise = "";
      }

      if (var1[6] != null) {
         this.idDoc = Long.parseLong(var1[6].toString());
      } else {
         this.idDoc = 0L;
      }

      if (var1[7] != null) {
         this.nomDepot = var1[7].toString();
      } else {
         this.nomDepot = "";
      }

      if (var1[8] != null) {
         this.code = var1[8].toString();
      } else {
         this.code = "";
      }

      if (var1[9] != null) {
         this.nomFamille = var1[9].toString();
      } else {
         this.nomFamille = "";
      }

      if (var1[10] != null) {
         this.libelle = var1[10].toString();
      } else {
         this.libelle = "";
      }

      if (var1[11] != null) {
         this.qteLig = Float.parseFloat(var1[11].toString());
      } else {
         this.qteLig = 0.0F;
      }

      if (var1[12] != null) {
         this.puLig = Double.parseDouble(var1[12].toString());
      } else {
         this.puLig = 0.0D;
      }

      if (var1[13] != null) {
         this.ptLig = Double.parseDouble(var1[13].toString());
      } else {
         this.ptLig = 0.0D;
      }

      if (var1[14] != null) {
         this.prLig = Double.parseDouble(var1[14].toString());
      } else {
         this.prLig = 0.0D;
      }

      if (var1[15] != null) {
         this.pumpLig = Double.parseDouble(var1[15].toString());
      } else {
         this.pumpLig = 0.0D;
      }

      if (var1[16] != null) {
         this.poidsBrut = Float.parseFloat(var1[16].toString());
      } else {
         this.poidsBrut = 0.0F;
      }

      if (var1.length >= 18) {
         if (var1[17] != null) {
            this.dossier = var1[17].toString();
         } else {
            this.dossier = "";
         }

         if (var1[18] != null) {
            this.coefDevise = Float.parseFloat(var1[18].toString());
         } else {
            this.coefDevise = 0.0F;
         }

         if (var1[19] != null) {
            this.coefPr = Float.parseFloat(var1[19].toString());
         } else {
            this.coefPr = 0.0F;
         }

         if (var1[20] != null) {
            this.prKgrLig = (double)Float.parseFloat(var1[20].toString());
         } else {
            this.prKgrLig = 0.0D;
         }
      }

   }

   public void calculeLigneStock(Object[] var1) throws ParseException {
      if (var1[0] != null) {
         this.etat = Integer.parseInt(var1[0].toString());
      } else {
         this.etat = 0;
      }

      if (var1[1] != null) {
         this.num = var1[1].toString();
      } else {
         this.num = "";
      }

      if (var1[2] != null) {
         this.date = this.utilDate.stringToDateSQL(var1[2].toString());
      } else {
         this.date = null;
      }

      if (var1[3] != null) {
         this.idEquipe = Long.parseLong(var1[3].toString());
      } else {
         this.idEquipe = 0L;
      }

      if (var1[4] != null) {
         this.idDoc = Long.parseLong(var1[4].toString());
      } else {
         this.idDoc = 0L;
      }

      if (var1[5] != null) {
         this.nomDepot = var1[5].toString();
      } else {
         this.nomDepot = "";
      }

      if (var1[6] != null) {
         this.code = var1[6].toString();
      } else {
         this.code = "";
      }

      if (var1[7] != null) {
         this.nomFamille = var1[7].toString();
      } else {
         this.nomFamille = "";
      }

      if (var1[8] != null) {
         this.libelle = var1[8].toString();
      } else {
         this.libelle = "";
      }

      if (var1[9] != null) {
         this.qteLig = Float.parseFloat(var1[9].toString());
      } else {
         this.qteLig = 0.0F;
      }

      if (var1[10] != null) {
         this.qteUtilLig = Float.parseFloat(var1[10].toString());
      } else {
         this.qteUtilLig = 0.0F;
      }

      if (var1[11] != null) {
         this.pumpLig = Double.parseDouble(var1[11].toString());
      } else {
         this.pumpLig = 0.0D;
      }

      if (var1[12] != null) {
         this.ptLig = Double.parseDouble(var1[12].toString());
      } else {
         this.ptLig = 0.0D;
      }

      if (var1[13] != null) {
         this.poidsBrut = Float.parseFloat(var1[13].toString());
      } else {
         this.poidsBrut = 0.0F;
      }

      if (var1.length >= 15) {
         if (var1[14] != null) {
            this.nomDivers = var1[14].toString();
         } else {
            this.nomDivers = "";
         }

         if (var1.length >= 16) {
            if (var1[15] != null) {
               this.typeChg = Integer.parseInt(var1[15].toString());
            } else {
               this.typeChg = 0;
            }
         }
      }

   }

   public void ajoutActivite() {
      this.complementActivites = new ComplementInformations();
   }

   public void selectionActivite() {
      if (this.datamodelactivites.isRowAvailable()) {
         this.complementActivites = (ComplementInformations)this.datamodelactivites.getRowData();
      }

   }

   public void saveActivite() throws HibernateException, NamingException {
      if (this.complementActivites == null) {
         this.complementActivites = new ComplementInformations();
      }

      Session var1 = this.utilInitHibernate.getOpenSession(this.baseLog, "EtatFinancier");
      Transaction var2 = null;

      try {
         var2 = var1.beginTransaction();
         var1.setFlushMode(FlushMode.MANUAL);
         if (this.complementActivites.getCplmenid() == 0L) {
            this.complementActivites.setCplmenType(0);
            this.complementActivites.setExercicesComptable(this.selectedExo);
            this.complementActivites = this.complementInformationsDao.inser(this.complementActivites, var1);
            this.lesactivites.add(this.complementActivites);
         } else {
            this.complementActivites = this.complementInformationsDao.modif(this.complementActivites, var1);
         }

         var1.flush();
         var2.commit();
      } catch (HibernateException var16) {
         if (var2 != null) {
            var2.rollback();
         }

         throw var16;
      } finally {
         this.utilInitHibernate.closeSession();
      }

      double var3 = 0.0D;

      for(int var5 = 0; var5 < this.lesactivites.size(); ++var5) {
         var3 += ((ComplementInformations)this.lesactivites.get(var5)).getCplmenTotal();
      }

      var1 = this.utilInitHibernate.getOpenSession(this.baseLog, "EtatFinancier");
      var2 = null;

      try {
         var2 = var1.beginTransaction();
         var1.setFlushMode(FlushMode.MANUAL);
         float var20 = 0.0F;
         int var6 = 0;

         while(true) {
            if (var6 >= this.lesactivites.size()) {
               var2.commit();
               break;
            }

            this.complementActivites = (ComplementInformations)this.lesactivites.get(var6);
            var20 = (float)this.utilNombre.myRound(this.complementActivites.getCplmenTotal() / var3 * 100.0D, 2);
            this.complementActivites.setCplmenPourcentage(var20);
            this.complementActivites = this.complementInformationsDao.modif(this.complementActivites, var1);
            var1.flush();
            ++var6;
         }
      } catch (HibernateException var18) {
         if (var2 != null) {
            var2.rollback();
         }

         throw var18;
      } finally {
         this.utilInitHibernate.closeSession();
      }

      this.datamodelactivites.setWrappedData(this.lesactivites);
      this.ajoutActivite();
   }

   public void supprimeActivite() throws HibernateException, NamingException {
      if (this.complementActivites != null) {
         Session var1 = this.utilInitHibernate.getOpenSession(this.baseLog, "EtatFinancier");
         Transaction var2 = null;

         try {
            var2 = var1.beginTransaction();
            var1.setFlushMode(FlushMode.MANUAL);
            this.complementInformationsDao.delete(this.complementActivites, var1);
            var1.flush();
            this.lesactivites.remove(this.complementActivites);
            double var3 = 0.0D;

            for(int var5 = 0; var5 < this.lesactivites.size(); ++var5) {
               var3 += ((ComplementInformations)this.lesactivites.get(var5)).getCplmenTotal();
            }

            float var12 = 0.0F;

            for(int var6 = 0; var6 < this.lesactivites.size(); ++var6) {
               this.complementActivites = (ComplementInformations)this.lesactivites.get(var6);
               var12 = (float)this.utilNombre.myRound(this.complementActivites.getCplmenTotal() / var3 * 100.0D, 2);
               this.complementActivites.setCplmenPourcentage(var12);
               this.complementActivites = this.complementInformationsDao.modif(this.complementActivites, var1);
               var1.flush();
            }

            var2.commit();
         } catch (HibernateException var10) {
            if (var2 != null) {
               var2.rollback();
            }

            throw var10;
         } finally {
            this.utilInitHibernate.closeSession();
         }
      }

      this.datamodelactivites.setWrappedData(this.lesactivites);
      this.ajoutActivite();
   }

   public void ajoutDirigeant() {
      this.complementDirigeants = new ComplementInformations();
   }

   public void selectionDirigeant() {
      if (this.datamodeldirigeants.isRowAvailable()) {
         this.complementDirigeants = (ComplementInformations)this.datamodeldirigeants.getRowData();
      }

   }

   public void saveDirigeant() throws HibernateException, NamingException {
      if (this.complementDirigeants == null) {
         this.complementDirigeants = new ComplementInformations();
      }

      Session var1 = this.utilInitHibernate.getOpenSession(this.baseLog, "EtatFinancier");
      Transaction var2 = null;

      try {
         var2 = var1.beginTransaction();
         var1.setFlushMode(FlushMode.MANUAL);
         if (this.complementDirigeants.getCplmenid() == 0L) {
            this.complementDirigeants.setCplmenType(1);
            this.complementDirigeants.setExercicesComptable(this.selectedExo);
            this.complementDirigeants = this.complementInformationsDao.inser(this.complementDirigeants, var1);
            this.lesdirigeants.add(this.complementDirigeants);
         } else {
            this.complementDirigeants = this.complementInformationsDao.modif(this.complementDirigeants, var1);
         }

         var1.flush();
         var2.commit();
      } catch (HibernateException var7) {
         if (var2 != null) {
            var2.rollback();
         }

         throw var7;
      } finally {
         this.utilInitHibernate.closeSession();
      }

      this.datamodeldirigeants.setWrappedData(this.lesdirigeants);
      this.ajoutActionnaire();
   }

   public void supprimeDirigeant() throws HibernateException, NamingException {
      if (this.complementDirigeants != null) {
         Session var1 = this.utilInitHibernate.getOpenSession(this.baseLog, "EtatFinancier");
         Transaction var2 = null;

         try {
            var2 = var1.beginTransaction();
            var1.setFlushMode(FlushMode.MANUAL);
            this.complementInformationsDao.delete(this.complementDirigeants, var1);
            var1.flush();
            this.lesdirigeants.remove(this.complementDirigeants);
            var2.commit();
         } catch (HibernateException var7) {
            if (var2 != null) {
               var2.rollback();
            }

            throw var7;
         } finally {
            this.utilInitHibernate.closeSession();
         }
      }

      this.datamodeldirigeants.setWrappedData(this.lesdirigeants);
      this.ajoutDirigeant();
   }

   public void ajoutActionnaire() {
      this.complementActionnaires = new ComplementInformations();
   }

   public void selectionActionnaire() {
      if (this.datamodelactionnaires.isRowAvailable()) {
         this.complementActionnaires = (ComplementInformations)this.datamodelactionnaires.getRowData();
      }

   }

   public void saveActionnaire() throws HibernateException, NamingException {
      if (this.complementActionnaires == null) {
         this.complementActionnaires = new ComplementInformations();
      }

      Session var1 = this.utilInitHibernate.getOpenSession(this.baseLog, "EtatFinancier");
      Transaction var2 = null;

      try {
         var2 = var1.beginTransaction();
         var1.setFlushMode(FlushMode.MANUAL);
         if (this.complementActionnaires.getCplmenid() == 0L) {
            this.complementActionnaires.setCplmenType(2);
            this.complementActionnaires.setExercicesComptable(this.selectedExo);
            this.complementActionnaires = this.complementInformationsDao.inser(this.complementActionnaires, var1);
            this.lesactionnaires.add(this.complementActionnaires);
         } else {
            this.complementActionnaires = this.complementInformationsDao.modif(this.complementActionnaires, var1);
         }

         var1.flush();
         var2.commit();
      } catch (HibernateException var16) {
         if (var2 != null) {
            var2.rollback();
         }

         throw var16;
      } finally {
         this.utilInitHibernate.closeSession();
      }

      double var3 = 0.0D;

      for(int var5 = 0; var5 < this.lesactionnaires.size(); ++var5) {
         var3 += ((ComplementInformations)this.lesactionnaires.get(var5)).getCplmenTotal();
      }

      var1 = this.utilInitHibernate.getOpenSession(this.baseLog, "EtatFinancier");
      var2 = null;

      try {
         var2 = var1.beginTransaction();
         var1.setFlushMode(FlushMode.MANUAL);
         float var20 = 0.0F;
         int var6 = 0;

         while(true) {
            if (var6 >= this.lesactionnaires.size()) {
               var2.commit();
               break;
            }

            this.complementActionnaires = (ComplementInformations)this.lesactionnaires.get(var6);
            var20 = (float)this.utilNombre.myRound(this.complementActionnaires.getCplmenTotal() / var3 * 100.0D, 2);
            this.complementActionnaires.setCplmenPourcentage(var20);
            this.complementActionnaires = this.complementInformationsDao.modif(this.complementActionnaires, var1);
            var1.flush();
            ++var6;
         }
      } catch (HibernateException var18) {
         if (var2 != null) {
            var2.rollback();
         }

         throw var18;
      } finally {
         this.utilInitHibernate.closeSession();
      }

      this.datamodelactionnaires.setWrappedData(this.lesactionnaires);
      this.ajoutActionnaire();
   }

   public void supprimeActionnaire() throws HibernateException, NamingException {
      if (this.complementActionnaires != null) {
         Session var1 = this.utilInitHibernate.getOpenSession(this.baseLog, "EtatFinancier");
         Transaction var2 = null;

         try {
            var2 = var1.beginTransaction();
            var1.setFlushMode(FlushMode.MANUAL);
            this.complementInformationsDao.delete(this.complementActionnaires, var1);
            var1.flush();
            this.lesactionnaires.remove(this.complementActionnaires);
            double var3 = 0.0D;

            for(int var5 = 0; var5 < this.lesactionnaires.size(); ++var5) {
               var3 += ((ComplementInformations)this.lesactionnaires.get(var5)).getCplmenTotal();
            }

            float var12 = 0.0F;

            for(int var6 = 0; var6 < this.lesactionnaires.size(); ++var6) {
               this.complementActionnaires = (ComplementInformations)this.lesactionnaires.get(var6);
               var12 = (float)this.utilNombre.myRound(this.complementActionnaires.getCplmenTotal() / var3 * 100.0D, 2);
               this.complementActionnaires.setCplmenPourcentage(var12);
               this.complementActionnaires = this.complementInformationsDao.modif(this.complementActionnaires, var1);
               var1.flush();
            }

            var2.commit();
         } catch (HibernateException var10) {
            if (var2 != null) {
               var2.rollback();
            }

            throw var10;
         } finally {
            this.utilInitHibernate.closeSession();
         }
      }

      this.datamodelactionnaires.setWrappedData(this.lesactionnaires);
      this.ajoutActionnaire();
   }

   public void ajoutMca() {
      this.complementMca = new ComplementInformations();
   }

   public void selectionMca() {
      if (this.datamodelmca.isRowAvailable()) {
         this.complementMca = (ComplementInformations)this.datamodelmca.getRowData();
      }

   }

   public void saveMca() throws HibernateException, NamingException {
      if (this.complementMca == null) {
         this.complementMca = new ComplementInformations();
      }

      Session var1 = this.utilInitHibernate.getOpenSession(this.baseLog, "EtatFinancier");
      Transaction var2 = null;

      try {
         var2 = var1.beginTransaction();
         var1.setFlushMode(FlushMode.MANUAL);
         if (this.complementMca.getCplmenid() == 0L) {
            this.complementMca.setCplmenType(3);
            this.complementMca.setExercicesComptable(this.selectedExo);
            this.complementMca = this.complementInformationsDao.inser(this.complementMca, var1);
            this.lesmca.add(this.complementMca);
         } else {
            this.complementMca = this.complementInformationsDao.modif(this.complementMca, var1);
         }

         var1.flush();
         var2.commit();
      } catch (HibernateException var7) {
         if (var2 != null) {
            var2.rollback();
         }

         throw var7;
      } finally {
         this.utilInitHibernate.closeSession();
      }

      this.datamodelmca.setWrappedData(this.lesmca);
      this.ajoutMca();
   }

   public void supprimeMca() throws HibernateException, NamingException {
      if (this.complementMca != null) {
         Session var1 = this.utilInitHibernate.getOpenSession(this.baseLog, "EtatFinancier");
         Transaction var2 = null;

         try {
            var2 = var1.beginTransaction();
            var1.setFlushMode(FlushMode.MANUAL);
            this.complementInformationsDao.delete(this.complementMca, var1);
            var1.flush();
            this.lesmca.remove(this.complementMca);
            var2.commit();
         } catch (HibernateException var7) {
            if (var2 != null) {
               var2.rollback();
            }

            throw var7;
         } finally {
            this.utilInitHibernate.closeSession();
         }
      }

      this.datamodelmca.setWrappedData(this.lesmca);
      this.ajoutMca();
   }

   public void ajoutFiliale() {
      this.complementFiliales = new ComplementInformations();
   }

   public void selectionFiliale() {
      if (this.datamodelfiliales.isRowAvailable()) {
         this.complementFiliales = (ComplementInformations)this.datamodelfiliales.getRowData();
      }

   }

   public void saveFiliale() throws HibernateException, NamingException {
      if (this.complementFiliales == null) {
         this.complementFiliales = new ComplementInformations();
      }

      Session var1 = this.utilInitHibernate.getOpenSession(this.baseLog, "EtatFinancier");
      Transaction var2 = null;

      try {
         var2 = var1.beginTransaction();
         var1.setFlushMode(FlushMode.MANUAL);
         if (this.complementFiliales.getCplmenid() == 0L) {
            this.complementFiliales.setCplmenType(4);
            this.complementFiliales.setExercicesComptable(this.selectedExo);
            this.complementFiliales = this.complementInformationsDao.inser(this.complementFiliales, var1);
            this.lesfiliales.add(this.complementFiliales);
         } else {
            this.complementFiliales = this.complementInformationsDao.modif(this.complementFiliales, var1);
         }

         var1.flush();
         var2.commit();
      } catch (HibernateException var16) {
         if (var2 != null) {
            var2.rollback();
         }

         throw var16;
      } finally {
         this.utilInitHibernate.closeSession();
      }

      double var3 = 0.0D;

      for(int var5 = 0; var5 < this.lesfiliales.size(); ++var5) {
         var3 += ((ComplementInformations)this.lesfiliales.get(var5)).getCplmenTotal();
      }

      var1 = this.utilInitHibernate.getOpenSession(this.baseLog, "EtatFinancier");
      var2 = null;

      try {
         var2 = var1.beginTransaction();
         var1.setFlushMode(FlushMode.MANUAL);
         float var20 = 0.0F;
         int var6 = 0;

         while(true) {
            if (var6 >= this.lesfiliales.size()) {
               var2.commit();
               break;
            }

            this.complementFiliales = (ComplementInformations)this.lesfiliales.get(var6);
            var20 = (float)this.utilNombre.myRound(this.complementFiliales.getCplmenTotal() / var3 * 100.0D, 2);
            this.complementFiliales.setCplmenPourcentage(var20);
            this.complementFiliales = this.complementInformationsDao.modif(this.complementFiliales, var1);
            var1.flush();
            ++var6;
         }
      } catch (HibernateException var18) {
         if (var2 != null) {
            var2.rollback();
         }

         throw var18;
      } finally {
         this.utilInitHibernate.closeSession();
      }

      this.datamodelfiliales.setWrappedData(this.lesfiliales);
   }

   public void supprimeFiliale() throws HibernateException, NamingException {
      if (this.complementFiliales != null) {
         Session var1 = this.utilInitHibernate.getOpenSession(this.baseLog, "EtatFinancier");
         Transaction var2 = null;

         try {
            var2 = var1.beginTransaction();
            var1.setFlushMode(FlushMode.MANUAL);
            this.complementInformationsDao.delete(this.complementFiliales, var1);
            var1.flush();
            this.lesfiliales.remove(this.complementFiliales);
            double var3 = 0.0D;
            int var5 = 0;

            while(true) {
               if (var5 >= this.lesfiliales.size()) {
                  float var12 = 0.0F;

                  for(int var6 = 0; var6 < this.lesfiliales.size(); ++var6) {
                     this.complementFiliales = (ComplementInformations)this.lesfiliales.get(var6);
                     var12 = (float)(this.complementFiliales.getCplmenTotal() / var3 * 100.0D);
                     this.complementFiliales.setCplmenPourcentage(var12);
                     this.complementFiliales = this.complementInformationsDao.modif(this.complementFiliales, var1);
                     var1.flush();
                  }

                  var2.commit();
                  break;
               }

               var3 += ((ComplementInformations)this.lesfiliales.get(var5)).getCplmenTotal();
               ++var5;
            }
         } catch (HibernateException var10) {
            if (var2 != null) {
               var2.rollback();
            }

            throw var10;
         } finally {
            this.utilInitHibernate.closeSession();
         }

         this.datamodelfiliales.setWrappedData(this.lesfiliales);
         this.ajoutFiliale();
      }

   }

   public void detailColonne01() throws HibernateException, NamingException {
      if (this.dataModelResultat.isRowAvailable()) {
         this.tabResultats = (TabResultats)this.dataModelResultat.getRowData();
         if (this.tabResultats != null) {
            this.calculDetail(1);
         }
      }

   }

   public void detailColonne02() throws HibernateException, NamingException {
      if (this.dataModelResultat.isRowAvailable()) {
         this.tabResultats = (TabResultats)this.dataModelResultat.getRowData();
         if (this.tabResultats != null) {
            this.calculDetail(2);
         }
      }

   }

   public void detailColonne03() throws HibernateException, NamingException {
      if (this.dataModelResultat.isRowAvailable()) {
         this.tabResultats = (TabResultats)this.dataModelResultat.getRowData();
         if (this.tabResultats != null) {
            this.calculDetail(3);
         }
      }

   }

   public void detailColonne04() throws HibernateException, NamingException {
      if (this.dataModelResultat.isRowAvailable()) {
         this.tabResultats = (TabResultats)this.dataModelResultat.getRowData();
         if (this.tabResultats != null) {
            this.calculDetail(4);
         }
      }

   }

   public void detailColonne05() throws HibernateException, NamingException {
      if (this.dataModelResultat.isRowAvailable()) {
         this.tabResultats = (TabResultats)this.dataModelResultat.getRowData();
         if (this.tabResultats != null) {
            this.calculDetail(5);
         }
      }

   }

   public void detailColonne06() throws HibernateException, NamingException {
      if (this.dataModelResultat.isRowAvailable()) {
         this.tabResultats = (TabResultats)this.dataModelResultat.getRowData();
         if (this.tabResultats != null) {
            this.calculDetail(6);
         }
      }

   }

   public void detailColonne07() throws HibernateException, NamingException {
      if (this.dataModelResultat.isRowAvailable()) {
         this.tabResultats = (TabResultats)this.dataModelResultat.getRowData();
         if (this.tabResultats != null) {
            this.calculDetail(7);
         }
      }

   }

   public void detailColonne08() throws HibernateException, NamingException {
      if (this.dataModelResultat.isRowAvailable()) {
         this.tabResultats = (TabResultats)this.dataModelResultat.getRowData();
         if (this.tabResultats != null) {
            this.calculDetail(8);
         }
      }

   }

   public void detailColonne09() throws HibernateException, NamingException {
      if (this.dataModelResultat.isRowAvailable()) {
         this.tabResultats = (TabResultats)this.dataModelResultat.getRowData();
         if (this.tabResultats != null) {
            this.calculDetail(9);
         }
      }

   }

   public void detailColonne10() throws HibernateException, NamingException {
      if (this.dataModelResultat.isRowAvailable()) {
         this.tabResultats = (TabResultats)this.dataModelResultat.getRowData();
         if (this.tabResultats != null) {
            this.calculDetail(10);
         }
      }

   }

   public void detailColonne11() throws HibernateException, NamingException {
      if (this.dataModelResultat.isRowAvailable()) {
         this.tabResultats = (TabResultats)this.dataModelResultat.getRowData();
         if (this.tabResultats != null) {
            this.calculDetail(11);
         }
      }

   }

   public void detailColonne12() throws HibernateException, NamingException {
      if (this.dataModelResultat.isRowAvailable()) {
         this.tabResultats = (TabResultats)this.dataModelResultat.getRowData();
         if (this.tabResultats != null) {
            this.calculDetail(12);
         }
      }

   }

   public void detailColonne13() throws HibernateException, NamingException {
      if (this.dataModelResultat.isRowAvailable()) {
         this.tabResultats = (TabResultats)this.dataModelResultat.getRowData();
         if (this.tabResultats != null) {
            this.calculDetail(13);
         }
      }

   }

   public void detailColonne14() throws HibernateException, NamingException {
      if (this.dataModelResultat.isRowAvailable()) {
         this.tabResultats = (TabResultats)this.dataModelResultat.getRowData();
         if (this.tabResultats != null) {
            this.calculDetail(14);
         }
      }

   }

   public void detailColonne15() throws HibernateException, NamingException {
      if (this.dataModelResultat.isRowAvailable()) {
         this.tabResultats = (TabResultats)this.dataModelResultat.getRowData();
         if (this.tabResultats != null) {
            this.calculDetail(15);
         }
      }

   }

   public void detailColonne16() throws HibernateException, NamingException {
      if (this.dataModelResultat.isRowAvailable()) {
         this.tabResultats = (TabResultats)this.dataModelResultat.getRowData();
         if (this.tabResultats != null) {
            this.calculDetail(16);
         }
      }

   }

   public void detailColonne17() throws HibernateException, NamingException {
      if (this.dataModelResultat.isRowAvailable()) {
         this.tabResultats = (TabResultats)this.dataModelResultat.getRowData();
         if (this.tabResultats != null) {
            this.calculDetail(17);
         }
      }

   }

   public void detailColonne18() throws HibernateException, NamingException {
      if (this.dataModelResultat.isRowAvailable()) {
         this.tabResultats = (TabResultats)this.dataModelResultat.getRowData();
         if (this.tabResultats != null) {
            this.calculDetail(18);
         }
      }

   }

   public void detailColonne19() throws HibernateException, NamingException {
      if (this.dataModelResultat.isRowAvailable()) {
         this.tabResultats = (TabResultats)this.dataModelResultat.getRowData();
         if (this.tabResultats != null) {
            this.calculDetail(19);
         }
      }

   }

   public void detailColonne20() throws HibernateException, NamingException {
      if (this.dataModelResultat.isRowAvailable()) {
         this.tabResultats = (TabResultats)this.dataModelResultat.getRowData();
         if (this.tabResultats != null) {
            this.calculDetail(20);
         }
      }

   }

   public void calculDetail(int var1) throws HibernateException, NamingException {
      this.lesEcrituresDetail.clear();
      new ArrayList();
      this.lesFormules.clear();
      if (this.tabResultats.getTabresReference() != null && !this.tabResultats.getTabresReference().isEmpty()) {
         this.cptTabElement = this.cptTabElementDao.chargerMesTabElementByRef(this.tabResultats.getTabresLibFr(), this.tabResultats.getTabresReference(), (Session)null);
         if (this.cptTabElement != null) {
            this.lesFormules = this.cptTabFormuleDao.chargerMesTabFormule(this.cptTabElement.getTabele_id(), var1);
            if (this.lesFormules.size() != 0) {
               for(int var3 = 0; var3 < this.lesFormules.size(); ++var3) {
                  this.cptTabFormule = (CptTabFormule)this.lesFormules.get(var3);
                  if (this.cptTabFormule.getTabforFormule() != null && !this.cptTabFormule.getTabforFormule().isEmpty() && this.cptTabFormule.getTabforFormule().startsWith("COMPTE(")) {
                     String var4 = this.cptTabFormule.getTabforFormule().substring(7, this.cptTabFormule.getTabforFormule().length() - 1);
                     if (var4 != null && !var4.isEmpty()) {
                        String var5 = this.utilDate.dateToStringSQLLight(this.tabResultats.getTabresDateDeb());
                        String var6 = this.utilDate.dateToStringSQLLight(this.tabResultats.getTabresDateFin());
                        this.choixNature();
                        Session var7 = this.utilInitHibernate.getOpenSession(this.baseLog, "Ecritures");
                        List var2;
                        int var9;
                        if (var4.contains(";")) {
                           String[] var8 = var4.split(";");

                           for(var9 = 0; var9 < var8.length; ++var9) {
                              String var10 = " exercicesComptable=" + this.selectedExo.getExecpt_id() + " and ecrEtat<=1 and ecrDateSaisie>='" + var5 + "' and ecrDateSaisie<='" + var6 + "' and  ecrCompte like '" + var8[var9] + "%' and ecrNatureJrx not in" + this.var_natjrx;
                              var2 = this.ecrituresDao.generationBalance(var10, var7);
                              if (var2.size() != 0) {
                                 for(int var11 = 0; var11 < var2.size(); ++var11) {
                                    this.lesEcrituresDetail.add(var2.get(var11));
                                 }
                              }
                           }
                        } else {
                           String var12 = " exercicesComptable=" + this.selectedExo.getExecpt_id() + " and ecrEtat<=1 and ecrDateSaisie>='" + var5 + "' and ecrDateSaisie<='" + var6 + "' and  ecrCompte like '" + var4 + "%' and ecrNatureJrx not in" + this.var_natjrx;
                           var2 = this.ecrituresDao.generationBalance(var12, var7);
                           if (var2.size() != 0) {
                              for(var9 = 0; var9 < var2.size(); ++var9) {
                                 this.lesEcrituresDetail.add(var2.get(var9));
                              }
                           }
                        }

                        this.utilInitHibernate.closeSession();
                     }
                  }
               }
            }
         }
      }

      this.dataModelEcrituresDetail.setWrappedData(this.lesEcrituresDetail);
      this.showModalPanelDetailCalcul = true;
   }

   public void fermerDetailLigne() {
      this.showModalPanelDetailCalcul = false;
   }

   public void verifModif01() throws HibernateException, NamingException {
      boolean var1 = this.verifModifCellule(1);
      if (var1) {
         this.tabResultats.setTabresMod01(true);
      } else {
         this.tabResultats.setTabresMod01(false);
      }

   }

   public void verifModif02() throws HibernateException, NamingException {
      boolean var1 = this.verifModifCellule(2);
      if (var1) {
         this.tabResultats.setTabresMod02(true);
      } else {
         this.tabResultats.setTabresMod02(false);
      }

   }

   public void verifModif03() throws HibernateException, NamingException {
      boolean var1 = this.verifModifCellule(3);
      if (var1) {
         this.tabResultats.setTabresMod03(true);
      } else {
         this.tabResultats.setTabresMod03(false);
      }

   }

   public void verifModif04() throws HibernateException, NamingException {
      boolean var1 = this.verifModifCellule(4);
      if (var1) {
         this.tabResultats.setTabresMod04(true);
      } else {
         this.tabResultats.setTabresMod04(false);
      }

   }

   public void verifModif05() throws HibernateException, NamingException {
      boolean var1 = this.verifModifCellule(5);
      if (var1) {
         this.tabResultats.setTabresMod05(true);
      } else {
         this.tabResultats.setTabresMod05(false);
      }

   }

   public void verifModif06() throws HibernateException, NamingException {
      boolean var1 = this.verifModifCellule(6);
      if (var1) {
         this.tabResultats.setTabresMod06(true);
      } else {
         this.tabResultats.setTabresMod06(false);
      }

   }

   public void verifModif07() throws HibernateException, NamingException {
      boolean var1 = this.verifModifCellule(7);
      if (var1) {
         this.tabResultats.setTabresMod07(true);
      } else {
         this.tabResultats.setTabresMod07(false);
      }

   }

   public void verifModif08() throws HibernateException, NamingException {
      boolean var1 = this.verifModifCellule(8);
      if (var1) {
         this.tabResultats.setTabresMod08(true);
      } else {
         this.tabResultats.setTabresMod08(false);
      }

   }

   public void verifModif09() throws HibernateException, NamingException {
      boolean var1 = this.verifModifCellule(9);
      if (var1) {
         this.tabResultats.setTabresMod09(true);
      } else {
         this.tabResultats.setTabresMod09(false);
      }

   }

   public void verifModif10() throws HibernateException, NamingException {
      boolean var1 = this.verifModifCellule(10);
      if (var1) {
         this.tabResultats.setTabresMod10(true);
      } else {
         this.tabResultats.setTabresMod10(false);
      }

   }

   public void verifModif11() throws HibernateException, NamingException {
      boolean var1 = this.verifModifCellule(11);
      if (var1) {
         this.tabResultats.setTabresMod11(true);
      } else {
         this.tabResultats.setTabresMod11(false);
      }

   }

   public void verifModif12() throws HibernateException, NamingException {
      boolean var1 = this.verifModifCellule(12);
      if (var1) {
         this.tabResultats.setTabresMod12(true);
      } else {
         this.tabResultats.setTabresMod12(false);
      }

   }

   public void verifModif13() throws HibernateException, NamingException {
      boolean var1 = this.verifModifCellule(13);
      if (var1) {
         this.tabResultats.setTabresMod13(true);
      } else {
         this.tabResultats.setTabresMod13(false);
      }

   }

   public void verifModif14() throws HibernateException, NamingException {
      boolean var1 = this.verifModifCellule(14);
      if (var1) {
         this.tabResultats.setTabresMod14(true);
      } else {
         this.tabResultats.setTabresMod14(false);
      }

   }

   public void verifModif15() throws HibernateException, NamingException {
      boolean var1 = this.verifModifCellule(15);
      if (var1) {
         this.tabResultats.setTabresMod15(true);
      } else {
         this.tabResultats.setTabresMod15(false);
      }

   }

   public void verifModif16() throws HibernateException, NamingException {
      boolean var1 = this.verifModifCellule(16);
      if (var1) {
         this.tabResultats.setTabresMod16(true);
      } else {
         this.tabResultats.setTabresMod16(false);
      }

   }

   public void verifModif17() throws HibernateException, NamingException {
      boolean var1 = this.verifModifCellule(17);
      if (var1) {
         this.tabResultats.setTabresMod17(true);
      } else {
         this.tabResultats.setTabresMod17(false);
      }

   }

   public void verifModif18() throws HibernateException, NamingException {
      boolean var1 = this.verifModifCellule(18);
      if (var1) {
         this.tabResultats.setTabresMod18(true);
      } else {
         this.tabResultats.setTabresMod18(false);
      }

   }

   public void verifModif19() throws HibernateException, NamingException {
      boolean var1 = this.verifModifCellule(19);
      if (var1) {
         this.tabResultats.setTabresMod19(true);
      } else {
         this.tabResultats.setTabresMod19(false);
      }

   }

   public void verifModif20() throws HibernateException, NamingException {
      boolean var1 = this.verifModifCellule(20);
      if (var1) {
         this.tabResultats.setTabresMod20(true);
      } else {
         this.tabResultats.setTabresMod20(false);
      }

   }

   public boolean verifModifCellule(int var1) throws HibernateException, NamingException {
      boolean var2 = false;
      this.tabResultats = (TabResultats)this.dataModelResultat.getRowData();
      if (this.tabResultats != null && this.tabResultats.getTabresType() == 3) {
         var2 = true;
         Session var3 = this.utilInitHibernate.getOpenSession(this.baseLog, "CptTabNom");
         this.cptTabElement = this.cptTabElementDao.chargerMesTabElementByRef(this.cptTabNom.getTablis_id(), this.tabResultats.getTabresReference(), var3);
         if (this.cptTabElement != null) {
            new ArrayList();
            List var4 = this.cptTabFormuleDao.chargerMesTabFormule(this.cptTabElement.getTabele_id(), var1, var3);
            if (var4.size() != 0 && ((CptTabFormule)var4.get(0)).getTabforFormule() != null && !((CptTabFormule)var4.get(0)).getTabforFormule().isEmpty() && ((CptTabFormule)var4.get(0)).getTabforFormule().startsWith("VAR(")) {
               var2 = false;
            }
         }

         this.utilInitHibernate.closeSession();
      }

      return var2;
   }

   public void initImpressionLiasseEnCours() {
      this.utilPrint = new UtilPrint(this.utilInitHibernate);
      this.affMail = false;
      this.etatCumul = 0;
      this.showModalPanelPrint = true;
   }

   public void initImpressionLiasseBilanCrTafire() {
      this.utilPrint = new UtilPrint(this.utilInitHibernate);
      this.affMail = false;
      this.etatCumul = 1;
      this.showModalPanelPrint = true;
   }

   public void initImpressionLiasseComplete() {
      this.utilPrint = new UtilPrint(this.utilInitHibernate);
      this.affMail = false;
      this.etatCumul = 2;
      this.showModalPanelPrint = true;
   }

   public void initImpressionLiasseTableaux() {
      this.utilPrint = new UtilPrint(this.utilInitHibernate);
      this.affMail = false;
      this.etatCumul = 3;
      this.showModalPanelPrint = true;
   }

   public void initImpressionNotesExplicatives01() {
      this.utilPrint = new UtilPrint(this.utilInitHibernate);
      this.affMail = false;
      this.etatCumul = 4;
      this.showModalPanelPrint = true;
   }

   public void initImpressionNotesExplicatives02() {
      this.utilPrint = new UtilPrint(this.utilInitHibernate);
      this.affMail = false;
      this.etatCumul = 5;
      this.showModalPanelPrint = true;
   }

   public void initImpressionNotesExplicatives03() {
      this.utilPrint = new UtilPrint(this.utilInitHibernate);
      this.affMail = false;
      this.etatCumul = 6;
      this.showModalPanelPrint = true;
   }

   public void initImpressionDSF() {
      this.utilPrint = new UtilPrint(this.utilInitHibernate);
      this.affMail = false;
      this.etatCumul = 7;
      this.showModalPanelPrint = true;
   }

   public void initImpressionTableaux() {
      this.utilPrint = new UtilPrint(this.utilInitHibernate);
      this.affMail = false;
      this.chargerLesModelesImpresion();
      this.showModalPanelPrint = true;
   }

   public void closeImpression() {
      this.showModalPanelPrint = false;
   }

   public String[] triAlphabetique(String[] var1, int var2) {
      int var3 = var2;
      boolean var4;
      if (var2 != 0) {
         do {
            var4 = false;

            for(int var5 = 0; var5 < var3 - 1; ++var5) {
               if (var1[var5].compareToIgnoreCase(var1[var5 + 1]) > 0) {
                  this.echanger(var1, var5, var5 + 1);
                  var4 = true;
               }
            }

            --var3;
         } while(var4);
      }

      return var1;
   }

   public void echanger(String[] var1, int var2, int var3) {
      String var4 = var1[var2];
      var1[var2] = var1[var3];
      var1[var3] = var4;
   }

   public void chargerLesModelesImpresion() {
      String var1 = StaticModePegase.getCheminContext() + File.separator + "clients" + File.separator + "structure" + this.structureLog.getStrid() + File.separator + "impression" + File.separator + "fr" + File.separator + "reporting" + File.separator + "tableaux";
      File var2 = new File(var1);
      if (!var2.exists()) {
         var2.mkdir();
      }

      this.lesModelsimpression = new ArrayList();
      String[] var3 = var2.list();
      if (var3 != null) {
         var3 = this.triAlphabetique(var3, var3.length);

         for(int var4 = 0; var4 < var3.length; ++var4) {
            String var5 = var3[var4];
            if (var5.endsWith("jasper")) {
               String var6 = var3[var4];
               if (this.verificationAutorisation(var6)) {
                  int var7 = var5.indexOf(".");
                  var5 = var5.substring(0, var7);
                  this.lesModelsimpression.add(new SelectItem(var5));
               }
            }
         }
      }

      this.nomRapport = "Tableau_bord_" + this.cptTabNom.getTablisNbCol();
   }

   public boolean verificationAutorisation(String var1) {
      boolean var2 = false;
      if (this.lesModelesAutorises != null && this.lesModelesAutorises.size() != 0) {
         for(int var3 = 0; var3 < this.lesModelesAutorises.size(); ++var3) {
            if (((String)this.lesModelesAutorises.get(var3)).toString().toLowerCase().contains(var1.toLowerCase())) {
               var2 = true;
               break;
            }
         }
      } else {
         var2 = true;
      }

      return var2;
   }

   public void imprimerPRT() throws SQLException, JRException, IOException, MalformedURLException, Exception {
      this.affMail = false;
      this.format = "PRT";
      this.imprimer();
   }

   public void imprimerJRV() throws SQLException, JRException, IOException, MalformedURLException, Exception {
      this.affMail = false;
      this.format = "JRV";
      this.imprimer();
   }

   public void imprimerPDF() throws SQLException, JRException, IOException, MalformedURLException, Exception {
      this.affMail = false;
      this.format = "PDF";
      this.imprimer();
   }

   public void imprimerXLS() throws SQLException, JRException, IOException, MalformedURLException, Exception {
      this.affMail = false;
      this.format = "XLS";
      this.imprimer();
   }

   public void imprimerDOC() throws SQLException, JRException, IOException, MalformedURLException, Exception {
      this.affMail = false;
      this.format = "DOC";
      this.imprimer();
   }

   public void imprimerODT() throws SQLException, JRException, IOException, MalformedURLException, Exception {
      this.affMail = false;
      this.format = "ODT";
      this.imprimer();
   }

   public void imprimerHTML() throws SQLException, JRException, IOException, MalformedURLException, Exception {
      this.affMail = false;
      this.format = "HTML";
      this.imprimer();
   }

   public void imprimerXML() throws SQLException, JRException, IOException, MalformedURLException, Exception {
      this.affMail = false;
      this.format = "XML";
      this.imprimer();
   }

   public void imprimerMAIL() throws SQLException, JRException, IOException, MalformedURLException, Exception {
      if (this.impEmetteur != null && !this.impEmetteur.isEmpty() && (this.impDestinataire != null && !this.impDestinataire.isEmpty() || this.impDestinataireCC != null && !this.impDestinataireCC.isEmpty() || this.impDestinataireCCI != null && !this.impDestinataireCCI.isEmpty())) {
         this.format = "MAIL";
         this.imprimer();
      }

   }

   public void envoieMAIL() throws SQLException, JRException, IOException, HibernateException, NamingException {
      if (!this.affMail) {
         this.utilPrint.chargerLesBalEmtteurs(this.baseLog, this.structureLog, this.usersLog, (Tiers)null, "");
         if (this.utilPrint.getLesbalEmetteursItems().size() != 0 && this.utilPrint.getLesbalDestinatairesItems().size() != 0) {
            this.affMail = true;
         } else {
            this.affMail = false;
         }
      } else {
         this.affMail = false;
      }

   }

   public void imprimer() throws SQLException, JRException, IOException, ClassNotFoundException, Exception {
      if (this.utilPrint == null) {
         this.utilPrint = new UtilPrint(this.utilInitHibernate);
      }

      this.utilPrint.setAdresseLivraison(this.nomGroupe);
      this.utilPrint.setVar_nom_col1(this.cptTabNom.getTablisNom01());
      this.utilPrint.setVar_nom_col2(this.cptTabNom.getTablisNom02());
      this.utilPrint.setVar_nom_col3(this.cptTabNom.getTablisNom03());
      this.utilPrint.setVar_nom_col4(this.cptTabNom.getTablisNom04());
      this.utilPrint.setVar_nom_col5(this.cptTabNom.getTablisNom05());
      this.utilPrint.setVar_nom_col6(this.cptTabNom.getTablisNom06());
      this.utilPrint.setVar_nom_col7(this.cptTabNom.getTablisNom07());
      this.utilPrint.setVar_nom_col8(this.cptTabNom.getTablisNom08());
      this.utilPrint.setVar_nom_col9(this.cptTabNom.getTablisNom09());
      this.utilPrint.setVar_nom_col10(this.cptTabNom.getTablisNom10());
      this.utilPrint.setVar_nom_col11(this.cptTabNom.getTablisNom11());
      this.utilPrint.setVar_nom_col12(this.cptTabNom.getTablisNom12());
      this.utilPrint.setVar_nom_col13(this.cptTabNom.getTablisNom13());
      this.utilPrint.setVar_nom_col14(this.cptTabNom.getTablisNom14());
      this.utilPrint.setVar_nom_col15(this.cptTabNom.getTablisNom15());
      this.utilPrint.setVar_nom_col16(this.cptTabNom.getTablisNom16());
      this.utilPrint.setVar_nom_col17(this.cptTabNom.getTablisNom17());
      this.utilPrint.setVar_nom_col18(this.cptTabNom.getTablisNom18());
      this.utilPrint.setVar_nom_col19(this.cptTabNom.getTablisNom19());
      this.utilPrint.setVar_nom_col20(this.cptTabNom.getTablisNom20());
      if (this.cptTabNom.getTablisType() == 1) {
         if (this.nomRapport != null && !this.nomRapport.isEmpty()) {
            this.utilPrint.setRapport(this.nomRapport);
            this.utilPrint.setCheminRapport(StaticModePegase.getCheminContext() + File.separator + "clients" + File.separator + "structure" + this.structureLog.getStrid() + File.separator + "impression" + File.separator + "fr" + File.separator + "reporting" + File.separator + "tableaux" + File.separator);
            this.utilPrint.setCheminSousrapport(StaticModePegase.getCheminContext() + File.separator + "clients" + File.separator + "structure" + this.structureLog.getStrid() + File.separator + "impression" + File.separator + "fr" + File.separator + "reporting" + File.separator + "sous_rapport" + File.separator);
            this.utilPrint.setEntete("Tableau de bord : " + this.cptTabNom.getTablisLibFR());
            this.utilPrint.setExercice(this.selectedExo.getExecpt_id());
            this.utilPrint.setDateDeb(this.dateDebCalcul);
            this.utilPrint.setDateFin(this.dateFinCalcul);
            String var1 = this.utilDate.dateToStringFr(this.dateDebCalcul);
            String var2 = this.utilDate.dateToStringFr(this.dateFinCalcul);
            this.filtre = "Exercice " + this.selectedExo.getExecpt_id() + " - Analyse du " + var1 + " au " + var2;
            this.utilPrint.setFiltre(this.filtre);
            this.utilPrint.setRequete(this.requete);
            this.utilPrint.setFormat(this.format);
            this.utilPrint.setEmetteur(this.impEmetteur);
            this.utilPrint.setDestinataire(this.impDestinataire);
            this.utilPrint.setDestinataireCC(this.impDestinataireCC);
            this.utilPrint.setDestinataireCCI(this.impDestinataireCCI);
            this.utilPrint.setTiersSelectionne((Tiers)null);
            this.tabResultatsList = new ArrayList();
            if (this.lesResultats.size() != 0) {
               for(int var3 = 0; var3 < this.lesResultats.size(); ++var3) {
                  this.tabResultats = new TabResultats();
                  this.tabResultats = (TabResultats)this.lesResultats.get(var3);
                  if (this.tabResultats.getTabresPrint() == 0) {
                     this.tabResultatsList.add(this.tabResultats);
                  }
               }
            }

            JRBeanCollectionDataSource var6 = new JRBeanCollectionDataSource(this.tabResultatsList);
            this.utilPrint.setjRBeanCollectionDataSource(var6);
         }

         this.utilPrint.setBaseLog(this.baseLog);
         this.utilPrint.setStructureLog(this.structureLog);
         this.utilPrint.setUsersLog(this.usersLog);
         this.utilPrint.imprimeRapport();
      } else {
         this.utilPrint.setCheminRapport(StaticModePegase.getCheminContext() + File.separator + "configuration" + File.separator + "impression" + File.separator + "fr" + File.separator + "compta" + File.separator + "etatfin_" + this.selecFiscalite + File.separator);
         this.utilPrint.setCheminSousrapport(StaticModePegase.getCheminContext() + File.separator + "configuration" + File.separator + "impression" + File.separator + "fr" + File.separator + "compta" + File.separator + "etatfin_" + this.selecFiscalite + File.separator);
         this.utilPrint.setEntete("Etats financiers");
         this.utilPrint.setNomMapping("EtatFinancier");
         this.utilPrint.setExercice(this.selectedExo.getExecpt_id());
         this.utilPrint.setDateDeb(this.dateDebCalcul);
         this.utilPrint.setDateFin(this.dateFinCalcul);
         this.utilPrint.setFormat(this.format);
         this.utilPrint.setEmetteur(this.impEmetteur);
         this.utilPrint.setDestinataire(this.impDestinataire);
         this.utilPrint.setDestinataireCC(this.impDestinataireCC);
         this.utilPrint.setDestinataireCCI(this.impDestinataireCCI);
         this.utilPrint.setTiersSelectionne((Tiers)null);
         ArrayList var4 = new ArrayList();
         JRBeanCollectionDataSource var5 = new JRBeanCollectionDataSource(var4);
         this.utilPrint.setjRBeanCollectionDataSource(var5);
         this.utilPrint.setBaseLog(this.baseLog);
         this.utilPrint.setStructureLog(this.structureLog);
         this.utilPrint.setUsersLog(this.usersLog);
         if (this.etatCumul == 0) {
            this.impressionEtat(this.cptTabNom);
         } else {
            CptTabNom var7;
            if (this.etatCumul == 1) {
               var7 = new CptTabNom();
               var7.setTablisLibFR("bilanCrTaf");
               var7.setTablisCode("XX");
               this.impressionEtat(var7);
            } else if (this.etatCumul == 2) {
               var7 = new CptTabNom();
               var7.setTablisLibFR("liasseComplete");
               var7.setTablisCode("XX");
               this.impressionEtat(var7);
            } else if (this.etatCumul == 3) {
               var7 = new CptTabNom();
               var7.setTablisLibFR("liasseTableaux");
               var7.setTablisCode("XX");
               this.impressionEtat(var7);
            } else if (this.etatCumul == 4) {
               var7 = new CptTabNom();
               var7.setTablisLibFR("notesExplicatives01");
               var7.setTablisCode("XX");
               this.impressionEtat(var7);
            } else if (this.etatCumul == 5) {
               var7 = new CptTabNom();
               var7.setTablisLibFR("notesExplicatives02");
               var7.setTablisCode("XX");
               this.impressionEtat(var7);
            } else if (this.etatCumul == 6) {
               var7 = new CptTabNom();
               var7.setTablisLibFR("notesExplicatives03");
               var7.setTablisCode("XX");
               this.impressionEtat(var7);
            } else if (this.etatCumul == 7) {
               var7 = new CptTabNom();
               var7.setTablisLibFR("notesExplicatives04");
               var7.setTablisCode("XX");
               this.impressionEtat(var7);
            }
         }
      }

   }

   public void impressionEtat(CptTabNom var1) throws SQLException, JRException, IOException, ClassNotFoundException, MalformedURLException, Exception {
      if (var1.getTablisLibFR().equals("bilanCrTaf")) {
         this.requete = "tabres_code='BA' and execpt_id=" + this.selectedExo.getExecpt_id();
         this.utilPrint.setRapport("bilanCrTaf");
         this.utilPrint.setPage_init(8);
      } else if (var1.getTablisLibFR().equals("liasseComplete")) {
         this.requete = "tabres_code='BA' and execpt_id=" + this.selectedExo.getExecpt_id();
         this.utilPrint.setRapport("liasseComplete");
         this.utilPrint.setPage_init(1);
      } else if (var1.getTablisLibFR().equals("liasseTableaux")) {
         this.requete = "tabres_code='T1' and execpt_id=" + this.selectedExo.getExecpt_id();
         this.utilPrint.setRapport("liasseTableaux");
         this.utilPrint.setEtat_init(41);
      } else if (var1.getTablisLibFR().equals("notesExplicatives01")) {
         this.requete = "tabres_code='BA' and execpt_id=" + this.selectedExo.getExecpt_id();
         this.utilPrint.setRapport("notesExplicatives01");
         this.utilPrint.setEtat_init(10);
      } else if (var1.getTablisLibFR().equals("notesExplicatives02")) {
         this.requete = "tabres_code='BA' and execpt_id=" + this.selectedExo.getExecpt_id();
         this.utilPrint.setRapport("notesExplicatives02");
         this.utilPrint.setEtat_init(10);
      } else if (var1.getTablisLibFR().equals("notesExplicatives03")) {
         this.requete = "tabres_code='BA' and execpt_id=" + this.selectedExo.getExecpt_id();
         this.utilPrint.setRapport("notesExplicatives03");
         this.utilPrint.setEtat_init(10);
      } else if (var1.getTablisLibFR().equals("notesExplicatives04")) {
         this.requete = "tabres_code='BA' and execpt_id=" + this.selectedExo.getExecpt_id();
         this.utilPrint.setRapport("notesExplicatives04");
         this.utilPrint.setEtat_init(10);
      } else {
         this.requete = "tabres_code='" + var1.getTablisCode() + "' and execpt_id=" + this.selectedExo.getExecpt_id();
         this.utilPrint.setRapport(var1.getTablisModele());
         if (var1.getTablisCode().equals("BA")) {
            this.utilPrint.setPage_init(8);
         } else if (var1.getTablisCode().equals("BP")) {
            this.utilPrint.setPage_init(10);
         } else if (var1.getTablisCode().equals("CRC")) {
            this.utilPrint.setPage_init(12);
         } else if (var1.getTablisCode().equals("CRP")) {
            this.utilPrint.setPage_init(14);
         } else if (var1.getTablisCode().equals("TAF1")) {
            this.utilPrint.setPage_init(16);
         } else if (var1.getTablisCode().equals("TAF2")) {
            this.utilPrint.setPage_init(17);
         } else if (var1.getTablisCode().equals("TAF3")) {
            this.utilPrint.setPage_init(18);
         } else if (var1.getTablisCode().equals("TAF4")) {
            this.utilPrint.setPage_init(19);
         } else {
            this.utilPrint.setEtat_init(var1.getTablisNum());
         }
      }

      this.utilPrint.setAdresseLivraison(this.nomGroupe);
      this.utilPrint.setFiltre(this.filtre);
      this.utilPrint.setRequete(this.requete);
      this.utilPrint.imprimeRapport();
   }

   public void imprimerForPRT() throws SQLException, JRException, IOException, MalformedURLException, Exception {
      this.affMail = false;
      this.format = "PRT";
      this.imprimerFor();
   }

   public void imprimerForJRV() throws SQLException, JRException, IOException, MalformedURLException, Exception {
      this.affMail = false;
      this.format = "JRV";
      this.imprimerFor();
   }

   public void imprimerForPDF() throws SQLException, JRException, IOException, MalformedURLException, Exception {
      this.affMail = false;
      this.format = "PDF";
      this.imprimerFor();
   }

   public void imprimerForXLS() throws SQLException, JRException, IOException, MalformedURLException, Exception {
      this.affMail = false;
      this.format = "XLS";
      this.imprimerFor();
   }

   public void imprimerForDOC() throws SQLException, JRException, IOException, MalformedURLException, Exception {
      this.affMail = false;
      this.format = "DOC";
      this.imprimerFor();
   }

   public void imprimerForODT() throws SQLException, JRException, IOException, MalformedURLException, Exception {
      this.affMail = false;
      this.format = "ODT";
      this.imprimerFor();
   }

   public void imprimerForHTML() throws SQLException, JRException, IOException, MalformedURLException, Exception {
      this.affMail = false;
      this.format = "HTML";
      this.imprimerFor();
   }

   public void imprimerForXML() throws SQLException, JRException, IOException, MalformedURLException, Exception {
      this.affMail = false;
      this.format = "XML";
      this.imprimerFor();
   }

   public void imprimerFor() throws SQLException, JRException, IOException, ClassNotFoundException, Exception {
      if (!this.format.equals("MAIL")) {
         this.utilPrint = new UtilPrint(this.utilInitHibernate);
      }

      if (this.cptTabNom != null) {
         this.filtre = this.cptTabNom.getTablisCode() + " : " + this.cptTabNom.getTablisLibFR();
         this.requete = "tablis_code='" + this.cptTabNom.getTablisCode() + "'";
         if (!this.format.equals("MAIL")) {
            this.utilPrint = new UtilPrint(this.utilInitHibernate);
         }

         if (this.cptTabNom.getTablisType() == 1) {
            this.utilPrint.setRapport("Tableau_Bord");
         } else {
            this.utilPrint.setRapport("Etat_Financier_str");
         }

         this.utilPrint.setCheminRapport(StaticModePegase.getCheminContext() + File.separator + "configuration" + File.separator + "impression" + File.separator + "fr" + File.separator + "compta" + File.separator);
         this.utilPrint.setCheminSousrapport(StaticModePegase.getCheminContext() + File.separator + "configuration" + File.separator + "impression" + File.separator + "fr" + File.separator + "compta" + File.separator + "sous_rapport" + File.separator);
         this.utilPrint.setEntete("Structure des Etats financiers");
         this.utilPrint.setFiltre(this.filtre);
         this.utilPrint.setRequete(this.requete);
         this.utilPrint.setFormat(this.format);
         this.utilPrint.setTiersSelectionne((Tiers)null);
         ArrayList var1 = new ArrayList();
         JRBeanCollectionDataSource var2 = new JRBeanCollectionDataSource(var1);
         this.utilPrint.setjRBeanCollectionDataSource(var2);
         this.utilPrint.setAdresseLivraison(this.nomGroupe);
         this.utilPrint.setBaseLog(this.baseLog);
         this.utilPrint.setStructureLog(this.structureLog);
         this.utilPrint.setUsersLog(this.usersLog);
         this.utilPrint.imprimeRapport();
      }

   }

   public CptTabNom getCptTabNom() {
      return this.cptTabNom;
   }

   public void setCptTabNom(CptTabNom var1) {
      this.cptTabNom = var1;
   }

   public List getLesTableauxItems() {
      return this.lesTableauxItems;
   }

   public void setLesTableauxItems(List var1) {
      this.lesTableauxItems = var1;
   }

   public boolean isTestAffElmtOrTabResultat() {
      return this.testAffElmtOrTabResultat;
   }

   public void setTestAffElmtOrTabResultat(boolean var1) {
      this.testAffElmtOrTabResultat = var1;
   }

   public boolean isVar_jrxrsv() {
      return this.var_jrxrsv;
   }

   public void setVar_jrxrsv(boolean var1) {
      this.var_jrxrsv = var1;
   }

   public boolean isVar_jrxsit() {
      return this.var_jrxsit;
   }

   public void setVar_jrxsit(boolean var1) {
      this.var_jrxsit = var1;
   }

   public TabResultats getTabResultats() {
      return this.tabResultats;
   }

   public void setTabResultats(TabResultats var1) {
      this.tabResultats = var1;
   }

   public boolean isTestAffImprimer() {
      return this.testAffImprimer;
   }

   public void setTestAffImprimer(boolean var1) {
      this.testAffImprimer = var1;
   }

   public boolean isAffMail() {
      return this.affMail;
   }

   public void setAffMail(boolean var1) {
      this.affMail = var1;
   }

   public UtilPrint getUtilPrint() {
      return this.utilPrint;
   }

   public void setUtilPrint(UtilPrint var1) {
      this.utilPrint = var1;
   }

   public Date getDateDebCalcul() {
      return this.dateDebCalcul;
   }

   public void setDateDebCalcul(Date var1) {
      this.dateDebCalcul = var1;
   }

   public Date getDateFinCalcul() {
      return this.dateFinCalcul;
   }

   public void setDateFinCalcul(Date var1) {
      this.dateFinCalcul = var1;
   }

   public int getVar_currentValue() {
      return this.var_currentValue;
   }

   public void setVar_currentValue(int var1) {
      this.var_currentValue = var1;
   }

   public String getVar_date_periode_deb() {
      return this.var_date_periode_deb;
   }

   public void setVar_date_periode_deb(String var1) {
      this.var_date_periode_deb = var1;
   }

   public String getVar_date_periode_fin() {
      return this.var_date_periode_fin;
   }

   public void setVar_date_periode_fin(String var1) {
      this.var_date_periode_fin = var1;
   }

   public long getVar_exercice() {
      return this.var_exercice;
   }

   public void setVar_exercice(long var1) {
      this.var_exercice = var1;
   }

   public boolean isVar_showBarProg() {
      return this.var_showBarProg;
   }

   public void setVar_showBarProg(boolean var1) {
      this.var_showBarProg = var1;
   }

   public String getVar_natjrx() {
      return this.var_natjrx;
   }

   public void setVar_natjrx(String var1) {
      this.var_natjrx = var1;
   }

   public boolean isVar_aff_col01() {
      return this.var_aff_col01;
   }

   public void setVar_aff_col01(boolean var1) {
      this.var_aff_col01 = var1;
   }

   public boolean isVar_aff_col02() {
      return this.var_aff_col02;
   }

   public void setVar_aff_col02(boolean var1) {
      this.var_aff_col02 = var1;
   }

   public boolean isVar_aff_col03() {
      return this.var_aff_col03;
   }

   public void setVar_aff_col03(boolean var1) {
      this.var_aff_col03 = var1;
   }

   public boolean isVar_aff_col04() {
      return this.var_aff_col04;
   }

   public void setVar_aff_col04(boolean var1) {
      this.var_aff_col04 = var1;
   }

   public boolean isVar_aff_col05() {
      return this.var_aff_col05;
   }

   public void setVar_aff_col05(boolean var1) {
      this.var_aff_col05 = var1;
   }

   public boolean isVar_aff_col06() {
      return this.var_aff_col06;
   }

   public void setVar_aff_col06(boolean var1) {
      this.var_aff_col06 = var1;
   }

   public boolean isVar_aff_col07() {
      return this.var_aff_col07;
   }

   public void setVar_aff_col07(boolean var1) {
      this.var_aff_col07 = var1;
   }

   public boolean isVar_aff_col08() {
      return this.var_aff_col08;
   }

   public void setVar_aff_col08(boolean var1) {
      this.var_aff_col08 = var1;
   }

   public boolean isVar_aff_col09() {
      return this.var_aff_col09;
   }

   public void setVar_aff_col09(boolean var1) {
      this.var_aff_col09 = var1;
   }

   public boolean isVar_aff_col10() {
      return this.var_aff_col10;
   }

   public void setVar_aff_col10(boolean var1) {
      this.var_aff_col10 = var1;
   }

   public boolean isVar_aff_col11() {
      return this.var_aff_col11;
   }

   public void setVar_aff_col11(boolean var1) {
      this.var_aff_col11 = var1;
   }

   public boolean isVar_aff_col12() {
      return this.var_aff_col12;
   }

   public void setVar_aff_col12(boolean var1) {
      this.var_aff_col12 = var1;
   }

   public boolean isVar_aff_col13() {
      return this.var_aff_col13;
   }

   public void setVar_aff_col13(boolean var1) {
      this.var_aff_col13 = var1;
   }

   public boolean isVar_aff_col14() {
      return this.var_aff_col14;
   }

   public void setVar_aff_col14(boolean var1) {
      this.var_aff_col14 = var1;
   }

   public boolean isVar_aff_col15() {
      return this.var_aff_col15;
   }

   public void setVar_aff_col15(boolean var1) {
      this.var_aff_col15 = var1;
   }

   public boolean isVar_aff_col16() {
      return this.var_aff_col16;
   }

   public void setVar_aff_col16(boolean var1) {
      this.var_aff_col16 = var1;
   }

   public boolean isVar_aff_col17() {
      return this.var_aff_col17;
   }

   public void setVar_aff_col17(boolean var1) {
      this.var_aff_col17 = var1;
   }

   public boolean isVar_aff_col18() {
      return this.var_aff_col18;
   }

   public void setVar_aff_col18(boolean var1) {
      this.var_aff_col18 = var1;
   }

   public boolean isVar_aff_col19() {
      return this.var_aff_col19;
   }

   public void setVar_aff_col19(boolean var1) {
      this.var_aff_col19 = var1;
   }

   public boolean isVar_aff_col20() {
      return this.var_aff_col20;
   }

   public void setVar_aff_col20(boolean var1) {
      this.var_aff_col20 = var1;
   }

   public CptTabElement getCptTabElement() {
      return this.cptTabElement;
   }

   public void setCptTabElement(CptTabElement var1) {
      this.cptTabElement = var1;
   }

   public int getVar_largeur_col1() {
      return this.var_largeur_col1;
   }

   public void setVar_largeur_col1(int var1) {
      this.var_largeur_col1 = var1;
   }

   public int getVar_largeur_col10() {
      return this.var_largeur_col10;
   }

   public void setVar_largeur_col10(int var1) {
      this.var_largeur_col10 = var1;
   }

   public int getVar_largeur_col11() {
      return this.var_largeur_col11;
   }

   public void setVar_largeur_col11(int var1) {
      this.var_largeur_col11 = var1;
   }

   public int getVar_largeur_col12() {
      return this.var_largeur_col12;
   }

   public void setVar_largeur_col12(int var1) {
      this.var_largeur_col12 = var1;
   }

   public int getVar_largeur_col13() {
      return this.var_largeur_col13;
   }

   public void setVar_largeur_col13(int var1) {
      this.var_largeur_col13 = var1;
   }

   public int getVar_largeur_col14() {
      return this.var_largeur_col14;
   }

   public void setVar_largeur_col14(int var1) {
      this.var_largeur_col14 = var1;
   }

   public int getVar_largeur_col15() {
      return this.var_largeur_col15;
   }

   public void setVar_largeur_col15(int var1) {
      this.var_largeur_col15 = var1;
   }

   public int getVar_largeur_col16() {
      return this.var_largeur_col16;
   }

   public void setVar_largeur_col16(int var1) {
      this.var_largeur_col16 = var1;
   }

   public int getVar_largeur_col17() {
      return this.var_largeur_col17;
   }

   public void setVar_largeur_col17(int var1) {
      this.var_largeur_col17 = var1;
   }

   public int getVar_largeur_col18() {
      return this.var_largeur_col18;
   }

   public void setVar_largeur_col18(int var1) {
      this.var_largeur_col18 = var1;
   }

   public int getVar_largeur_col19() {
      return this.var_largeur_col19;
   }

   public void setVar_largeur_col19(int var1) {
      this.var_largeur_col19 = var1;
   }

   public int getVar_largeur_col2() {
      return this.var_largeur_col2;
   }

   public void setVar_largeur_col2(int var1) {
      this.var_largeur_col2 = var1;
   }

   public int getVar_largeur_col20() {
      return this.var_largeur_col20;
   }

   public void setVar_largeur_col20(int var1) {
      this.var_largeur_col20 = var1;
   }

   public int getVar_largeur_col3() {
      return this.var_largeur_col3;
   }

   public void setVar_largeur_col3(int var1) {
      this.var_largeur_col3 = var1;
   }

   public int getVar_largeur_col4() {
      return this.var_largeur_col4;
   }

   public void setVar_largeur_col4(int var1) {
      this.var_largeur_col4 = var1;
   }

   public int getVar_largeur_col5() {
      return this.var_largeur_col5;
   }

   public void setVar_largeur_col5(int var1) {
      this.var_largeur_col5 = var1;
   }

   public int getVar_largeur_col6() {
      return this.var_largeur_col6;
   }

   public void setVar_largeur_col6(int var1) {
      this.var_largeur_col6 = var1;
   }

   public int getVar_largeur_col7() {
      return this.var_largeur_col7;
   }

   public void setVar_largeur_col7(int var1) {
      this.var_largeur_col7 = var1;
   }

   public int getVar_largeur_col8() {
      return this.var_largeur_col8;
   }

   public void setVar_largeur_col8(int var1) {
      this.var_largeur_col8 = var1;
   }

   public int getVar_largeur_col9() {
      return this.var_largeur_col9;
   }

   public void setVar_largeur_col9(int var1) {
      this.var_largeur_col9 = var1;
   }

   public int getVar_largeur_tableau() {
      return this.var_largeur_tableau;
   }

   public void setVar_largeur_tableau(int var1) {
      this.var_largeur_tableau = var1;
   }

   public DataModel getDatamodelactivites() {
      return this.datamodelactivites;
   }

   public void setDatamodelactivites(DataModel var1) {
      this.datamodelactivites = var1;
   }

   public DataModel getDatamodelactionnaires() {
      return this.datamodelactionnaires;
   }

   public void setDatamodelactionnaires(DataModel var1) {
      this.datamodelactionnaires = var1;
   }

   public DataModel getDatamodeldirigeants() {
      return this.datamodeldirigeants;
   }

   public void setDatamodeldirigeants(DataModel var1) {
      this.datamodeldirigeants = var1;
   }

   public DataModel getDatamodelfiliales() {
      return this.datamodelfiliales;
   }

   public void setDatamodelfiliales(DataModel var1) {
      this.datamodelfiliales = var1;
   }

   public DataModel getDatamodelmca() {
      return this.datamodelmca;
   }

   public void setDatamodelmca(DataModel var1) {
      this.datamodelmca = var1;
   }

   public boolean isAfficheValider() {
      return this.afficheValider;
   }

   public void setAfficheValider(boolean var1) {
      this.afficheValider = var1;
   }

   public String getOperateur() {
      return this.operateur;
   }

   public void setOperateur(String var1) {
      this.operateur = var1;
   }

   public double getResultat1() {
      return this.resultat1;
   }

   public void setResultat1(double var1) {
      this.resultat1 = var1;
   }

   public double getResultat2() {
      return this.resultat2;
   }

   public void setResultat2(double var1) {
      this.resultat2 = var1;
   }

   public String getResultat3() {
      return this.resultat3;
   }

   public void setResultat3(String var1) {
      this.resultat3 = var1;
   }

   public ExercicesComptable getLastExo() {
      return this.lastExo;
   }

   public void setLastExo(ExercicesComptable var1) {
      this.lastExo = var1;
   }

   public OptionComptabilite getOptionComptabilite() {
      return this.optionComptabilite;
   }

   public void setOptionComptabilite(OptionComptabilite var1) {
      this.optionComptabilite = var1;
   }

   public ExercicesComptable getSelectedExo() {
      return this.selectedExo;
   }

   public void setSelectedExo(ExercicesComptable var1) {
      this.selectedExo = var1;
   }

   public int getNature() {
      return this.nature;
   }

   public void setNature(int var1) {
      this.nature = var1;
   }

   public int getVar_action() {
      return this.var_action;
   }

   public void setVar_action(int var1) {
      this.var_action = var1;
   }

   public boolean isAllSelect() {
      return this.allSelect;
   }

   public void setAllSelect(boolean var1) {
      this.allSelect = var1;
   }

   public String getElementEnCours() {
      return this.elementEnCours;
   }

   public void setElementEnCours(String var1) {
      this.elementEnCours = var1;
   }

   public String getColonneEnCours() {
      return this.colonneEnCours;
   }

   public void setColonneEnCours(String var1) {
      this.colonneEnCours = var1;
   }

   public String getImpDestinataire() {
      return this.impDestinataire;
   }

   public void setImpDestinataire(String var1) {
      this.impDestinataire = var1;
   }

   public String getImpEmetteur() {
      return this.impEmetteur;
   }

   public void setImpEmetteur(String var1) {
      this.impEmetteur = var1;
   }

   public DataModel getDataModelResultat() {
      return this.dataModelResultat;
   }

   public void setDataModelResultat(DataModel var1) {
      this.dataModelResultat = var1;
   }

   public boolean isShowModalPanelPrint() {
      return this.showModalPanelPrint;
   }

   public void setShowModalPanelPrint(boolean var1) {
      this.showModalPanelPrint = var1;
   }

   public String getBaseLog() {
      return this.baseLog;
   }

   public void setBaseLog(String var1) {
      this.baseLog = var1;
   }

   public Structure getStructureLog() {
      return this.structureLog;
   }

   public void setStructureLog(Structure var1) {
      this.structureLog = var1;
   }

   public Users getUsersLog() {
      return this.usersLog;
   }

   public void setUsersLog(Users var1) {
      this.usersLog = var1;
   }

   public UtilInitHibernate getutilInitHibernate() {
      return this.utilInitHibernate;
   }

   public void setutilInitHibernate(UtilInitHibernate var1) {
      this.utilInitHibernate = var1;
   }

   public List getLesModelsimpression() {
      return this.lesModelsimpression;
   }

   public void setLesModelsimpression(List var1) {
      this.lesModelsimpression = var1;
   }

   public String getNomRapport() {
      return this.nomRapport;
   }

   public void setNomRapport(String var1) {
      this.nomRapport = var1;
   }

   public String getVar_tableau_selectionne() {
      return this.var_tableau_selectionne;
   }

   public void setVar_tableau_selectionne(String var1) {
      this.var_tableau_selectionne = var1;
   }

   public ComplementInformations getComplementActionnaires() {
      return this.complementActionnaires;
   }

   public void setComplementActionnaires(ComplementInformations var1) {
      this.complementActionnaires = var1;
   }

   public ComplementInformations getComplementActivites() {
      return this.complementActivites;
   }

   public void setComplementActivites(ComplementInformations var1) {
      this.complementActivites = var1;
   }

   public ComplementInformations getComplementDirigeants() {
      return this.complementDirigeants;
   }

   public void setComplementDirigeants(ComplementInformations var1) {
      this.complementDirigeants = var1;
   }

   public ComplementInformations getComplementFiliales() {
      return this.complementFiliales;
   }

   public void setComplementFiliales(ComplementInformations var1) {
      this.complementFiliales = var1;
   }

   public ComplementInformationsDao getComplementInformationsDao() {
      return this.complementInformationsDao;
   }

   public void setComplementInformationsDao(ComplementInformationsDao var1) {
      this.complementInformationsDao = var1;
   }

   public ComplementInformations getComplementMca() {
      return this.complementMca;
   }

   public void setComplementMca(ComplementInformations var1) {
      this.complementMca = var1;
   }

   public String getImpDestinataireCC() {
      return this.impDestinataireCC;
   }

   public void setImpDestinataireCC(String var1) {
      this.impDestinataireCC = var1;
   }

   public String getImpDestinataireCCI() {
      return this.impDestinataireCCI;
   }

   public void setImpDestinataireCCI(String var1) {
      this.impDestinataireCCI = var1;
   }

   public boolean isShowModalPanelDetailCalcul() {
      return this.showModalPanelDetailCalcul;
   }

   public void setShowModalPanelDetailCalcul(boolean var1) {
      this.showModalPanelDetailCalcul = var1;
   }

   public DataModel getDataModelEcrituresDetail() {
      return this.dataModelEcrituresDetail;
   }

   public void setDataModelEcrituresDetail(DataModel var1) {
      this.dataModelEcrituresDetail = var1;
   }

   public EcrituresBalance getEcrituresBalance() {
      return this.ecrituresBalance;
   }

   public void setEcrituresBalance(EcrituresBalance var1) {
      this.ecrituresBalance = var1;
   }

   public int getVar_resultatAffecte() {
      return this.var_resultatAffecte;
   }

   public void setVar_resultatAffecte(int var1) {
      this.var_resultatAffecte = var1;
   }

   public List getLesFormules() {
      return this.lesFormules;
   }

   public void setLesFormules(List var1) {
      this.lesFormules = var1;
   }

   public String getPageIndex() {
      return this.pageIndex;
   }

   public void setPageIndex(String var1) {
      this.pageIndex = var1;
   }

   public List getLesModelesAutorises() {
      return this.lesModelesAutorises;
   }

   public void setLesModelesAutorises(List var1) {
      this.lesModelesAutorises = var1;
   }

   public int getChoixRacine() {
      return this.choixRacine;
   }

   public void setChoixRacine(int var1) {
      this.choixRacine = var1;
   }

   public String getSelecFiscalite() {
      return this.selecFiscalite;
   }

   public void setSelecFiscalite(String var1) {
      this.selecFiscalite = var1;
   }

   public boolean isAfficheNote() {
      return this.afficheNote;
   }

   public void setAfficheNote(boolean var1) {
      this.afficheNote = var1;
   }

   public String getNotesExplicatives() {
      return this.notesExplicatives;
   }

   public void setNotesExplicatives(String var1) {
      this.notesExplicatives = var1;
   }

   public DataModel getDataModelErreur() {
      return this.dataModelErreur;
   }

   public void setDataModelErreur(DataModel var1) {
      this.dataModelErreur = var1;
   }

   public boolean isShowModalPanelErreur() {
      return this.showModalPanelErreur;
   }

   public void setShowModalPanelErreur(boolean var1) {
      this.showModalPanelErreur = var1;
   }

   public DataModel getDataModelFormules() {
      return this.dataModelFormules;
   }

   public void setDataModelFormules(DataModel var1) {
      this.dataModelFormules = var1;
   }

   public boolean isAfficheCodesEmplois() {
      return this.afficheCodesEmplois;
   }

   public void setAfficheCodesEmplois(boolean var1) {
      this.afficheCodesEmplois = var1;
   }

   public List getMesCodesEmploisItems() {
      return this.mesCodesEmploisItems;
   }

   public void setMesCodesEmploisItems(List var1) {
      this.mesCodesEmploisItems = var1;
   }
}
